The Rust Programming Language Foreword Introduction . Getting Started .. Installation .. Hello, World! .. Hello, Cargo! . Programming a Guessing Game . Common Programming Concepts .. Variables and Mutability .. Data Types .. Functions .. Comments .. Control Flow . Understanding Ownership .. What is Ownership? .. References and Borrowing .. The Slice Type . Using Structs to Structure Related Data .. Defining and Instantiating Structs .. An Example Program Using Structs .. Method Syntax . Enums and Pattern Matching .. Defining an Enum .. The match Control Flow Construct .. Concise Control Flow with if let . Managing Growing Projects with Packages, Crates, and Modules .. Packages and Crates .. Defining Modules to Control Scope and Privacy .. Paths for Referring to an Item in the Module Tree .. Bringing Paths Into Scope with the use Keyword .. Separating Modules into Different Files . Common Collections .. Storing Lists of Values with Vectors .. Storing UTF- Encoded Text with Strings .. Storing Keys with Associated Values in Hash Maps . Error Handling .. Unrecoverable Errors with panic! .. Recoverable Errors with Result .. To panic! or Not to panic! . Generic Types, Traits, and Lifetimes .. Generic Data Types .. Traits: Defining Shared Behavior .. Validating References with Lifetimes . Writing Automated Tests .. How to Write Tests .. Controlling How Tests Are Run .. Test Organization . An I/O Project: Building a Command Line Program .. Accepting Command Line Arguments .. Reading a File .. Refactoring to Improve Modularity and Error Handling .. Developing the Library‚Äôs Functionality with Test Driven Development .. Working with Environment Variables .. Writing Error Messages to Standard Error Instead of Standard Output . Functional Language Features: Iterators and Closures .. Closures: Anonymous Functions that Capture Their Environment .. Processing a Series of Items with Iterators .. Improving Our I/O Project .. Comparing Performance: Loops vs. Iterators . More about Cargo and Crates.io .. Customizing Builds with Release Profiles .. Publishing a Crate to Crates.io .. Cargo Workspaces .. Installing Binaries from Crates.io with cargo install .. Extending Cargo with Custom Commands . Smart Pointers .. Using Box<T> to Point to Data on the Heap .. Treating Smart Pointers Like Regular References with the Deref Trait .. Running Code on Cleanup with the Drop Trait .. Rc<T>, the Reference Counted Smart Pointer .. RefCell<T> and the Interior Mutability Pattern .. Reference Cycles Can Leak Memory . Fearless Concurrency .. Using Threads to Run Code Simultaneously .. Using Message Passing to Transfer Data Between Threads .. Shared-State Concurrency .. Extensible Concurrency with the Sync and Send Traits . Object Oriented Programming Features of Rust .. Characteristics of Object-Oriented Languages .. Using Trait Objects That Allow for Values of Different Types .. Implementing an Object-Oriented Design Pattern . Patterns and Matching .. All the Places Patterns Can Be Used .. Refutability: Whether a Pattern Might Fail to Match .. Pattern Syntax . Advanced Features .. Unsafe Rust .. Advanced Traits .. Advanced Types .. Advanced Functions and Closures .. Macros . Final Project: Building a Multithreaded Web Server .. Building a Single-Threaded Web Server .. Turning Our Single-Threaded Server into a Multithreaded Server .. Graceful Shutdown and Cleanup . Appendix .. A - Keywords .. B - Operators and Symbols .. C - Derivable Traits .. D - Useful Development Tools .. E - Editions .. F - Translations of the Book .. G - How Rust is Made and ‚ÄúNightly Rust‚Äù   The Rust Programming Language   The Rust Programming Language by Steve Klabnik and Carol Nichols, with contributions from the Rust Community  This version of the text assumes you‚Äôre using Rust .. (released --) or later. See the ‚ÄúInstallation‚Äù section of Chapter  to install or update Rust.  The HTML format is available online at https://doc.rust-lang.org/stable/book/ and offline with installations of Rust made with rustup; run rustup doc --book to open.  Several community translations are also available.  This text is available in paperback and ebook format from No Starch Press.  üö® Want a more interactive learning experience? Try out a different version of the Rust Book, featuring: quizzes, highlighting, visualizations, and more: https://rust-book.cs.brown.edu  Foreword It wasn‚Äôt always so clear, but the Rust programming language is fundamentally about empowerment: no matter what kind of code you are writing now, Rust empowers you to reach farther, to program with confidence in a wider variety of domains than you did before.  Take, for example, ‚Äúsystems-level‚Äù work that deals with low-level details of memory management, data representation, and concurrency. Traditionally, this realm of programming is seen as arcane, accessible only to a select few who have devoted the necessary years learning to avoid its infamous pitfalls. And even those who practice it do so with caution, lest their code be open to exploits, crashes, or corruption.  Rust breaks down these barriers by eliminating the old pitfalls and providing a friendly, polished set of tools to help you along the way. Programmers who need to ‚Äúdip down‚Äù into lower-level control can do so with Rust, without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. Better yet, the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage.  Programmers who are already working with low-level code can use Rust to raise their ambitions. For example, introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you. And you can tackle more aggressive optimizations in your code with the confidence that you won‚Äôt accidentally introduce crashes or vulnerabilities.  But Rust isn‚Äôt limited to low-level systems programming. It‚Äôs expressive and ergonomic enough to make CLI apps, web servers, and many other kinds of code quite pleasant to write ‚Äî you‚Äôll find simple examples of both later in the book. Working with Rust allows you to build skills that transfer from one domain to another; you can learn Rust by writing a web app, then apply those same skills to target your Raspberry Pi.  This book fully embraces the potential of Rust to empower its users. It‚Äôs a friendly and approachable text intended to help you level up not just your knowledge of Rust, but also your reach and confidence as a programmer in general. So dive in, get ready to learn‚Äîand welcome to the Rust community!  ‚Äî Nicholas Matsakis and Aaron Turon  Introduction Note: This edition of the book is the same as The Rust Programming Language available in print and ebook format from No Starch Press.  Welcome to The Rust Programming Language, an introductory book about Rust. The Rust programming language helps you write faster, more reliable software. High-level ergonomics and low-level control are often at odds in programming language design; Rust challenges that conflict. Through balancing powerful technical capacity and a great developer experience, Rust gives you the option to control low-level details (such as memory usage) without all the hassle traditionally associated with such control.  Who Rust Is For Rust is ideal for many people for a variety of reasons. Let‚Äôs look at a few of the most important groups.  Teams of Developers Rust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge. Low-level code is prone to various subtle bugs, which in most other languages can be caught only through extensive testing and careful code review by experienced developers. In Rust, the compiler plays a gatekeeper role by refusing to compile code with these elusive bugs, including concurrency bugs. By working alongside the compiler, the team can spend their time focusing on the program‚Äôs logic rather than chasing down bugs.  Rust also brings contemporary developer tools to the systems programming world:  Cargo, the included dependency manager and build tool, makes adding, compiling, and managing dependencies painless and consistent across the Rust ecosystem. The Rustfmt formatting tool ensures a consistent coding style across developers. The rust-analyzer powers Integrated Development Environment (IDE) integration for code completion and inline error messages. By using these and other tools in the Rust ecosystem, developers can be productive while writing systems-level code.  Students Rust is for students and those who are interested in learning about systems concepts. Using Rust, many people have learned about topics like operating systems development. The community is very welcoming and happy to answer student questions. Through efforts such as this book, the Rust teams want to make systems concepts more accessible to more people, especially those new to programming.  Companies Hundreds of companies, large and small, use Rust in production for a variety of tasks, including command line tools, web services, DevOps tooling, embedded devices, audio and video analysis and transcoding, cryptocurrencies, bioinformatics, search engines, Internet of Things applications, machine learning, and even major parts of the Firefox web browser.  Open Source Developers Rust is for people who want to build the Rust programming language, community, developer tools, and libraries. We‚Äôd love to have you contribute to the Rust language.  People Who Value Speed and Stability Rust is for people who crave speed and stability in a language. By speed, we mean both how quickly Rust code can run and the speed at which Rust lets you write programs. The Rust compiler‚Äôs checks ensure stability through feature additions and refactoring. This is in contrast to the brittle legacy code in languages without these checks, which developers are often afraid to modify. By striving for zero-cost abstractions, higher-level features that compile to lower-level code as fast as code written manually, Rust endeavors to make safe code be fast code as well.  The Rust language hopes to support many other users as well; those mentioned here are merely some of the biggest stakeholders. Overall, Rust‚Äôs greatest ambition is to eliminate the trade-offs that programmers have accepted for decades by providing safety and productivity, speed and ergonomics. Give Rust a try and see if its choices work for you.  Who This Book Is For This book assumes that you‚Äôve written code in another programming language but doesn‚Äôt make any assumptions about which one. We‚Äôve tried to make the material broadly accessible to those from a wide variety of programming backgrounds. We don‚Äôt spend a lot of time talking about what programming is or how to think about it. If you‚Äôre entirely new to programming, you would be better served by reading a book that specifically provides an introduction to programming.  How to Use This Book In general, this book assumes that you‚Äôre reading it in sequence from front to back. Later chapters build on concepts in earlier chapters, and earlier chapters might not delve into details on a particular topic but will revisit the topic in a later chapter.  You‚Äôll find two kinds of chapters in this book: concept chapters and project chapters. In concept chapters, you‚Äôll learn about an aspect of Rust. In project chapters, we‚Äôll build small programs together, applying what you‚Äôve learned so far. Chapters , , and  are project chapters; the rest are concept chapters.  Chapter  explains how to install Rust, how to write a ‚ÄúHello, world!‚Äù program, and how to use Cargo, Rust‚Äôs package manager and build tool. Chapter  is a hands-on introduction to writing a program in Rust, having you build up a number guessing game. Here we cover concepts at a high level, and later chapters will provide additional detail. If you want to get your hands dirty right away, Chapter  is the place for that. Chapter  covers Rust features that are similar to those of other programming languages, and in Chapter  you‚Äôll learn about Rust‚Äôs ownership system. If you‚Äôre a particularly meticulous learner who prefers to learn every detail before moving on to the next, you might want to skip Chapter  and go straight to Chapter , returning to Chapter  when you‚Äôd like to work on a project applying the details you‚Äôve learned.  Chapter  discusses structs and methods, and Chapter  covers enums, match expressions, and the if let control flow construct. You‚Äôll use structs and enums to make custom types in Rust.  In Chapter , you‚Äôll learn about Rust‚Äôs module system and about privacy rules for organizing your code and its public Application Programming Interface (API). Chapter  discusses some common collection data structures that the standard library provides, such as vectors, strings, and hash maps. Chapter  explores Rust‚Äôs error-handling philosophy and techniques.  Chapter  digs into generics, traits, and lifetimes, which give you the power to define code that applies to multiple types. Chapter  is all about testing, which even with Rust‚Äôs safety guarantees is necessary to ensure your program‚Äôs logic is correct. In Chapter , we‚Äôll build our own implementation of a subset of functionality from the grep command line tool that searches for text within files. For this, we‚Äôll use many of the concepts we discussed in the previous chapters.  Chapter  explores closures and iterators: features of Rust that come from functional programming languages. In Chapter , we‚Äôll examine Cargo in more depth and talk about best practices for sharing your libraries with others. Chapter  discusses smart pointers that the standard library provides and the traits that enable their functionality.  In Chapter , we‚Äôll walk through different models of concurrent programming and talk about how Rust helps you to program in multiple threads fearlessly. Chapter  looks at how Rust idioms compare to object-oriented programming principles you might be familiar with.  Chapter  is a reference on patterns and pattern matching, which are powerful ways of expressing ideas throughout Rust programs. Chapter  contains a smorgasbord of advanced topics of interest, including unsafe Rust, macros, and more about lifetimes, traits, types, functions, and closures.  In Chapter , we‚Äôll complete a project in which we‚Äôll implement a low-level multithreaded web server!  Finally, some appendices contain useful information about the language in a more reference-like format. Appendix A covers Rust‚Äôs keywords, Appendix B covers Rust‚Äôs operators and symbols, Appendix C covers derivable traits provided by the standard library, Appendix D covers some useful development tools, and Appendix E explains Rust editions. In Appendix F, you can find translations of the book, and in Appendix G we‚Äôll cover how Rust is made and what nightly Rust is.  There is no wrong way to read this book: if you want to skip ahead, go for it! You might have to jump back to earlier chapters if you experience any confusion. But do whatever works for you.   An important part of the process of learning Rust is learning how to read the error messages the compiler displays: these will guide you toward working code. As such, we‚Äôll provide many examples that don‚Äôt compile along with the error message the compiler will show you in each situation. Know that if you enter and run a random example, it may not compile! Make sure you read the surrounding text to see whether the example you‚Äôre trying to run is meant to error. Ferris will also help you distinguish code that isn‚Äôt meant to work:  Ferris	Meaning Ferris with a question mark	This code does not compile! Ferris throwing up their hands	This code panics! Ferris with one claw up, shrugging	This code does not produce the desired behavior. In most situations, we‚Äôll lead you to the correct version of any code that doesn‚Äôt compile.  Source Code The source files from which this book is generated can be found on GitHub.  Getting Started Let‚Äôs start your Rust journey! There‚Äôs a lot to learn, but every journey starts somewhere. In this chapter, we‚Äôll discuss:  Installing Rust on Linux, macOS, and Windows Writing a program that prints Hello, world! Using cargo, Rust‚Äôs package manager and build system Installation The first step is to install Rust. We‚Äôll download Rust through rustup, a command line tool for managing Rust versions and associated tools. You‚Äôll need an internet connection for the download.  Note: If you prefer not to use rustup for some reason, please see the Other Rust Installation Methods page for more options.  The following steps install the latest stable version of the Rust compiler. Rust‚Äôs stability guarantees ensure that all the examples in the book that compile will continue to compile with newer Rust versions. The output might differ slightly between versions because Rust often improves error messages and warnings. In other words, any newer, stable version of Rust you install using these steps should work as expected with the content of this book.  Command Line Notation In this chapter and throughout the book, we‚Äôll show some commands used in the terminal. Lines that you should enter in a terminal all start with $. You don‚Äôt need to type the $ character; it‚Äôs the command line prompt shown to indicate the start of each command. Lines that don‚Äôt start with $ typically show the output of the previous command. Additionally, PowerShell-specific examples will use > rather than $.  Installing rustup on Linux or macOS If you‚Äôre using Linux or macOS, open a terminal and enter the following command:  The command downloads a script and starts the installation of the rustup tool, which installs the latest stable version of Rust. You might be prompted for your password. If the install is successful, the following line will appear:  You will also need a linker, which is a program that Rust uses to join its compiled outputs into one file. It is likely you already have one. If you get linker errors, you should install a C compiler, which will typically include a linker. A C compiler is also useful because some common Rust packages depend on C code and will need a C compiler.  On macOS, you can get a C compiler by running:  Linux users should generally install GCC or Clang, according to their distribution‚Äôs documentation. For example, if you use Ubuntu, you can install the build-essential package.  Installing rustup on Windows On Windows, go to https://www.rust-lang.org/tools/install and follow the instructions for installing Rust. At some point in the installation, you‚Äôll be prompted to install Visual Studio. This provides a linker and the native libraries needed to compile programs. If you need more help with this step, see https://rust-lang.github.io/rustup/installation/windows-msvc.html  The rest of this book uses commands that work in both cmd.exe and PowerShell. If there are specific differences, we‚Äôll explain which to use.  Troubleshooting To check whether you have Rust installed correctly, open a shell and enter this line:  You should see the version number, commit hash, and commit date for the latest stable version that has been released, in the following format:  If you see this information, you have installed Rust successfully! If you don‚Äôt see this information, check that Rust is in your %PATH% system variable as follows.  In Windows CMD, use:  In PowerShell, use:  In Linux and macOS, use:  If that‚Äôs all correct and Rust still isn‚Äôt working, there are a number of places you can get help. Find out how to get in touch with other Rustaceans (a silly nickname we call ourselves) on the community page.  Updating and Uninstalling Once Rust is installed via rustup, updating to a newly released version is easy. From your shell, run the following update script:  To uninstall Rust and rustup, run the following uninstall script from your shell:  Local Documentation The installation of Rust also includes a local copy of the documentation so that you can read it offline. Run rustup doc to open the local documentation in your browser.  Any time a type or function is provided by the standard library and you‚Äôre not sure what it does or how to use it, use the application programming interface (API) documentation to find out!  Hello, World! Now that you‚Äôve installed Rust, it‚Äôs time to write your first Rust program. It‚Äôs traditional when learning a new language to write a little program that prints the text Hello, world! to the screen, so we‚Äôll do the same here!  Note: This book assumes basic familiarity with the command line. Rust makes no specific demands about your editing or tooling or where your code lives, so if you prefer to use an integrated development environment (IDE) instead of the command line, feel free to use your favorite IDE. Many IDEs now have some degree of Rust support; check the IDE‚Äôs documentation for details. The Rust team has been focusing on enabling great IDE support via rust-analyzer. See Appendix D for more details.  Creating a Project Directory You‚Äôll start by making a directory to store your Rust code. It doesn‚Äôt matter to Rust where your code lives, but for the exercises and projects in this book, we suggest making a projects directory in your home directory and keeping all your projects there.  Open a terminal and enter the following commands to make a projects directory and a directory for the ‚ÄúHello, world!‚Äù project within the projects directory.  For Linux, macOS, and PowerShell on Windows, enter this:  For Windows CMD, enter this:  Writing and Running a Rust Program Next, make a new source file and call it main.rs. Rust files always end with the .rs extension. If you‚Äôre using more than one word in your filename, the convention is to use an underscore to separate them. For example, use hello_world.rs rather than helloworld.rs.  Now open the main.rs file you just created and enter the code in Listing -.  Filename: main.rs  Listing -: A program that prints Hello, world!  Save the file and go back to your terminal window in the ~/projects/hello_world directory. On Linux or macOS, enter the following commands to compile and run the file:  On Windows, enter the command .\main.exe instead of ./main:  Regardless of your operating system, the string Hello, world! should print to the terminal. If you don‚Äôt see this output, refer back to the ‚ÄúTroubleshooting‚Äù part of the Installation section for ways to get help.  If Hello, world! did print, congratulations! You‚Äôve officially written a Rust program. That makes you a Rust programmer‚Äîwelcome!  Anatomy of a Rust Program Let‚Äôs review this ‚ÄúHello, world!‚Äù program in detail. Here‚Äôs the first piece of the puzzle:  These lines define a function named main. The main function is special: it is always the first code that runs in every executable Rust program. Here, the first line declares a function named main that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses ().  The function body is wrapped in {}. Rust requires curly brackets around all function bodies. It‚Äôs good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.  Note: If you want to stick to a standard style across Rust projects, you can use an automatic formatter tool called rustfmt to format your code in a particular style (more on rustfmt in Appendix D). The Rust team has included this tool with the standard Rust distribution, as rustc is, so it should already be installed on your computer!  The body of the main function holds the following code:  This line does all the work in this little program: it prints text to the screen. There are four important details to notice here.  First, Rust style is to indent with four spaces, not a tab.  Second, println! calls a Rust macro. If it had called a function instead, it would be entered as println (without the !). We‚Äôll discuss Rust macros in more detail in Chapter . For now, you just need to know that using a ! means that you‚Äôre calling a macro instead of a normal function and that macros don‚Äôt always follow the same rules as functions.  Third, you see the "Hello, world!" string. We pass this string as an argument to println!, and the string is printed to the screen.  Fourth, we end the line with a semicolon (;), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.  Compiling and Running Are Separate Steps You‚Äôve just run a newly created program, so let‚Äôs examine each step in the process.  Before running a Rust program, you must compile it using the Rust compiler by entering the rustc command and passing it the name of your source file, like this:  If you have a C or C++ background, you‚Äôll notice that this is similar to gcc or clang. After compiling successfully, Rust outputs a binary executable.  On Linux, macOS, and PowerShell on Windows, you can see the executable by entering the ls command in your shell:  On Linux and macOS, you‚Äôll see two files. With PowerShell on Windows, you‚Äôll see the same three files that you would see using CMD. With CMD on Windows, you would enter the following:  This shows the source code file with the .rs extension, the executable file (main.exe on Windows, but main on all other platforms), and, when using Windows, a file containing debugging information with the .pdb extension. From here, you run the main or main.exe file, like this:  If your main.rs is your ‚ÄúHello, world!‚Äù program, this line prints Hello, world! to your terminal.  If you‚Äôre more familiar with a dynamic language, such as Ruby, Python, or JavaScript, you might not be used to compiling and running a program as separate steps. Rust is an ahead-of-time compiled language, meaning you can compile a program and give the executable to someone else, and they can run it even without having Rust installed. If you give someone a .rb, .py, or .js file, they need to have a Ruby, Python, or JavaScript implementation installed (respectively). But in those languages, you only need one command to compile and run your program. Everything is a trade-off in language design.  Just compiling with rustc is fine for simple programs, but as your project grows, you‚Äôll want to manage all the options and make it easy to share your code. Next, we‚Äôll introduce you to the Cargo tool, which will help you write real-world Rust programs.  Hello, Cargo! Cargo is Rust‚Äôs build system and package manager. Most Rustaceans use this tool to manage their Rust projects because Cargo handles a lot of tasks for you, such as building your code, downloading the libraries your code depends on, and building those libraries. (We call the libraries that your code needs dependencies.)  The simplest Rust programs, like the one we‚Äôve written so far, don‚Äôt have any dependencies. If we had built the ‚ÄúHello, world!‚Äù project with Cargo, it would only use the part of Cargo that handles building your code. As you write more complex Rust programs, you‚Äôll add dependencies, and if you start a project using Cargo, adding dependencies will be much easier to do.  Because the vast majority of Rust projects use Cargo, the rest of this book assumes that you‚Äôre using Cargo too. Cargo comes installed with Rust if you used the official installers discussed in the ‚ÄúInstallation‚Äù section. If you installed Rust through some other means, check whether Cargo is installed by entering the following in your terminal:  If you see a version number, you have it! If you see an error, such as command not found, look at the documentation for your method of installation to determine how to install Cargo separately.  Creating a Project with Cargo Let‚Äôs create a new project using Cargo and look at how it differs from our original ‚ÄúHello, world!‚Äù project. Navigate back to your projects directory (or wherever you decided to store your code). Then, on any operating system, run the following:  The first command creates a new directory and project called hello_cargo. We‚Äôve named our project hello_cargo, and Cargo creates its files in a directory of the same name.  Go into the hello_cargo directory and list the files. You‚Äôll see that Cargo has generated two files and one directory for us: a Cargo.toml file and a src directory with a main.rs file inside.  It has also initialized a new Git repository along with a .gitignore file. Git files won‚Äôt be generated if you run cargo new within an existing Git repository; you can override this behavior by using cargo new --vcs=git.  Note: Git is a common version control system. You can change cargo new to use a different version control system or no version control system by using the --vcs flag. Run cargo new --help to see the available options.  Open Cargo.toml in your text editor of choice. It should look similar to the code in Listing -.  Filename: Cargo.toml  Listing -: Contents of Cargo.toml generated by cargo new  This file is in the TOML (Tom‚Äôs Obvious, Minimal Language) format, which is Cargo‚Äôs configuration format.  The first line, [package], is a section heading that indicates that the following statements are configuring a package. As we add more information to this file, we‚Äôll add other sections.  The next three lines set the configuration information Cargo needs to compile your program: the name, the version, and the edition of Rust to use. We‚Äôll talk about the edition key in Appendix E.  The last line, [dependencies], is the start of a section for you to list any of your project‚Äôs dependencies. In Rust, packages of code are referred to as crates. We won‚Äôt need any other crates for this project, but we will in the first project in Chapter , so we‚Äôll use this dependencies section then.  Now open src/main.rs and take a look:  Filename: src/main.rs  Cargo has generated a ‚ÄúHello, world!‚Äù program for you, just like the one we wrote in Listing -! So far, the differences between our project and the project Cargo generated are that Cargo placed the code in the src directory and we have a Cargo.toml configuration file in the top directory.  Cargo expects your source files to live inside the src directory. The top-level project directory is just for README files, license information, configuration files, and anything else not related to your code. Using Cargo helps you organize your projects. There‚Äôs a place for everything, and everything is in its place.  If you started a project that doesn‚Äôt use Cargo, as we did with the ‚ÄúHello, world!‚Äù project, you can convert it to a project that does use Cargo. Move the project code into the src directory and create an appropriate Cargo.toml file.  Building and Running a Cargo Project Now let‚Äôs look at what‚Äôs different when we build and run the ‚ÄúHello, world!‚Äù program with Cargo! From your hello_cargo directory, build your project by entering the following command:  This command creates an executable file in target/debug/hello_cargo (or target\debug\hello_cargo.exe on Windows) rather than in your current directory. Because the default build is a debug build, Cargo puts the binary in a directory named debug. You can run the executable with this command:  If all goes well, Hello, world! should print to the terminal. Running cargo build for the first time also causes Cargo to create a new file at the top level: Cargo.lock. This file keeps track of the exact versions of dependencies in your project. This project doesn‚Äôt have dependencies, so the file is a bit sparse. You won‚Äôt ever need to change this file manually; Cargo manages its contents for you.  We just built a project with cargo build and ran it with ./target/debug/hello_cargo, but we can also use cargo run to compile the code and then run the resultant executable all in one command:  Using cargo run is more convenient than having to remember to run cargo build and then use the whole path to the binary, so most developers use cargo run.  Notice that this time we didn‚Äôt see output indicating that Cargo was compiling hello_cargo. Cargo figured out that the files hadn‚Äôt changed, so it didn‚Äôt rebuild but just ran the binary. If you had modified your source code, Cargo would have rebuilt the project before running it, and you would have seen this output:  Cargo also provides a command called cargo check. This command quickly checks your code to make sure it compiles but doesn‚Äôt produce an executable:  Why would you not want an executable? Often, cargo check is much faster than cargo build because it skips the step of producing an executable. If you‚Äôre continually checking your work while writing the code, using cargo check will speed up the process of letting you know if your project is still compiling! As such, many Rustaceans run cargo check periodically as they write their program to make sure it compiles. Then they run cargo build when they‚Äôre ready to use the executable.  Let‚Äôs recap what we‚Äôve learned so far about Cargo:  We can create a project using cargo new. We can build a project using cargo build. We can build and run a project in one step using cargo run. We can build a project without producing a binary to check for errors using cargo check. Instead of saving the result of the build in the same directory as our code, Cargo stores it in the target/debug directory. An additional advantage of using Cargo is that the commands are the same no matter which operating system you‚Äôre working on. So, at this point, we‚Äôll no longer provide specific instructions for Linux and macOS versus Windows.  Building for Release When your project is finally ready for release, you can use cargo build --release to compile it with optimizations. This command will create an executable in target/release instead of target/debug. The optimizations make your Rust code run faster, but turning them on lengthens the time it takes for your program to compile. This is why there are two different profiles: one for development, when you want to rebuild quickly and often, and another for building the final program you‚Äôll give to a user that won‚Äôt be rebuilt repeatedly and that will run as fast as possible. If you‚Äôre benchmarking your code‚Äôs running time, be sure to run cargo build --release and benchmark with the executable in target/release.  Cargo as Convention With simple projects, Cargo doesn‚Äôt provide a lot of value over just using rustc, but it will prove its worth as your programs become more intricate. Once programs grow to multiple files or need a dependency, it‚Äôs much easier to let Cargo coordinate the build.  Even though the hello_cargo project is simple, it now uses much of the real tooling you‚Äôll use in the rest of your Rust career. In fact, to work on any existing projects, you can use the following commands to check out the code using Git, change to that project‚Äôs directory, and build:  For more information about Cargo, check out its documentation.  Summary You‚Äôre already off to a great start on your Rust journey! In this chapter, you‚Äôve learned how to:  Install the latest stable version of Rust using rustup Update to a newer Rust version Open locally installed documentation Write and run a ‚ÄúHello, world!‚Äù program using rustc directly Create and run a new project using the conventions of Cargo This is a great time to build a more substantial program to get used to reading and writing Rust code. So, in Chapter , we‚Äôll build a guessing game program. If you would rather start by learning how common programming concepts work in Rust, see Chapter  and then return to Chapter .  Programming a Guessing Game Let‚Äôs jump into Rust by working through a hands-on project together! This chapter introduces you to a few common Rust concepts by showing you how to use them in a real program. You‚Äôll learn about let, match, methods, associated functions, external crates, and more! In the following chapters, we‚Äôll explore these ideas in more detail. In this chapter, you‚Äôll just practice the fundamentals.  We‚Äôll implement a classic beginner programming problem: a guessing game. Here‚Äôs how it works: the program will generate a random integer between  and . It will then prompt the player to enter a guess. After a guess is entered, the program will indicate whether the guess is too low or too high. If the guess is correct, the game will print a congratulatory message and exit.  Setting Up a New Project To set up a new project, go to the projects directory that you created in Chapter  and make a new project using Cargo, like so:  The first command, cargo new, takes the name of the project (guessing_game) as the first argument. The second command changes to the new project‚Äôs directory.  Look at the generated Cargo.toml file:  Filename: Cargo.toml  As you saw in Chapter , cargo new generates a ‚ÄúHello, world!‚Äù program for you. Check out the src/main.rs file:  Filename: src/main.rs  Now let‚Äôs compile this ‚ÄúHello, world!‚Äù program and run it in the same step using the cargo run command:  The run command comes in handy when you need to rapidly iterate on a project, as we‚Äôll do in this game, quickly testing each iteration before moving on to the next one.  Reopen the src/main.rs file. You‚Äôll be writing all the code in this file.  Processing a Guess The first part of the guessing game program will ask for user input, process that input, and check that the input is in the expected form. To start, we‚Äôll allow the player to input a guess. Enter the code in Listing - into src/main.rs.  Filename: src/main.rs  Listing -: Code that gets a guess from the user and prints it  This code contains a lot of information, so let‚Äôs go over it line by line. To obtain user input and then print the result as output, we need to bring the io input/output library into scope. The io library comes from the standard library, known as std:  By default, Rust has a set of items defined in the standard library that it brings into the scope of every program. This set is called the prelude, and you can see everything in it in the standard library documentation.  If a type you want to use isn‚Äôt in the prelude, you have to bring that type into scope explicitly with a use statement. Using the std::io library provides you with a number of useful features, including the ability to accept user input.  As you saw in Chapter , the main function is the entry point into the program:  The fn syntax declares a new function; the parentheses, (), indicate there are no parameters; and the curly bracket, {, starts the body of the function.  As you also learned in Chapter , println! is a macro that prints a string to the screen:  This code is printing a prompt stating what the game is and requesting input from the user.  Storing Values with Variables Next, we‚Äôll create a variable to store the user input, like this:  Now the program is getting interesting! There‚Äôs a lot going on in this little line. We use the let statement to create the variable. Here‚Äôs another example:  This line creates a new variable named apples and binds it to the value . In Rust, variables are immutable by default, meaning once we give the variable a value, the value won‚Äôt change. We‚Äôll be discussing this concept in detail in the ‚ÄúVariables and Mutability‚Äù section in Chapter . To make a variable mutable, we add mut before the variable name:  Note: The // syntax starts a comment that continues until the end of the line. Rust ignores everything in comments. We‚Äôll discuss comments in more detail in Chapter .  Returning to the guessing game program, you now know that let mut guess will introduce a mutable variable named guess. The equal sign (=) tells Rust we want to bind something to the variable now. On the right of the equal sign is the value that guess is bound to, which is the result of calling String::new, a function that returns a new instance of a String. String is a string type provided by the standard library that is a growable, UTF- encoded bit of text.  The :: syntax in the ::new line indicates that new is an associated function of the String type. An associated function is a function that‚Äôs implemented on a type, in this case String. This new function creates a new, empty string. You‚Äôll find a new function on many types because it‚Äôs a common name for a function that makes a new value of some kind.  In full, the let mut guess = String::new(); line has created a mutable variable that is currently bound to a new, empty instance of a String. Whew!  Receiving User Input Recall that we included the input/output functionality from the standard library with use std::io; on the first line of the program. Now we‚Äôll call the stdin function from the io module, which will allow us to handle user input:  If we hadn‚Äôt imported the io library with use std::io; at the beginning of the program, we could still use the function by writing this function call as std::io::stdin. The stdin function returns an instance of std::io::Stdin, which is a type that represents a handle to the standard input for your terminal.  Next, the line .read_line(&mut guess) calls the read_line method on the standard input handle to get input from the user. We‚Äôre also passing &mut guess as the argument to read_line to tell it what string to store the user input in. The full job of read_line is to take whatever the user types into standard input and append that into a string (without overwriting its contents), so we therefore pass that string as an argument. The string argument needs to be mutable so the method can change the string‚Äôs content.  The & indicates that this argument is a reference, which gives you a way to let multiple parts of your code access one piece of data without needing to copy that data into memory multiple times. References are a complex feature, and one of Rust‚Äôs major advantages is how safe and easy it is to use references. You don‚Äôt need to know a lot of those details to finish this program. For now, all you need to know is that, like variables, references are immutable by default. Hence, you need to write &mut guess rather than &guess to make it mutable. (Chapter  will explain references more thoroughly.)   Handling Potential Failure with Result We‚Äôre still working on this line of code. We‚Äôre now discussing a third line of text, but note that it‚Äôs still part of a single logical line of code. The next part is this method:  We could have written this code as:  However, one long line is difficult to read, so it‚Äôs best to divide it. It‚Äôs often wise to introduce a newline and other whitespace to help break up long lines when you call a method with the .method_name() syntax. Now let‚Äôs discuss what this line does.  As mentioned earlier, read_line puts whatever the user enters into the string we pass to it, but it also returns a Result value. Result is an enumeration, often called an enum, which is a type that can be in one of multiple possible states. We call each possible state a variant.  Chapter  will cover enums in more detail. The purpose of these Result types is to encode error-handling information.  Result‚Äôs variants are Ok and Err. The Ok variant indicates the operation was successful, and inside Ok is the successfully generated value. The Err variant means the operation failed, and Err contains information about how or why the operation failed.  Values of the Result type, like values of any type, have methods defined on them. An instance of Result has an expect method that you can call. If this instance of Result is an Err value, expect will cause the program to crash and display the message that you passed as an argument to expect. If the read_line method returns an Err, it would likely be the result of an error coming from the underlying operating system. If this instance of Result is an Ok value, expect will take the return value that Ok is holding and return just that value to you so you can use it. In this case, that value is the number of bytes in the user‚Äôs input.  If you don‚Äôt call expect, the program will compile, but you‚Äôll get a warning:  Rust warns that you haven‚Äôt used the Result value returned from read_line, indicating that the program hasn‚Äôt handled a possible error.  The right way to suppress the warning is to actually write error-handling code, but in our case we just want to crash this program when a problem occurs, so we can use expect. You‚Äôll learn about recovering from errors in Chapter .  Printing Values with println! Placeholders Aside from the closing curly bracket, there‚Äôs only one more line to discuss in the code so far:  This line prints the string that now contains the user‚Äôs input. The {} set of curly brackets is a placeholder: think of {} as little crab pincers that hold a value in place. When printing the value of a variable, the variable name can go inside the curly brackets. When printing the result of evaluating an expression, place empty curly brackets in the format string, then follow the format string with a comma-separated list of expressions to print in each empty curly bracket placeholder in the same order. Printing a variable and the result of an expression in one call to println! would look like this:  This code would print x =  and y +  = .  Testing the First Part Let‚Äôs test the first part of the guessing game. Run it using cargo run:  At this point, the first part of the game is done: we‚Äôre getting input from the keyboard and then printing it.  Generating a Secret Number Next, we need to generate a secret number that the user will try to guess. The secret number should be different every time so the game is fun to play more than once. We‚Äôll use a random number between  and  so the game isn‚Äôt too difficult. Rust doesn‚Äôt yet include random number functionality in its standard library. However, the Rust team does provide a rand crate with said functionality.  Using a Crate to Get More Functionality Remember that a crate is a collection of Rust source code files. The project we‚Äôve been building is a binary crate, which is an executable. The rand crate is a library crate, which contains code that is intended to be used in other programs and can‚Äôt be executed on its own.  Cargo‚Äôs coordination of external crates is where Cargo really shines. Before we can write code that uses rand, we need to modify the Cargo.toml file to include the rand crate as a dependency. Open that file now and add the following line to the bottom, beneath the [dependencies] section header that Cargo created for you. Be sure to specify rand exactly as we have here, with this version number, or the code examples in this tutorial may not work:  Filename: Cargo.toml  In the Cargo.toml file, everything that follows a header is part of that section that continues until another section starts. In [dependencies] you tell Cargo which external crates your project depends on and which versions of those crates you require. In this case, we specify the rand crate with the semantic version specifier ... Cargo understands Semantic Versioning (sometimes called SemVer), which is a standard for writing version numbers. The specifier .. is actually shorthand for ^.., which means any version that is at least .. but below ...  Cargo considers these versions to have public APIs compatible with version .., and this specification ensures you‚Äôll get the latest patch release that will still compile with the code in this chapter. Any version .. or greater is not guaranteed to have the same API as what the following examples use.  Now, without changing any of the code, let‚Äôs build the project, as shown in Listing -.  Listing -: The output from running cargo build after adding the rand crate as a dependency  You may see different version numbers (but they will all be compatible with the code, thanks to SemVer!) and different lines (depending on the operating system), and the lines may be in a different order.  When we include an external dependency, Cargo fetches the latest versions of everything that dependency needs from the registry, which is a copy of data from Crates.io. Crates.io is where people in the Rust ecosystem post their open source Rust projects for others to use.  After updating the registry, Cargo checks the [dependencies] section and downloads any crates listed that aren‚Äôt already downloaded. In this case, although we only listed rand as a dependency, Cargo also grabbed other crates that rand depends on to work. After downloading the crates, Rust compiles them and then compiles the project with the dependencies available.  If you immediately run cargo build again without making any changes, you won‚Äôt get any output aside from the Finished line. Cargo knows it has already downloaded and compiled the dependencies, and you haven‚Äôt changed anything about them in your Cargo.toml file. Cargo also knows that you haven‚Äôt changed anything about your code, so it doesn‚Äôt recompile that either. With nothing to do, it simply exits.  If you open the src/main.rs file, make a trivial change, and then save it and build again, you‚Äôll only see two lines of output:  These lines show that Cargo only updates the build with your tiny change to the src/main.rs file. Your dependencies haven‚Äôt changed, so Cargo knows it can reuse what it has already downloaded and compiled for those.  Ensuring Reproducible Builds with the Cargo.lock File Cargo has a mechanism that ensures you can rebuild the same artifact every time you or anyone else builds your code: Cargo will use only the versions of the dependencies you specified until you indicate otherwise. For example, say that next week version .. of the rand crate comes out, and that version contains an important bug fix, but it also contains a regression that will break your code. To handle this, Rust creates the Cargo.lock file the first time you run cargo build, so we now have this in the guessing_game directory.  When you build a project for the first time, Cargo figures out all the versions of the dependencies that fit the criteria and then writes them to the Cargo.lock file. When you build your project in the future, Cargo will see that the Cargo.lock file exists and will use the versions specified there rather than doing all the work of figuring out versions again. This lets you have a reproducible build automatically. In other words, your project will remain at .. until you explicitly upgrade, thanks to the Cargo.lock file. Because the Cargo.lock file is important for reproducible builds, it‚Äôs often checked into source control with the rest of the code in your project.  Updating a Crate to Get a New Version When you do want to update a crate, Cargo provides the command update, which will ignore the Cargo.lock file and figure out all the latest versions that fit your specifications in Cargo.toml. Cargo will then write those versions to the Cargo.lock file. In this case, Cargo will only look for versions greater than .. and less than ... If the rand crate has released the two new versions .. and .., you would see the following if you ran cargo update:  Cargo ignores the .. release. At this point, you would also notice a change in your Cargo.lock file noting that the version of the rand crate you are now using is ... To use rand version .. or any version in the ..x series, you‚Äôd have to update the Cargo.toml file to look like this instead:  The next time you run cargo build, Cargo will update the registry of crates available and reevaluate your rand requirements according to the new version you have specified.  There‚Äôs a lot more to say about Cargo and its ecosystem, which we‚Äôll discuss in Chapter , but for now, that‚Äôs all you need to know. Cargo makes it very easy to reuse libraries, so Rustaceans are able to write smaller projects that are assembled from a number of packages.  Generating a Random Number Let‚Äôs start using rand to generate a number to guess. The next step is to update src/main.rs, as shown in Listing -.  Filename: src/main.rs  Listing -: Adding code to generate a random number  First we add the line use rand::Rng;. The Rng trait defines methods that random number generators implement, and this trait must be in scope for us to use those methods. Chapter  will cover traits in detail.  Next, we‚Äôre adding two lines in the middle. In the first line, we call the rand::thread_rng function that gives us the particular random number generator we‚Äôre going to use: one that is local to the current thread of execution and is seeded by the operating system. Then we call the gen_range method on the random number generator. This method is defined by the Rng trait that we brought into scope with the use rand::Rng; statement. The gen_range method takes a range expression as an argument and generates a random number in the range. The kind of range expression we‚Äôre using here takes the form start..=end and is inclusive on the lower and upper bounds, so we need to specify ..= to request a number between  and .  Note: You won‚Äôt just know which traits to use and which methods and functions to call from a crate, so each crate has documentation with instructions for using it. Another neat feature of Cargo is that running the cargo doc --open command will build documentation provided by all your dependencies locally and open it in your browser. If you‚Äôre interested in other functionality in the rand crate, for example, run cargo doc --open and click rand in the sidebar on the left.  The second new line prints the secret number. This is useful while we‚Äôre developing the program to be able to test it, but we‚Äôll delete it from the final version. It‚Äôs not much of a game if the program prints the answer as soon as it starts!  Try running the program a few times:  You should get different random numbers, and they should all be numbers between  and . Great job!  Comparing the Guess to the Secret Number Now that we have user input and a random number, we can compare them. That step is shown in Listing -. Note that this code won‚Äôt compile just yet, as we will explain.  Filename: src/main.rs  Listing -: Handling the possible return values of comparing two numbers  First we add another use statement, bringing a type called std::cmp::Ordering into scope from the standard library. The Ordering type is another enum and has the variants Less, Greater, and Equal. These are the three outcomes that are possible when you compare two values.  Then we add five new lines at the bottom that use the Ordering type. The cmp method compares two values and can be called on anything that can be compared. It takes a reference to whatever you want to compare with: here it‚Äôs comparing guess to secret_number. Then it returns a variant of the Ordering enum we brought into scope with the use statement. We use a match expression to decide what to do next based on which variant of Ordering was returned from the call to cmp with the values in guess and secret_number.  A match expression is made up of arms. An arm consists of a pattern to match against, and the code that should be run if the value given to match fits that arm‚Äôs pattern. Rust takes the value given to match and looks through each arm‚Äôs pattern in turn. Patterns and the match construct are powerful Rust features: they let you express a variety of situations your code might encounter and they make sure you handle them all. These features will be covered in detail in Chapter  and Chapter , respectively.  Let‚Äôs walk through an example with the match expression we use here. Say that the user has guessed  and the randomly generated secret number this time is .  When the code compares  to , the cmp method will return Ordering::Greater because  is greater than . The match expression gets the Ordering::Greater value and starts checking each arm‚Äôs pattern. It looks at the first arm‚Äôs pattern, Ordering::Less, and sees that the value Ordering::Greater does not match Ordering::Less, so it ignores the code in that arm and moves to the next arm. The next arm‚Äôs pattern is Ordering::Greater, which does match Ordering::Greater! The associated code in that arm will execute and print Too big! to the screen. The match expression ends after the first successful match, so it won‚Äôt look at the last arm in this scenario.  However, the code in Listing - won‚Äôt compile yet. Let‚Äôs try it:  The core of the error states that there are mismatched types. Rust has a strong, static type system. However, it also has type inference. When we wrote let mut guess = String::new(), Rust was able to infer that guess should be a String and didn‚Äôt make us write the type. The secret_number, on the other hand, is a number type. A few of Rust‚Äôs number types can have a value between  and : i, a -bit number; u, an unsigned -bit number; i, a -bit number; as well as others. Unless otherwise specified, Rust defaults to an i, which is the type of secret_number unless you add type information elsewhere that would cause Rust to infer a different numerical type. The reason for the error is that Rust cannot compare a string and a number type.  Ultimately, we want to convert the String the program reads as input into a number type so we can compare it numerically to the secret number. We do so by adding this line to the main function body:  Filename: src/main.rs  The line is:  We create a variable named guess. But wait, doesn‚Äôt the program already have a variable named guess? It does, but helpfully Rust allows us to shadow the previous value of guess with a new one. Shadowing lets us reuse the guess variable name rather than forcing us to create two unique variables, such as guess_str and guess, for example. We‚Äôll cover this in more detail in Chapter , but for now, know that this feature is often used when you want to convert a value from one type to another type.  We bind this new variable to the expression guess.trim().parse(). The guess in the expression refers to the original guess variable that contained the input as a string. The trim method on a String instance will eliminate any whitespace at the beginning and end, which we must do to be able to compare the string to the u, which can only contain numerical data. The user must press enter to satisfy read_line and input their guess, which adds a newline character to the string. For example, if the user types  and presses enter, guess looks like this: \n. The \n represents ‚Äúnewline.‚Äù (On Windows, pressing enter results in a carriage return and a newline, \r\n.) The trim method eliminates \n or \r\n, resulting in just .  The parse method on strings converts a string to another type. Here, we use it to convert from a string to a number. We need to tell Rust the exact number type we want by using let guess: u. The colon (:) after guess tells Rust we‚Äôll annotate the variable‚Äôs type. Rust has a few built-in number types; the u seen here is an unsigned, -bit integer. It‚Äôs a good default choice for a small positive number. You‚Äôll learn about other number types in Chapter .  Additionally, the u annotation in this example program and the comparison with secret_number means Rust will infer that secret_number should be a u as well. So now the comparison will be between two values of the same type!  The parse method will only work on characters that can logically be converted into numbers and so can easily cause errors. If, for example, the string contained Aüëç%, there would be no way to convert that to a number. Because it might fail, the parse method returns a Result type, much as the read_line method does (discussed earlier in ‚ÄúHandling Potential Failure with Result‚Äù). We‚Äôll treat this Result the same way by using the expect method again. If parse returns an Err Result variant because it couldn‚Äôt create a number from the string, the expect call will crash the game and print the message we give it. If parse can successfully convert the string to a number, it will return the Ok variant of Result, and expect will return the number that we want from the Ok value.  Let‚Äôs run the program now:  Nice! Even though spaces were added before the guess, the program still figured out that the user guessed . Run the program a few times to verify the different behavior with different kinds of input: guess the number correctly, guess a number that is too high, and guess a number that is too low.  We have most of the game working now, but the user can make only one guess. Let‚Äôs change that by adding a loop!  Allowing Multiple Guesses with Looping The loop keyword creates an infinite loop. We‚Äôll add a loop to give users more chances at guessing the number:  Filename: src/main.rs  As you can see, we‚Äôve moved everything from the guess input prompt onward into a loop. Be sure to indent the lines inside the loop another four spaces each and run the program again. The program will now ask for another guess forever, which actually introduces a new problem. It doesn‚Äôt seem like the user can quit!  The user could always interrupt the program by using the keyboard shortcut ctrl-c. But there‚Äôs another way to escape this insatiable monster, as mentioned in the parse discussion in ‚ÄúComparing the Guess to the Secret Number‚Äù: if the user enters a non-number answer, the program will crash. We can take advantage of that to allow the user to quit, as shown here:  Typing quit will quit the game, but as you‚Äôll notice, so will entering any other non-number input. This is suboptimal, to say the least; we want the game to also stop when the correct number is guessed.  Quitting After a Correct Guess Let‚Äôs program the game to quit when the user wins by adding a break statement:  Filename: src/main.rs  Adding the break line after You win! makes the program exit the loop when the user guesses the secret number correctly. Exiting the loop also means exiting the program, because the loop is the last part of main.  Handling Invalid Input To further refine the game‚Äôs behavior, rather than crashing the program when the user inputs a non-number, let‚Äôs make the game ignore a non-number so the user can continue guessing. We can do that by altering the line where guess is converted from a String to a u, as shown in Listing -.  Filename: src/main.rs  Listing -: Ignoring a non-number guess and asking for another guess instead of crashing the program  We switch from an expect call to a match expression to move from crashing on an error to handling the error. Remember that parse returns a Result type and Result is an enum that has the variants Ok and Err. We‚Äôre using a match expression here, as we did with the Ordering result of the cmp method.  If parse is able to successfully turn the string into a number, it will return an Ok value that contains the resultant number. That Ok value will match the first arm‚Äôs pattern, and the match expression will just return the num value that parse produced and put inside the Ok value. That number will end up right where we want it in the new guess variable we‚Äôre creating.  If parse is not able to turn the string into a number, it will return an Err value that contains more information about the error. The Err value does not match the Ok(num) pattern in the first match arm, but it does match the Err(_) pattern in the second arm. The underscore, _, is a catchall value; in this example, we‚Äôre saying we want to match all Err values, no matter what information they have inside them. So the program will execute the second arm‚Äôs code, continue, which tells the program to go to the next iteration of the loop and ask for another guess. So, effectively, the program ignores all errors that parse might encounter!  Now everything in the program should work as expected. Let‚Äôs try it:  Awesome! With one tiny final tweak, we will finish the guessing game. Recall that the program is still printing the secret number. That worked well for testing, but it ruins the game. Let‚Äôs delete the println! that outputs the secret number. Listing - shows the final code.  Filename: src/main.rs  Listing -: Complete guessing game code  At this point, you‚Äôve successfully built the guessing game. Congratulations!  Summary This project was a hands-on way to introduce you to many new Rust concepts: let, match, functions, the use of external crates, and more. In the next few chapters, you‚Äôll learn about these concepts in more detail. Chapter  covers concepts that most programming languages have, such as variables, data types, and functions, and shows how to use them in Rust. Chapter  explores ownership, a feature that makes Rust different from other languages. Chapter  discusses structs and method syntax, and Chapter  explains how enums work.  Common Programming Concepts This chapter covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we‚Äôll discuss them in the context of Rust and explain the conventions around using these concepts.  Specifically, you‚Äôll learn about variables, basic types, functions, comments, and control flow. These foundations will be in every Rust program, and learning them early will give you a strong core to start from.  Keywords The Rust language has a set of keywords that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you‚Äôll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in Appendix A.  Variables and Mutability As mentioned in the ‚ÄúStoring Values with Variables‚Äù section, by default, variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable. Let‚Äôs explore how and why Rust encourages you to favor immutability and why sometimes you might want to opt out.  When a variable is immutable, once a value is bound to a name, you can‚Äôt change that value. To illustrate this, generate a new project called variables in your projects directory by using cargo new variables.  Then, in your new variables directory, open src/main.rs and replace its code with the following code, which won‚Äôt compile just yet:  Filename: src/main.rs  Save and run the program using cargo run. You should receive an error message regarding an immutability error, as shown in this output:  This example shows how the compiler helps you find errors in your programs. Compiler errors can be frustrating, but really they only mean your program isn‚Äôt safely doing what you want it to do yet; they do not mean that you‚Äôre not a good programmer! Experienced Rustaceans still get compiler errors.  You received the error message cannot assign twice to immutable variable `x` because you tried to assign a second value to the immutable x variable.  It‚Äôs important that we get compile-time errors when we attempt to change a value that‚Äôs designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it‚Äôs possible that the first part of the code won‚Äôt do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only sometimes. The Rust compiler guarantees that when you state that a value won‚Äôt change, it really won‚Äôt change, so you don‚Äôt have to keep track of it yourself. Your code is thus easier to reason through.  But mutability can be very useful, and can make code more convenient to write. Although variables are immutable by default, you can make them mutable by adding mut in front of the variable name as you did in Chapter . Adding mut also conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable‚Äôs value.  For example, let‚Äôs change src/main.rs to the following:  Filename: src/main.rs  When we run the program now, we get this:  We‚Äôre allowed to change the value bound to x from  to  when mut is used. Ultimately, deciding whether to use mutability or not is up to you and depends on what you think is clearest in that particular situation.  Constants Like immutable variables, constants are values that are bound to a name and are not allowed to change, but there are a few differences between constants and variables.  First, you aren‚Äôt allowed to use mut with constants. Constants aren‚Äôt just immutable by default‚Äîthey‚Äôre always immutable. You declare constants using the const keyword instead of the let keyword, and the type of the value must be annotated. We‚Äôll cover types and type annotations in the next section, ‚ÄúData Types‚Äù, so don‚Äôt worry about the details right now. Just know that you must always annotate the type.  Constants can be declared in any scope, including the global scope, which makes them useful for values that many parts of code need to know about.  The last difference is that constants may be set only to a constant expression, not the result of a value that could only be computed at runtime.  Here‚Äôs an example of a constant declaration:  The constant‚Äôs name is THREE_HOURS_IN_SECONDS and its value is set to the result of multiplying  (the number of seconds in a minute) by  (the number of minutes in an hour) by  (the number of hours we want to count in this program). Rust‚Äôs naming convention for constants is to use all uppercase with underscores between words. The compiler is able to evaluate a limited set of operations at compile time, which lets us choose to write out this value in a way that‚Äôs easier to understand and verify, rather than setting this constant to the value ,. See the Rust Reference‚Äôs section on constant evaluation for more information on what operations can be used when declaring constants.  Constants are valid for the entire time a program runs, within the scope in which they were declared. This property makes constants useful for values in your application domain that multiple parts of the program might need to know about, such as the maximum number of points any player of a game is allowed to earn, or the speed of light.  Naming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code you would need to change if the hardcoded value needed to be updated in the future.  Shadowing As you saw in the guessing game tutorial in Chapter , you can declare a new variable with the same name as a previous variable. Rustaceans say that the first variable is shadowed by the second, which means that the second variable is what the compiler will see when you use the name of the variable. In effect, the second variable overshadows the first, taking any uses of the variable name to itself until either it itself is shadowed or the scope ends. We can shadow a variable by using the same variable‚Äôs name and repeating the use of the let keyword as follows:  Filename: src/main.rs  This program first binds x to a value of . Then it creates a new variable x by repeating let x =, taking the original value and adding  so the value of x is then . Then, within an inner scope created with the curly brackets, the third let statement also shadows x and creates a new variable, multiplying the previous value by  to give x a value of . When that scope is over, the inner shadowing ends and x returns to being . When we run this program, it will output the following:  Shadowing is different from marking a variable as mut because we‚Äôll get a compile-time error if we accidentally try to reassign to this variable without using the let keyword. By using let, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.  The other difference between mut and shadowing is that because we‚Äôre effectively creating a new variable when we use the let keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, and then we want to store that input as a number:  The first spaces variable is a string type and the second spaces variable is a number type. Shadowing thus spares us from having to come up with different names, such as spaces_str and spaces_num; instead, we can reuse the simpler spaces name. However, if we try to use mut for this, as shown here, we‚Äôll get a compile-time error:  The error says we‚Äôre not allowed to mutate a variable‚Äôs type:  Now that we‚Äôve explored how variables work, let‚Äôs look at more data types they can have.  Data Types Every value in Rust is of a certain data type, which tells Rust what kind of data is being specified so it knows how to work with that data. We‚Äôll look at two data type subsets: scalar and compound.  Keep in mind that Rust is a statically typed language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a String to a numeric type using parse in the ‚ÄúComparing the Guess to the Secret Number‚Äù section in Chapter , we must add a type annotation, like this:  If we don‚Äôt add the : u type annotation shown in the preceding code, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:  You‚Äôll see different type annotations for other data types.  Scalar Types A scalar type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let‚Äôs jump into how they work in Rust.  Integer Types An integer is a number without a fractional component. We used one integer type in Chapter , the u type. This type declaration indicates that the value it‚Äôs associated with should be an unsigned integer (signed integer types start with i instead of u) that takes up  bits of space. Table - shows the built-in integer types in Rust. We can use any of these variants to declare the type of an integer value.  Table -: Integer Types in Rust  Length	Signed	Unsigned -bit	i	u -bit	i	u -bit	i	u -bit	i	u -bit	i	u arch	isize	usize Each variant can be either signed or unsigned and has an explicit size. Signed and unsigned refer to whether it‚Äôs possible for the number to be negative‚Äîin other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It‚Äôs like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign. Signed numbers are stored using two‚Äôs complement representation.  Each signed variant can store numbers from -(n - ) to n -  -  inclusive, where n is the number of bits that variant uses. So an i can store numbers from -() to  - , which equals - to . Unsigned variants can store numbers from  to n - , so a u can store numbers from  to  - , which equals  to .  Additionally, the isize and usize types depend on the architecture of the computer your program is running on, which is denoted in the table as ‚Äúarch‚Äù:  bits if you‚Äôre on a -bit architecture and  bits if you‚Äôre on a -bit architecture.  You can write integer literals in any of the forms shown in Table -. Note that number literals that can be multiple numeric types allow a type suffix, such as u, to designate the type. Number literals can also use _ as a visual separator to make the number easier to read, such as _, which will have the same value as if you had specified .  Table -: Integer Literals in Rust  Number literals	Example Decimal	_ Hex	xff Octal	o Binary	b_ Byte (u only)	b'A' So how do you know which type of integer to use? If you‚Äôre unsure, Rust‚Äôs defaults are generally good places to start: integer types default to i. The primary situation in which you‚Äôd use isize or usize is when indexing some sort of collection.  Integer Overflow Let‚Äôs say you have a variable of type u that can hold values between  and . If you try to change the variable to a value outside that range, such as , integer overflow will occur, which can result in one of two behaviors. When you‚Äôre compiling in debug mode, Rust includes checks for integer overflow that cause your program to panic at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we‚Äôll discuss panics in more depth in the ‚ÄúUnrecoverable Errors with panic!‚Äù section in Chapter .  When you‚Äôre compiling in release mode with the --release flag, Rust does not include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs two‚Äôs complement wrapping. In short, values greater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimum of the values the type can hold. In the case of a u, the value  becomes , the value  becomes , and so on. The program won‚Äôt panic, but the variable will have a value that probably isn‚Äôt what you were expecting it to have. Relying on integer overflow‚Äôs wrapping behavior is considered an error.  To explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:  Wrap in all modes with the wrapping_* methods, such as wrapping_add. Return the None value if there is overflow with the checked_* methods. Return the value and a boolean indicating whether there was overflow with the overflowing_* methods. Saturate at the value‚Äôs minimum or maximum values with the saturating_* methods. Floating-Point Types Rust also has two primitive types for floating-point numbers, which are numbers with decimal points. Rust‚Äôs floating-point types are f and f, which are  bits and  bits in size, respectively. The default type is f because on modern CPUs, it‚Äôs roughly the same speed as f but is capable of more precision. All floating-point types are signed.  Here‚Äôs an example that shows floating-point numbers in action:  Filename: src/main.rs  Floating-point numbers are represented according to the IEEE- standard. The f type is a single-precision float, and f has double precision.  Numeric Operations Rust supports the basic mathematical operations you‚Äôd expect for all the number types: addition, subtraction, multiplication, division, and remainder. Integer division truncates toward zero to the nearest integer. The following code shows how you‚Äôd use each numeric operation in a let statement:  Filename: src/main.rs  Each expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. Appendix B contains a list of all operators that Rust provides.  The Boolean Type As in most other programming languages, a Boolean type in Rust has two possible values: true and false. Booleans are one byte in size. The Boolean type in Rust is specified using bool. For example:  Filename: src/main.rs  The main way to use Boolean values is through conditionals, such as an if expression. We‚Äôll cover how if expressions work in Rust in the ‚ÄúControl Flow‚Äù section.  The Character Type Rust‚Äôs char type is the language‚Äôs most primitive alphabetic type. Here are some examples of declaring char values:  Filename: src/main.rs  Note that we specify char literals with single quotes, as opposed to string literals, which use double quotes. Rust‚Äôs char type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid char values in Rust. Unicode Scalar Values range from U+ to U+DFF and U+E to U+FFFF inclusive. However, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your human intuition for what a ‚Äúcharacter‚Äù is may not match up with what a char is in Rust. We‚Äôll discuss this topic in detail in ‚ÄúStoring UTF- Encoded Text with Strings‚Äù in Chapter .  Compound Types Compound types can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.  The Tuple Type A tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.  We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don‚Äôt have to be the same. We‚Äôve added optional type annotations in this example:  Filename: src/main.rs  The variable tup binds to the entire tuple because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:  Filename: src/main.rs  This program first creates a tuple and binds it to the variable tup. It then uses a pattern with let to take tup and turn it into three separate variables, x, y, and z. This is called destructuring because it breaks the single tuple into three parts. Finally, the program prints the value of y, which is ..  We can also access a tuple element directly by using a period (.) followed by the index of the value we want to access. For example:  Filename: src/main.rs  This program creates the tuple x and then accesses each element of the tuple using their respective indices. As with most programming languages, the first index in a tuple is .  The tuple without any values has a special name, unit. This value and its corresponding type are both written () and represent an empty value or an empty return type. Expressions implicitly return the unit value if they don‚Äôt return any other value.  The Array Type Another way to have a collection of multiple values is with an array. Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length.  We write the values in an array as a comma-separated list inside square brackets:  Filename: src/main.rs  Arrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in Chapter ) or when you want to ensure you always have a fixed number of elements. An array isn‚Äôt as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you‚Äôre unsure whether to use an array or a vector, chances are you should use a vector. Chapter  discusses vectors in more detail.  However, arrays are more useful when you know the number of elements will not need to change. For example, if you were using the names of the month in a program, you would probably use an array rather than a vector because you know it will always contain  elements:  You write an array‚Äôs type using square brackets with the type of each element, a semicolon, and then the number of elements in the array, like so:  Here, i is the type of each element. After the semicolon, the number  indicates the array contains five elements.  You can also initialize an array to contain the same value for each element by specifying the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:  The array named a will contain  elements that will all be set to the value  initially. This is the same as writing let a = [, , , , ]; but in a more concise way.  Accessing Array Elements An array is a single chunk of memory of a known, fixed size that can be allocated on the stack. You can access elements of an array using indexing, like this:  Filename: src/main.rs  In this example, the variable named first will get the value  because that is the value at index [] in the array. The variable named second will get the value  from index [] in the array.  Invalid Array Element Access Let‚Äôs see what happens if you try to access an element of an array that is past the end of the array. Say you run this code, similar to the guessing game in Chapter , to get an array index from the user:  Filename: src/main.rs  This code compiles successfully. If you run this code using cargo run and enter , , , , or , the program will print out the corresponding value at that index in the array. If you instead enter a number past the end of the array, such as , you‚Äôll see output like this:  The program resulted in a runtime error at the point of using an invalid value in the indexing operation. The program exited with an error message and didn‚Äôt execute the final println! statement. When you attempt to access an element using indexing, Rust will check that the index you‚Äôve specified is less than the array length. If the index is greater than or equal to the length, Rust will panic. This check has to happen at runtime, especially in this case, because the compiler can‚Äôt possibly know what value a user will enter when they run the code later.  This is an example of Rust‚Äôs memory safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter  discusses more of Rust‚Äôs error handling and how you can write readable, safe code that neither panics nor allows invalid memory access.  Functions Functions are prevalent in Rust code. You‚Äôve already seen one of the most important functions in the language: the main function, which is the entry point of many programs. You‚Äôve also seen the fn keyword, which allows you to declare new functions.  Rust code uses snake case as the conventional style for function and variable names, in which all letters are lowercase and underscores separate words. Here‚Äôs a program that contains an example function definition:  Filename: src/main.rs  We define a function in Rust by entering fn followed by a function name and a set of parentheses. The curly brackets tell the compiler where the function body begins and ends.  We can call any function we‚Äôve defined by entering its name followed by a set of parentheses. Because another_function is defined in the program, it can be called from inside the main function. Note that we defined another_function after the main function in the source code; we could have defined it before as well. Rust doesn‚Äôt care where you define your functions, only that they‚Äôre defined somewhere in a scope that can be seen by the caller.  Let‚Äôs start a new binary project named functions to explore functions further. Place the another_function example in src/main.rs and run it. You should see the following output:  The lines execute in the order in which they appear in the main function. First the ‚ÄúHello, world!‚Äù message prints, and then another_function is called and its message is printed.  Parameters We can define functions to have parameters, which are special variables that are part of a function‚Äôs signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called arguments, but in casual conversation, people tend to use the words parameter and argument interchangeably for either the variables in a function‚Äôs definition or the concrete values passed in when you call a function.  In this version of another_function we add a parameter:  Filename: src/main.rs  Try running this program; you should get the following output:  The declaration of another_function has one parameter named x. The type of x is specified as i. When we pass  in to another_function, the println! macro puts  where the pair of curly brackets containing x was in the format string.  In function signatures, you must declare the type of each parameter. This is a deliberate decision in Rust‚Äôs design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what type you mean. The compiler is also able to give more helpful error messages if it knows what types the function expects.  When defining multiple parameters, separate the parameter declarations with commas, like this:  Filename: src/main.rs  This example creates a function named print_labeled_measurement with two parameters. The first parameter is named value and is an i. The second is named unit_label and is type char. The function then prints text containing both the value and the unit_label.  Let‚Äôs try running this code. Replace the program currently in your functions project‚Äôs src/main.rs file with the preceding example and run it using cargo run:  Because we called the function with  as the value for value and 'h' as the value for unit_label, the program output contains those values.  Statements and Expressions Function bodies are made up of a series of statements optionally ending in an expression. So far, the functions we‚Äôve covered haven‚Äôt included an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don‚Äôt have the same distinctions, so let‚Äôs look at what statements and expressions are and how their differences affect the bodies of functions.  Statements are instructions that perform some action and do not return a value. Expressions evaluate to a resultant value. Let‚Äôs look at some examples. We‚Äôve actually already used statements and expressions. Creating a variable and assigning a value to it with the let keyword is a statement. In Listing -, let y = ; is a statement.  Filename: src/main.rs  Listing -: A main function declaration containing one statement  Function definitions are also statements; the entire preceding example is a statement in itself.  Statements do not return values. Therefore, you can‚Äôt assign a let statement to another variable, as the following code tries to do; you‚Äôll get an error:  Filename: src/main.rs  When you run this program, the error you‚Äôll get looks like this:  The let y =  statement does not return a value, so there isn‚Äôt anything for x to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write x = y =  and have both x and y have the value ; that is not the case in Rust.  Expressions evaluate to a value and make up most of the rest of the code that you‚Äôll write in Rust. Consider a math operation, such as  + , which is an expression that evaluates to the value . Expressions can be part of statements: in Listing -, the  in the statement let y = ; is an expression that evaluates to the value . Calling a function is an expression. Calling a macro is an expression. A new scope block created with curly brackets is an expression, for example:  Filename: src/main.rs  This expression:  is a block that, in this case, evaluates to . That value gets bound to y as part of the let statement. Note that the x +  line doesn‚Äôt have a semicolon at the end, which is unlike most of the lines you‚Äôve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, and it will then not return a value. Keep this in mind as you explore function return values and expressions next.  Functions with Return Values Functions can return values to the code that calls them. We don‚Äôt name return values, but we must declare their type after an arrow (->). In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly. Here‚Äôs an example of a function that returns a value:  Filename: src/main.rs  There are no function calls, macros, or even let statements in the five function‚Äîjust the number  by itself. That‚Äôs a perfectly valid function in Rust. Note that the function‚Äôs return type is specified too, as -> i. Try running this code; the output should look like this:  The  in five is the function‚Äôs return value, which is why the return type is i. Let‚Äôs examine this in more detail. There are two important bits: first, the line let x = five(); shows that we‚Äôre using the return value of a function to initialize a variable. Because the function five returns a , that line is the same as the following:  Second, the five function has no parameters and defines the type of the return value, but the body of the function is a lonely  with no semicolon because it‚Äôs an expression whose value we want to return.  Let‚Äôs look at another example:  Filename: src/main.rs  Running this code will print The value of x is: . But if we place a semicolon at the end of the line containing x + , changing it from an expression to a statement, we‚Äôll get an error:  Filename: src/main.rs  Compiling this code produces an error, as follows:  The main error message, mismatched types, reveals the core issue with this code. The definition of the function plus_one says that it will return an i, but statements don‚Äôt evaluate to a value, which is expressed by (), the unit type. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.  Comments All programmers strive to make their code easy to understand, but sometimes extra explanation is warranted. In these cases, programmers leave comments in their source code that the compiler will ignore but people reading the source code may find useful.  Here‚Äôs a simple comment:  In Rust, the idiomatic comment style starts a comment with two slashes, and the comment continues until the end of the line. For comments that extend beyond a single line, you‚Äôll need to include // on each line, like this:  Comments can also be placed at the end of lines containing code:  Filename: src/main.rs  But you‚Äôll more often see them used in this format, with the comment on a separate line above the code it‚Äôs annotating:  Filename: src/main.rs  Rust also has another kind of comment, documentation comments, which we‚Äôll discuss in the ‚ÄúPublishing a Crate to Crates.io‚Äù section of Chapter .  Control Flow The ability to run some code depending on whether a condition is true and to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are if expressions and loops.  if Expressions An if expression allows you to branch your code depending on conditions. You provide a condition and then state, ‚ÄúIf this condition is met, run this block of code. If the condition is not met, do not run this block of code.‚Äù  Create a new project called branches in your projects directory to explore the if expression. In the src/main.rs file, input the following:  Filename: src/main.rs  All if expressions start with the keyword if, followed by a condition. In this case, the condition checks whether or not the variable number has a value less than . We place the block of code to execute if the condition is true immediately after the condition inside curly brackets. Blocks of code associated with the conditions in if expressions are sometimes called arms, just like the arms in match expressions that we discussed in the ‚ÄúComparing the Guess to the Secret Number‚Äù section of Chapter .  Optionally, we can also include an else expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to false. If you don‚Äôt provide an else expression and the condition is false, the program will just skip the if block and move on to the next bit of code.  Try running this code; you should see the following output:  Let‚Äôs try changing the value of number to a value that makes the condition false to see what happens:  Run the program again, and look at the output:  It‚Äôs also worth noting that the condition in this code must be a bool. If the condition isn‚Äôt a bool, we‚Äôll get an error. For example, try running the following code:  Filename: src/main.rs  The if condition evaluates to a value of  this time, and Rust throws an error:  The error indicates that Rust expected a bool but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide if with a Boolean as its condition. If we want the if code block to run only when a number is not equal to , for example, we can change the if expression to the following:  Filename: src/main.rs  Running this code will print number was something other than zero.  Handling Multiple Conditions with else if You can use multiple conditions by combining if and else in an else if expression. For example:  Filename: src/main.rs  This program has four possible paths it can take. After running it, you should see the following output:  When this program executes, it checks each if expression in turn and executes the first body for which the condition evaluates to true. Note that even though  is divisible by , we don‚Äôt see the output number is divisible by , nor do we see the number is not divisible by , , or  text from the else block. That‚Äôs because Rust only executes the block for the first true condition, and once it finds one, it doesn‚Äôt even check the rest.  Using too many else if expressions can clutter your code, so if you have more than one, you might want to refactor your code. Chapter  describes a powerful Rust branching construct called match for these cases.  Using if in a let Statement Because if is an expression, we can use it on the right side of a let statement to assign the outcome to a variable, as in Listing -.  Filename: src/main.rs  Listing -: Assigning the result of an if expression to a variable  The number variable will be bound to a value based on the outcome of the if expression. Run this code to see what happens:  Remember that blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole if expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the if must be the same type; in Listing -, the results of both the if arm and the else arm were i integers. If the types are mismatched, as in the following example, we‚Äôll get an error:  Filename: src/main.rs  When we try to compile this code, we‚Äôll get an error. The if and else arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:  The expression in the if block evaluates to an integer, and the expression in the else block evaluates to a string. This won‚Äôt work because variables must have a single type, and Rust needs to know at compile time what type the number variable is, definitively. Knowing the type of number lets the compiler verify the type is valid everywhere we use number. Rust wouldn‚Äôt be able to do that if the type of number was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.  Repetition with Loops It‚Äôs often useful to execute a block of code more than once. For this task, Rust provides several loops, which will run through the code inside the loop body to the end and then start immediately back at the beginning. To experiment with loops, let‚Äôs make a new project called loops.  Rust has three kinds of loops: loop, while, and for. Let‚Äôs try each one.  Repeating Code with loop The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.  As an example, change the src/main.rs file in your loops directory to look like this:  Filename: src/main.rs  When we run this program, we‚Äôll see again! printed over and over continuously until we stop the program manually. Most terminals support the keyboard shortcut ctrl-c to interrupt a program that is stuck in a continual loop. Give it a try:  The symbol ^C represents where you pressed ctrl-c. You may or may not see the word again! printed after the ^C, depending on where the code was in the loop when it received the interrupt signal.  Fortunately, Rust also provides a way to break out of a loop using code. You can place the break keyword within the loop to tell the program when to stop executing the loop. Recall that we did this in the guessing game in the ‚ÄúQuitting After a Correct Guess‚Äù section of Chapter  to exit the program when the user won the game by guessing the correct number.  We also used continue in the guessing game, which in a loop tells the program to skip over any remaining code in this iteration of the loop and go to the next iteration.  Returning Values from Loops One of the uses of a loop is to retry an operation you know might fail, such as checking whether a thread has completed its job. You might also need to pass the result of that operation out of the loop to the rest of your code. To do this, you can add the value you want returned after the break expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:  Before the loop, we declare a variable named counter and initialize it to . Then we declare a variable named result to hold the value returned from the loop. On every iteration of the loop, we add  to the counter variable, and then check whether the counter is equal to . When it is, we use the break keyword with the value counter * . After the loop, we use a semicolon to end the statement that assigns the value to result. Finally, we print the value in result, which in this case is .  You can also return from inside a loop. While break only exits the current loop, return always exits the current function.  Loop Labels to Disambiguate Between Multiple Loops If you have loops within loops, break and continue apply to the innermost loop at that point. You can optionally specify a loop label on a loop that you can then use with break or continue to specify that those keywords apply to the labeled loop instead of the innermost loop. Loop labels must begin with a single quote. Here‚Äôs an example with two nested loops:  The outer loop has the label 'counting_up, and it will count up from  to . The inner loop without a label counts down from  to . The first break that doesn‚Äôt specify a label will exit the inner loop only. The break 'counting_up; statement will exit the outer loop. This code prints:  Conditional Loops with while A program will often need to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls break, stopping the loop. It‚Äôs possible to implement behavior like this using a combination of loop, if, else, and break; you could try that now in a program, if you‚Äôd like. However, this pattern is so common that Rust has a built-in language construct for it, called a while loop. In Listing -, we use while to loop the program three times, counting down each time, and then, after the loop, print a message and exit.  Filename: src/main.rs  Listing -: Using a while loop to run code while a condition holds true  This construct eliminates a lot of nesting that would be necessary if you used loop, if, else, and break, and it‚Äôs clearer. While a condition evaluates to true, the code runs; otherwise, it exits the loop.  Looping Through a Collection with for You can also use the while construct to loop over the elements of a collection, such as an array. For example, the loop in Listing - prints each element in the array a.  Filename: src/main.rs  Listing -: Looping through each element of a collection using a while loop  Here, the code counts up through the elements in the array. It starts at index , and then loops until it reaches the final index in the array (that is, when index <  is no longer true). Running this code will print every element in the array:  All five array values appear in the terminal, as expected. Even though index will reach a value of  at some point, the loop stops executing before trying to fetch a sixth value from the array.  However, this approach is error prone; we could cause the program to panic if the index value or test condition is incorrect. For example, if you changed the definition of the a array to have four elements but forgot to update the condition to while index < , the code would panic. It‚Äôs also slow, because the compiler adds runtime code to perform the conditional check of whether the index is within the bounds of the array on every iteration through the loop.  As a more concise alternative, you can use a for loop and execute some code for each item in a collection. A for loop looks like the code in Listing -.  Filename: src/main.rs  Listing -: Looping through each element of a collection using a for loop  When we run this code, we‚Äôll see the same output as in Listing -. More importantly, we‚Äôve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.  Using the for loop, you wouldn‚Äôt need to remember to change any other code if you changed the number of values in the array, as you would with the method used in Listing -.  The safety and conciseness of for loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a while loop in Listing -, most Rustaceans would use a for loop. The way to do that would be to use a Range, provided by the standard library, which generates all numbers in sequence starting from one number and ending before another number.  Here‚Äôs what the countdown would look like using a for loop and another method we‚Äôve not yet talked about, rev, to reverse the range:  Filename: src/main.rs  This code is a bit nicer, isn‚Äôt it?  Summary You made it! This was a sizable chapter: you learned about variables, scalar and compound data types, functions, comments, if expressions, and loops! To practice with the concepts discussed in this chapter, try building programs to do the following:  Convert temperatures between Fahrenheit and Celsius. Generate the nth Fibonacci number. Print the lyrics to the Christmas carol ‚ÄúThe Twelve Days of Christmas,‚Äù taking advantage of the repetition in the song. When you‚Äôre ready to move on, we‚Äôll talk about a concept in Rust that doesn‚Äôt commonly exist in other programming languages: ownership.  Understanding Ownership Ownership is Rust‚Äôs most unique feature and has deep implications for the rest of the language. It enables Rust to make memory safety guarantees without needing a garbage collector, so it‚Äôs important to understand how ownership works. In this chapter, we‚Äôll talk about ownership as well as several related features: borrowing, slices, and how Rust lays data out in memory.  What Is Ownership? Ownership is a set of rules that govern how a Rust program manages memory. All programs have to manage the way they use a computer‚Äôs memory while running. Some languages have garbage collection that regularly looks for no-longer-used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks. If any of the rules are violated, the program won‚Äôt compile. None of the features of ownership will slow down your program while it‚Äôs running.  Because ownership is a new concept for many programmers, it does take some time to get used to. The good news is that the more experienced you become with Rust and the rules of the ownership system, the easier you‚Äôll find it to naturally develop code that is safe and efficient. Keep at it!  When you understand ownership, you‚Äôll have a solid foundation for understanding the features that make Rust unique. In this chapter, you‚Äôll learn ownership by working through some examples that focus on a very common data structure: strings.  The Stack and the Heap Many programming languages don‚Äôt require you to think about the stack and the heap very often. But in a systems programming language like Rust, whether a value is on the stack or the heap affects how the language behaves and why you have to make certain decisions. Parts of ownership will be described in relation to the stack and the heap later in this chapter, so here is a brief explanation in preparation.  Both the stack and the heap are parts of memory available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as last in, first out. Think of a stack of plates: when you add more plates, you put them on top of the pile, and when you need a plate, you take one off the top. Adding or removing plates from the middle or bottom wouldn‚Äôt work as well! Adding data is called pushing onto the stack, and removing data is called popping off the stack. All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead.  The heap is less organized: when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a pointer, which is the address of that location. This process is called allocating on the heap and is sometimes abbreviated as just allocating (pushing values onto the stack is not considered allocating). Because the pointer to the heap is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer. Think of being seated at a restaurant. When you enter, you state the number of people in your group, and the host finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you‚Äôve been seated to find you.  Pushing to the stack is faster than allocating on the heap because the allocator never has to search for a place to store new data; that location is always at the top of the stack. Comparatively, allocating space on the heap requires more work because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation.  Accessing data in the heap is slower than accessing data on the stack because you have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory. Continuing the analogy, consider a server at a restaurant taking orders from many tables. It‚Äôs most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process. By the same token, a processor can do its job better if it works on data that‚Äôs close to other data (as it is on the stack) rather than farther away (as it can be on the heap).  When your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function‚Äôs local variables get pushed onto the stack. When the function is over, those values get popped off the stack.  Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don‚Äôt run out of space are all problems that ownership addresses. Once you understand ownership, you won‚Äôt need to think about the stack and the heap very often, but knowing that the main purpose of ownership is to manage heap data can help explain why it works the way it does.  Ownership Rules First, let‚Äôs take a look at the ownership rules. Keep these rules in mind as we work through the examples that illustrate them:  Each value in Rust has an owner. There can only be one owner at a time. When the owner goes out of scope, the value will be dropped. Variable Scope Now that we‚Äôre past basic Rust syntax, we won‚Äôt include all the fn main() { code in examples, so if you‚Äôre following along, make sure to put the following examples inside a main function manually. As a result, our examples will be a bit more concise, letting us focus on the actual details rather than boilerplate code.  As a first example of ownership, we‚Äôll look at the scope of some variables. A scope is the range within a program for which an item is valid. Take the following variable:  The variable s refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it‚Äôs declared until the end of the current scope. Listing - shows a program with comments annotating where the variable s would be valid.  Listing -: A variable and the scope in which it is valid  In other words, there are two important points in time here:  When s comes into scope, it is valid. It remains valid until it goes out of scope. At this point, the relationship between scopes and when variables are valid is similar to that in other programming languages. Now we‚Äôll build on top of this understanding by introducing the String type.  The String Type To illustrate the rules of ownership, we need a data type that is more complex than those we covered in the ‚ÄúData Types‚Äù section of Chapter . The types covered previously are of a known size, can be stored on the stack and popped off the stack when their scope is over, and can be quickly and trivially copied to make a new, independent instance if another part of code needs to use the same value in a different scope. But we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data, and the String type is a great example.  We‚Äôll concentrate on the parts of String that relate to ownership. These aspects also apply to other complex data types, whether they are provided by the standard library or created by you. We‚Äôll discuss String in more depth in Chapter .  We‚Äôve already seen string literals, where a string value is hardcoded into our program. String literals are convenient, but they aren‚Äôt suitable for every situation in which we may want to use text. One reason is that they‚Äôre immutable. Another is that not every string value can be known when we write our code: for example, what if we want to take user input and store it? For these situations, Rust has a second string type, String. This type manages data allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a String from a string literal using the from function, like so:  The double colon :: operator allows us to namespace this particular from function under the String type rather than using some sort of name like string_from. We‚Äôll discuss this syntax more in the ‚ÄúMethod Syntax‚Äù section of Chapter , and when we talk about namespacing with modules in ‚ÄúPaths for Referring to an Item in the Module Tree‚Äù in Chapter .  This kind of string can be mutated:  So, what‚Äôs the difference here? Why can String be mutated but literals cannot? The difference is in how these two types deal with memory.  Memory and Allocation In the case of a string literal, we know the contents at compile time, so the text is hardcoded directly into the final executable. This is why string literals are fast and efficient. But these properties only come from the string literal‚Äôs immutability. Unfortunately, we can‚Äôt put a blob of memory into the binary for each piece of text whose size is unknown at compile time and whose size might change while running the program.  With the String type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:  The memory must be requested from the memory allocator at runtime. We need a way of returning this memory to the allocator when we‚Äôre done with our String. That first part is done by us: when we call String::from, its implementation requests the memory it needs. This is pretty much universal in programming languages.  However, the second part is different. In languages with a garbage collector (GC), the GC keeps track of and cleans up memory that isn‚Äôt being used anymore, and we don‚Äôt need to think about it. In most languages without a GC, it‚Äôs our responsibility to identify when memory is no longer being used and to call code to explicitly free it, just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget, we‚Äôll waste memory. If we do it too early, we‚Äôll have an invalid variable. If we do it twice, that‚Äôs a bug too. We need to pair exactly one allocate with exactly one free.  Rust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here‚Äôs a version of our scope example from Listing - using a String instead of a string literal:  There is a natural point at which we can return the memory our String needs to the allocator: when s goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called drop, and it‚Äôs where the author of String can put the code to return the memory. Rust calls drop automatically at the closing curly bracket.  Note: In C++, this pattern of deallocating resources at the end of an item‚Äôs lifetime is sometimes called Resource Acquisition Is Initialization (RAII). The drop function in Rust will be familiar to you if you‚Äôve used RAII patterns.  This pattern has a profound impact on the way Rust code is written. It may seem simple right now, but the behavior of code can be unexpected in more complicated situations when we want to have multiple variables use the data we‚Äôve allocated on the heap. Let‚Äôs explore some of those situations now.   Variables and Data Interacting with Move Multiple variables can interact with the same data in different ways in Rust. Let‚Äôs look at an example using an integer in Listing -.  Listing -: Assigning the integer value of variable x to y  We can probably guess what this is doing: ‚Äúbind the value  to x; then make a copy of the value in x and bind it to y.‚Äù We now have two variables, x and y, and both equal . This is indeed what is happening, because integers are simple values with a known, fixed size, and these two  values are pushed onto the stack.  Now let‚Äôs look at the String version:  This looks very similar, so we might assume that the way it works would be the same: that is, the second line would make a copy of the value in s and bind it to s. But this isn‚Äôt quite what happens.  Take a look at Figure - to see what is happening to String under the covers. A String is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.  Two tables: the first table contains the representation of s on the stack, consisting of its length (), capacity (), and a pointer to the first value in the second table. The second table contains the representation of the string data on the heap, byte by byte.  Figure -: Representation in memory of a String holding the value "hello" bound to s  The length is how much memory, in bytes, the contents of the String are currently using. The capacity is the total amount of memory, in bytes, that the String has received from the allocator. The difference between length and capacity matters, but not in this context, so for now, it‚Äôs fine to ignore the capacity.  When we assign s to s, the String data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to. In other words, the data representation in memory looks like Figure -.  Three tables: tables s and s representing those strings on the stack, respectively, and both pointing to the same string data on the heap.  Figure -: Representation in memory of the variable s that has a copy of the pointer, length, and capacity of s  The representation does not look like Figure -, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation s = s could be very expensive in terms of runtime performance if the data on the heap were large.  Four tables: two tables representing the stack data for s and s, and each points to its own copy of string data on the heap.  Figure -: Another possibility for what s = s might do if Rust copied the heap data as well  Earlier, we said that when a variable goes out of scope, Rust automatically calls the drop function and cleans up the heap memory for that variable. But Figure - shows both data pointers pointing to the same location. This is a problem: when s and s go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.  To ensure memory safety, after the line let s = s;, Rust considers s as no longer valid. Therefore, Rust doesn‚Äôt need to free anything when s goes out of scope. Check out what happens when you try to use s after s is created; it won‚Äôt work:  You‚Äôll get an error like this because Rust prevents you from using the invalidated reference:  If you‚Äôve heard the terms shallow copy and deep copy while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it‚Äôs known as a move. In this example, we would say that s was moved into s. So, what actually happens is shown in Figure -.  Three tables: tables s and s representing those strings on the stack, respectively, and both pointing to the same string data on the heap. Table s is grayed out be-cause s is no longer valid; only s can be used to access the heap data.  Figure -: Representation in memory after s has been invalidated  That solves our problem! With only s valid, when it goes out of scope it alone will free the memory, and we‚Äôre done.  In addition, there‚Äôs a design choice that‚Äôs implied by this: Rust will never automatically create ‚Äúdeep‚Äù copies of your data. Therefore, any automatic copying can be assumed to be inexpensive in terms of runtime performance.   Variables and Data Interacting with Clone If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone. We‚Äôll discuss method syntax in Chapter , but because methods are a common feature in many programming languages, you‚Äôve probably seen them before.  Here‚Äôs an example of the clone method in action:  This works just fine and explicitly produces the behavior shown in Figure -, where the heap data does get copied.  When you see a call to clone, you know that some arbitrary code is being executed and that code may be expensive. It‚Äôs a visual indicator that something different is going on.  Stack-Only Data: Copy There‚Äôs another wrinkle we haven‚Äôt talked about yet. This code using integers‚Äîpart of which was shown in Listing -‚Äîworks and is valid:  But this code seems to contradict what we just learned: we don‚Äôt have a call to clone, but x is still valid and wasn‚Äôt moved into y.  The reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there‚Äôs no reason we would want to prevent x from being valid after we create the variable y. In other words, there‚Äôs no difference between deep and shallow copying here, so calling clone wouldn‚Äôt do anything different from the usual shallow copying, and we can leave it out.  Rust has a special annotation called the Copy trait that we can place on types that are stored on the stack, as integers are (we‚Äôll talk more about traits in Chapter ). If a type implements the Copy trait, variables that use it do not move, but rather are trivially copied, making them still valid after assignment to another variable.  Rust won‚Äôt let us annotate a type with Copy if the type, or any of its parts, has implemented the Drop trait. If the type needs something special to happen when the value goes out of scope and we add the Copy annotation to that type, we‚Äôll get a compile-time error. To learn about how to add the Copy annotation to your type to implement the trait, see ‚ÄúDerivable Traits‚Äù in Appendix C.  So, what types implement the Copy trait? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can implement Copy, and nothing that requires allocation or is some form of resource can implement Copy. Here are some of the types that implement Copy:  All the integer types, such as u. The Boolean type, bool, with values true and false. All the floating-point types, such as f. The character type, char. Tuples, if they only contain types that also implement Copy. For example, (i, i) implements Copy, but (i, String) does not. Ownership and Functions The mechanics of passing a value to a function are similar to those when assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. Listing - has an example with some annotations showing where variables go into and out of scope.  Filename: src/main.rs  Listing -: Functions with ownership and scope annotated  If we tried to use s after the call to takes_ownership, Rust would throw a compile-time error. These static checks protect us from mistakes. Try adding code to main that uses s and x to see where you can use them and where the ownership rules prevent you from doing so.  Return Values and Scope Returning values can also transfer ownership. Listing - shows an example of a function that returns some value, with similar annotations as those in Listing -.  Filename: src/main.rs  Listing -: Transferring ownership of return values  The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by drop unless ownership of the data has been moved to another variable.  While this works, taking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It‚Äôs quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.  Rust does let us return multiple values using a tuple, as shown in Listing -.  Filename: src/main.rs  Listing -: Returning ownership of parameters  But this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for using a value without transferring ownership, called references.  References and Borrowing The issue with the tuple code in Listing - is that we have to return the String to the calling function so we can still use the String after the call to calculate_length, because the String was moved into calculate_length. Instead, we can provide a reference to the String value. A reference is like a pointer in that it‚Äôs an address we can follow to access the data stored at that address; that data is owned by some other variable. Unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference.  Here is how you would define and use a calculate_length function that has a reference to an object as a parameter instead of taking ownership of the value:  Filename: src/main.rs  First, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass &s into calculate_length and, in its definition, we take &String rather than String. These ampersands represent references, and they allow you to refer to some value without taking ownership of it. Figure - depicts this concept.  Three tables: the table for s contains only a pointer to the table for s. The table for s contains the stack data for s and points to the string data on the heap.  Figure -: A diagram of &String s pointing at String s  Note: The opposite of referencing by using & is dereferencing, which is accomplished with the dereference operator, *. We‚Äôll see some uses of the dereference operator in Chapter  and discuss details of dereferencing in Chapter .  Let‚Äôs take a closer look at the function call here:  The &s syntax lets us create a reference that refers to the value of s but does not own it. Because it does not own it, the value it points to will not be dropped when the reference stops being used.  Likewise, the signature of the function uses & to indicate that the type of the parameter s is a reference. Let‚Äôs add some explanatory annotations:  The scope in which the variable s is valid is the same as any function parameter‚Äôs scope, but the value pointed to by the reference is not dropped when s stops being used, because s doesn‚Äôt have ownership. When functions have references as parameters instead of the actual values, we won‚Äôt need to return the values in order to give back ownership, because we never had ownership.  We call the action of creating a reference borrowing. As in real life, if a person owns something, you can borrow it from them. When you‚Äôre done, you have to give it back. You don‚Äôt own it.  So, what happens if we try to modify something we‚Äôre borrowing? Try the code in Listing -. Spoiler alert: it doesn‚Äôt work!  Filename: src/main.rs  Listing -: Attempting to modify a borrowed value  Here‚Äôs the error:  Just as variables are immutable by default, so are references. We‚Äôre not allowed to modify something we have a reference to.  Mutable References We can fix the code from Listing - to allow us to modify a borrowed value with just a few small tweaks that use, instead, a mutable reference:  Filename: src/main.rs  First we change s to be mut. Then we create a mutable reference with &mut s where we call the change function, and update the function signature to accept a mutable reference with some_string: &mut String. This makes it very clear that the change function will mutate the value it borrows.  Mutable references have one big restriction: if you have a mutable reference to a value, you can have no other references to that value. This code that attempts to create two mutable references to s will fail:  Filename: src/main.rs  Here‚Äôs the error:  This error says that this code is invalid because we cannot borrow s as mutable more than once at a time. The first mutable borrow is in r and must last until it‚Äôs used in the println!, but between the creation of that mutable reference and its usage, we tried to create another mutable reference in r that borrows the same data as r.  The restriction preventing multiple mutable references to the same data at the same time allows for mutation but in a very controlled fashion. It‚Äôs something that new Rustaceans struggle with because most languages let you mutate whenever you‚Äôd like. The benefit of having this restriction is that Rust can prevent data races at compile time. A data race is similar to a race condition and happens when these three behaviors occur:  Two or more pointers access the same data at the same time. At least one of the pointers is being used to write to the data. There‚Äôs no mechanism being used to synchronize access to the data. Data races cause undefined behavior and can be difficult to diagnose and fix when you‚Äôre trying to track them down at runtime; Rust prevents this problem by refusing to compile code with data races!  As always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not simultaneous ones:  Rust enforces a similar rule for combining mutable and immutable references. This code results in an error:  Here‚Äôs the error:  Whew! We also cannot have a mutable reference while we have an immutable one to the same value.  Users of an immutable reference don‚Äôt expect the value to suddenly change out from under them! However, multiple immutable references are allowed because no one who is just reading the data has the ability to affect anyone else‚Äôs reading of the data.  Note that a reference‚Äôs scope starts from where it is introduced and continues through the last time that reference is used. For instance, this code will compile because the last usage of the immutable references, the println!, occurs before the mutable reference is introduced:  The scopes of the immutable references r and r end after the println! where they are last used, which is before the mutable reference r is created. These scopes don‚Äôt overlap, so this code is allowed: the compiler can tell that the reference is no longer being used at a point before the end of the scope.  Even though borrowing errors may be frustrating at times, remember that it‚Äôs the Rust compiler pointing out a potential bug early (at compile time rather than at runtime) and showing you exactly where the problem is. Then you don‚Äôt have to track down why your data isn‚Äôt what you thought it was.  Dangling References In languages with pointers, it‚Äôs easy to erroneously create a dangling pointer‚Äîa pointer that references a location in memory that may have been given to someone else‚Äîby freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.  Let‚Äôs try to create a dangling reference to see how Rust prevents them with a compile-time error:  Filename: src/main.rs  Here‚Äôs the error:  This error message refers to a feature we haven‚Äôt covered yet: lifetimes. We‚Äôll discuss lifetimes in detail in Chapter . But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:  Let‚Äôs take a closer look at exactly what‚Äôs happening at each stage of our dangle code:  Filename: src/main.rs  Because s is created inside dangle, when the code of dangle is finished, s will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid String. That‚Äôs no good! Rust won‚Äôt let us do this.  The solution here is to return the String directly:  This works without any problems. Ownership is moved out, and nothing is deallocated.  The Rules of References Let‚Äôs recap what we‚Äôve discussed about references:  At any given time, you can have either one mutable reference or any number of immutable references. References must always be valid. Next, we‚Äôll look at a different kind of reference: slices.  The Slice Type Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection. A slice is a kind of reference, so it does not have ownership.  Here‚Äôs a small programming problem: write a function that takes a string of words separated by spaces and returns the first word it finds in that string. If the function doesn‚Äôt find a space in the string, the whole string must be one word, so the entire string should be returned.  Let‚Äôs work through how we‚Äôd write the signature of this function without using slices, to understand the problem that slices will solve:  The first_word function has a &String as a parameter. We don‚Äôt want ownership, so this is fine. But what should we return? We don‚Äôt really have a way to talk about part of a string. However, we could return the index of the end of the word, indicated by a space. Let‚Äôs try that, as shown in Listing -.  Filename: src/main.rs  Listing -: The first_word function that returns a byte index value into the String parameter  Because we need to go through the String element by element and check whether a value is a space, we‚Äôll convert our String to an array of bytes using the as_bytes method.  Next, we create an iterator over the array of bytes using the iter method:  We‚Äôll discuss iterators in more detail in Chapter . For now, know that iter is a method that returns each element in a collection and that enumerate wraps the result of iter and returns each element as part of a tuple instead. The first element of the tuple returned from enumerate is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.  Because the enumerate method returns a tuple, we can use patterns to destructure that tuple. We‚Äôll be discussing patterns more in Chapter . In the for loop, we specify a pattern that has i for the index in the tuple and &item for the single byte in the tuple. Because we get a reference to the element from .iter().enumerate(), we use & in the pattern.  Inside the for loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using s.len().  We now have a way to find out the index of the end of the first word in the string, but there‚Äôs a problem. We‚Äôre returning a usize on its own, but it‚Äôs only a meaningful number in the context of the &String. In other words, because it‚Äôs a separate value from the String, there‚Äôs no guarantee that it will still be valid in the future. Consider the program in Listing - that uses the first_word function from Listing -.  Filename: src/main.rs  Listing -: Storing the result from calling the first_word function and then changing the String contents  This program compiles without any errors and would also do so if we used word after calling s.clear(). Because word isn‚Äôt connected to the state of s at all, word still contains the value . We could use that value  with the variable s to try to extract the first word out, but this would be a bug because the contents of s have changed since we saved  in word.  Having to worry about the index in word getting out of sync with the data in s is tedious and error prone! Managing these indices is even more brittle if we write a second_word function. Its signature would have to look like this:  Now we‚Äôre tracking a starting and an ending index, and we have even more values that were calculated from data in a particular state but aren‚Äôt tied to that state at all. We have three unrelated variables floating around that need to be kept in sync.  Luckily, Rust has a solution to this problem: string slices.  String Slices A string slice is a reference to part of a String, and it looks like this:  Rather than a reference to the entire String, hello is a reference to a portion of the String, specified in the extra [..] bit. We create slices using a range within brackets by specifying [starting_index..ending_index], where starting_index is the first position in the slice and ending_index is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to ending_index minus starting_index. So, in the case of let world = &s[..];, world would be a slice that contains a pointer to the byte at index  of s with a length value of .  Figure - shows this in a diagram.  Three tables: a table representing the stack data of s, which points to the byte at index  in a table of the string data "hello world" on the heap. The third table rep-resents the stack data of the slice world, which has a length value of  and points to byte  of the heap data table.  Figure -: String slice referring to part of a String  With Rust‚Äôs .. range syntax, if you want to start at index , you can drop the value before the two periods. In other words, these are equal:  By the same token, if your slice includes the last byte of the String, you can drop the trailing number. That means these are equal:  You can also drop both values to take a slice of the entire string. So these are equal:  Note: String slice range indices must occur at valid UTF- character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF- handling is in the ‚ÄúStoring UTF- Encoded Text with Strings‚Äù section of Chapter .  With all this information in mind, let‚Äôs rewrite first_word to return a slice. The type that signifies ‚Äústring slice‚Äù is written as &str:  Filename: src/main.rs  We get the index for the end of the word the same way we did in Listing -, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.  Now when we call first_word, we get back a single value that is tied to the underlying data. The value is made up of a reference to the starting point of the slice and the number of elements in the slice.  Returning a slice would also work for a second_word function:  We now have a straightforward API that‚Äôs much harder to mess up because the compiler will ensure the references into the String remain valid. Remember the bug in the program in Listing -, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn‚Äôt show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of first_word will throw a compile-time error:  Filename: src/main.rs  Here‚Äôs the compiler error:  Recall from the borrowing rules that if we have an immutable reference to something, we cannot also take a mutable reference. Because clear needs to truncate the String, it needs to get a mutable reference. The println! after the call to clear uses the reference in word, so the immutable reference must still be active at that point. Rust disallows the mutable reference in clear and the immutable reference in word from existing at the same time, and compilation fails. Not only has Rust made our API easier to use, but it has also eliminated an entire class of errors at compile time!   String Literals as Slices Recall that we talked about string literals being stored inside the binary. Now that we know about slices, we can properly understand string literals:  The type of s here is &str: it‚Äôs a slice pointing to that specific point of the binary. This is also why string literals are immutable; &str is an immutable reference.  String Slices as Parameters Knowing that you can take slices of literals and String values leads us to one more improvement on first_word, and that‚Äôs its signature:  A more experienced Rustacean would write the signature shown in Listing - instead because it allows us to use the same function on both &String values and &str values.  Listing -: Improving the first_word function by using a string slice for the type of the s parameter  If we have a string slice, we can pass that directly. If we have a String, we can pass a slice of the String or a reference to the String. This flexibility takes advantage of deref coercions, a feature we will cover in the ‚ÄúImplicit Deref Coercions with Functions and Methods‚Äù section of Chapter .  Defining a function to take a string slice instead of a reference to a String makes our API more general and useful without losing any functionality:  Filename: src/main.rs  Other Slices String slices, as you might imagine, are specific to strings. But there‚Äôs a more general slice type too. Consider this array:  Just as we might want to refer to part of a string, we might want to refer to part of an array. We‚Äôd do so like this:  This slice has the type &[i]. It works the same way as string slices do, by storing a reference to the first element and a length. You‚Äôll use this kind of slice for all sorts of other collections. We‚Äôll discuss these collections in detail when we talk about vectors in Chapter .  Summary The concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don‚Äôt have to write and debug extra code to get this control.  Ownership affects how lots of other parts of Rust work, so we‚Äôll talk about these concepts further throughout the rest of the book. Let‚Äôs move on to Chapter  and look at grouping pieces of data together in a struct.  Using Structs to Structure Related Data A struct, or structure, is a custom data type that lets you package together and name multiple related values that make up a meaningful group. If you‚Äôre familiar with an object-oriented language, a struct is like an object‚Äôs data attributes. In this chapter, we‚Äôll compare and contrast tuples with structs to build on what you already know and demonstrate when structs are a better way to group data.  We‚Äôll demonstrate how to define and instantiate structs. We‚Äôll discuss how to define associated functions, especially the kind of associated functions called methods, to specify behavior associated with a struct type. Structs and enums (discussed in Chapter ) are the building blocks for creating new types in your program‚Äôs domain to take full advantage of Rust‚Äôs compile-time type checking.  Defining and Instantiating Structs Structs are similar to tuples, discussed in ‚ÄúThe Tuple Type‚Äù section, in that both hold multiple related values. Like tuples, the pieces of a struct can be different types. Unlike with tuples, in a struct you‚Äôll name each piece of data so it‚Äôs clear what the values mean. Adding these names means that structs are more flexible than tuples: you don‚Äôt have to rely on the order of the data to specify or access the values of an instance.  To define a struct, we enter the keyword struct and name the entire struct. A struct‚Äôs name should describe the significance of the pieces of data being grouped together. Then, inside curly brackets, we define the names and types of the pieces of data, which we call fields. For example, Listing - shows a struct that stores information about a user account.  Filename: src/main.rs  Listing -: A User struct definition  To use a struct after we‚Äôve defined it, we create an instance of that struct by specifying concrete values for each of the fields. We create an instance by stating the name of the struct and then add curly brackets containing key: value pairs, where the keys are the names of the fields and the values are the data we want to store in those fields. We don‚Äôt have to specify the fields in the same order in which we declared them in the struct. In other words, the struct definition is like a general template for the type, and instances fill in that template with particular data to create values of the type. For example, we can declare a particular user as shown in Listing -.  Filename: src/main.rs  Listing -: Creating an instance of the User struct  To get a specific value from a struct, we use dot notation. For example, to access this user‚Äôs email address, we use user.email. If the instance is mutable, we can change a value by using the dot notation and assigning into a particular field. Listing - shows how to change the value in the email field of a mutable User instance.  Filename: src/main.rs  Listing -: Changing the value in the email field of a User instance  Note that the entire instance must be mutable; Rust doesn‚Äôt allow us to mark only certain fields as mutable. As with any expression, we can construct a new instance of the struct as the last expression in the function body to implicitly return that new instance.  Listing - shows a build_user function that returns a User instance with the given email and username. The active field gets the value of true, and the sign_in_count gets a value of .  Filename: src/main.rs  Listing -: A build_user function that takes an email and username and returns a User instance  It makes sense to name the function parameters with the same name as the struct fields, but having to repeat the email and username field names and variables is a bit tedious. If the struct had more fields, repeating each name would get even more annoying. Luckily, there‚Äôs a convenient shorthand!   Using the Field Init Shorthand Because the parameter names and the struct field names are exactly the same in Listing -, we can use the field init shorthand syntax to rewrite build_user so it behaves exactly the same but doesn‚Äôt have the repetition of username and email, as shown in Listing -.  Filename: src/main.rs  Listing -: A build_user function that uses field init shorthand because the username and email parameters have the same name as struct fields  Here, we‚Äôre creating a new instance of the User struct, which has a field named email. We want to set the email field‚Äôs value to the value in the email parameter of the build_user function. Because the email field and the email parameter have the same name, we only need to write email rather than email: email.  Creating Instances from Other Instances with Struct Update Syntax It‚Äôs often useful to create a new instance of a struct that includes most of the values from another instance, but changes some. You can do this using struct update syntax.  First, in Listing - we show how to create a new User instance in user regularly, without the update syntax. We set a new value for email but otherwise use the same values from user that we created in Listing -.  Filename: src/main.rs  Listing -: Creating a new User instance using all but one of the values from user  Using struct update syntax, we can achieve the same effect with less code, as shown in Listing -. The syntax .. specifies that the remaining fields not explicitly set should have the same value as the fields in the given instance.  Filename: src/main.rs  Listing -: Using struct update syntax to set a new email value for a User instance but to use the rest of the values from user  The code in Listing - also creates an instance in user that has a different value for email but has the same values for the username, active, and sign_in_count fields from user. The ..user must come last to specify that any remaining fields should get their values from the corresponding fields in user, but we can choose to specify values for as many fields as we want in any order, regardless of the order of the fields in the struct‚Äôs definition.  Note that the struct update syntax uses = like an assignment; this is because it moves the data, just as we saw in the ‚ÄúVariables and Data Interacting with Move‚Äù section. In this example, we can no longer use user as a whole after creating user because the String in the username field of user was moved into user. If we had given user new String values for both email and username, and thus only used the active and sign_in_count values from user, then user would still be valid after creating user. Both active and sign_in_count are types that implement the Copy trait, so the behavior we discussed in the ‚ÄúStack-Only Data: Copy‚Äù section would apply.  Using Tuple Structs Without Named Fields to Create Different Types Rust also supports structs that look similar to tuples, called tuple structs. Tuple structs have the added meaning the struct name provides but don‚Äôt have names associated with their fields; rather, they just have the types of the fields. Tuple structs are useful when you want to give the whole tuple a name and make the tuple a different type from other tuples, and when naming each field as in a regular struct would be verbose or redundant.  To define a tuple struct, start with the struct keyword and the struct name followed by the types in the tuple. For example, here we define and use two tuple structs named Color and Point:  Filename: src/main.rs  Note that the black and origin values are different types because they‚Äôre instances of different tuple structs. Each struct you define is its own type, even though the fields within the struct might have the same types. For example, a function that takes a parameter of type Color cannot take a Point as an argument, even though both types are made up of three i values. Otherwise, tuple struct instances are similar to tuples in that you can destructure them into their individual pieces, and you can use a . followed by the index to access an individual value.  Unit-Like Structs Without Any Fields You can also define structs that don‚Äôt have any fields! These are called unit-like structs because they behave similarly to (), the unit type that we mentioned in ‚ÄúThe Tuple Type‚Äù section. Unit-like structs can be useful when you need to implement a trait on some type but don‚Äôt have any data that you want to store in the type itself. We‚Äôll discuss traits in Chapter . Here‚Äôs an example of declaring and instantiating a unit struct named AlwaysEqual:  Filename: src/main.rs  To define AlwaysEqual, we use the struct keyword, the name we want, and then a semicolon. No need for curly brackets or parentheses! Then we can get an instance of AlwaysEqual in the subject variable in a similar way: using the name we defined, without any curly brackets or parentheses. Imagine that later we‚Äôll implement behavior for this type such that every instance of AlwaysEqual is always equal to every instance of any other type, perhaps to have a known result for testing purposes. We wouldn‚Äôt need any data to implement that behavior! You‚Äôll see in Chapter  how to define traits and implement them on any type, including unit-like structs.  Ownership of Struct Data In the User struct definition in Listing -, we used the owned String type rather than the &str string slice type. This is a deliberate choice because we want each instance of this struct to own all of its data and for that data to be valid for as long as the entire struct is valid.  It‚Äôs also possible for structs to store references to data owned by something else, but to do so requires the use of lifetimes, a Rust feature that we‚Äôll discuss in Chapter . Lifetimes ensure that the data referenced by a struct is valid for as long as the struct is. Let‚Äôs say you try to store a reference in a struct without specifying lifetimes, like the following; this won‚Äôt work:  Filename: src/main.rs  The compiler will complain that it needs lifetime specifiers:  In Chapter , we‚Äôll discuss how to fix these errors so you can store references in structs, but for now, we‚Äôll fix errors like these using owned types like String instead of references like &str.  An Example Program Using Structs To understand when we might want to use structs, let‚Äôs write a program that calculates the area of a rectangle. We‚Äôll start by using single variables, and then refactor the program until we‚Äôre using structs instead.  Let‚Äôs make a new binary project with Cargo called rectangles that will take the width and height of a rectangle specified in pixels and calculate the area of the rectangle. Listing - shows a short program with one way of doing exactly that in our project‚Äôs src/main.rs.  Filename: src/main.rs  Listing -: Calculating the area of a rectangle specified by separate width and height variables  Now, run this program using cargo run:  This code succeeds in figuring out the area of the rectangle by calling the area function with each dimension, but we can do more to make this code clear and readable.  The issue with this code is evident in the signature of area:  The area function is supposed to calculate the area of one rectangle, but the function we wrote has two parameters, and it‚Äôs not clear anywhere in our program that the parameters are related. It would be more readable and more manageable to group width and height together. We‚Äôve already discussed one way we might do that in ‚ÄúThe Tuple Type‚Äù section of Chapter : by using tuples.  Refactoring with Tuples Listing - shows another version of our program that uses tuples.  Filename: src/main.rs  Listing -: Specifying the width and height of the rectangle with a tuple  In one way, this program is better. Tuples let us add a bit of structure, and we‚Äôre now passing just one argument. But in another way, this version is less clear: tuples don‚Äôt name their elements, so we have to index into the parts of the tuple, making our calculation less obvious.  Mixing up the width and height wouldn‚Äôt matter for the area calculation, but if we want to draw the rectangle on the screen, it would matter! We would have to keep in mind that width is the tuple index  and height is the tuple index . This would be even harder for someone else to figure out and keep in mind if they were to use our code. Because we haven‚Äôt conveyed the meaning of our data in our code, it‚Äôs now easier to introduce errors.  Refactoring with Structs: Adding More Meaning We use structs to add meaning by labeling the data. We can transform the tuple we‚Äôre using into a struct with a name for the whole as well as names for the parts, as shown in Listing -.  Filename: src/main.rs  Listing -: Defining a Rectangle struct  Here we‚Äôve defined a struct and named it Rectangle. Inside the curly brackets, we defined the fields as width and height, both of which have type u. Then, in main, we created a particular instance of Rectangle that has a width of  and a height of .  Our area function is now defined with one parameter, which we‚Äôve named rectangle, whose type is an immutable borrow of a struct Rectangle instance. As mentioned in Chapter , we want to borrow the struct rather than take ownership of it. This way, main retains its ownership and can continue using rect, which is the reason we use the & in the function signature and where we call the function.  The area function accesses the width and height fields of the Rectangle instance (note that accessing fields of a borrowed struct instance does not move the field values, which is why you often see borrows of structs). Our function signature for area now says exactly what we mean: calculate the area of Rectangle, using its width and height fields. This conveys that the width and height are related to each other, and it gives descriptive names to the values rather than using the tuple index values of  and . This is a win for clarity.  Adding Useful Functionality with Derived Traits It‚Äôd be useful to be able to print an instance of Rectangle while we‚Äôre debugging our program and see the values for all its fields. Listing - tries using the println! macro as we have used in previous chapters. This won‚Äôt work, however.  Filename: src/main.rs  Listing -: Attempting to print a Rectangle instance  When we compile this code, we get an error with this core message:  The println! macro can do many kinds of formatting, and by default, the curly brackets tell println! to use formatting known as Display: output intended for direct end user consumption. The primitive types we‚Äôve seen so far implement Display by default because there‚Äôs only one way you‚Äôd want to show a  or any other primitive type to a user. But with structs, the way println! should format the output is less clear because there are more display possibilities: Do you want commas or not? Do you want to print the curly brackets? Should all the fields be shown? Due to this ambiguity, Rust doesn‚Äôt try to guess what we want, and structs don‚Äôt have a provided implementation of Display to use with println! and the {} placeholder.  If we continue reading the errors, we‚Äôll find this helpful note:  Let‚Äôs try it! The println! macro call will now look like println!("rect is {:?}", rect);. Putting the specifier :? inside the curly brackets tells println! we want to use an output format called Debug. The Debug trait enables us to print our struct in a way that is useful for developers so we can see its value while we‚Äôre debugging our code.  Compile the code with this change. Drat! We still get an error:  But again, the compiler gives us a helpful note:  Rust does include functionality to print out debugging information, but we have to explicitly opt in to make that functionality available for our struct. To do that, we add the outer attribute #[derive(Debug)] just before the struct definition, as shown in Listing -.  Filename: src/main.rs  Listing -: Adding the attribute to derive the Debug trait and printing the Rectangle instance using debug formatting  Now when we run the program, we won‚Äôt get any errors, and we‚Äôll see the following output:  Nice! It‚Äôs not the prettiest output, but it shows the values of all the fields for this instance, which would definitely help during debugging. When we have larger structs, it‚Äôs useful to have output that‚Äôs a bit easier to read; in those cases, we can use {:#?} instead of {:?} in the println! string. In this example, using the {:#?} style will output the following:  Another way to print out a value using the Debug format is to use the dbg! macro, which takes ownership of an expression (as opposed to println!, which takes a reference), prints the file and line number of where that dbg! macro call occurs in your code along with the resultant value of that expression, and returns ownership of the value.  Note: Calling the dbg! macro prints to the standard error console stream (stderr), as opposed to println!, which prints to the standard output console stream (stdout). We‚Äôll talk more about stderr and stdout in the ‚ÄúWriting Error Messages to Standard Error Instead of Standard Output‚Äù section in Chapter .  Here‚Äôs an example where we‚Äôre interested in the value that gets assigned to the width field, as well as the value of the whole struct in rect:  We can put dbg! around the expression  * scale and, because dbg! returns ownership of the expression‚Äôs value, the width field will get the same value as if we didn‚Äôt have the dbg! call there. We don‚Äôt want dbg! to take ownership of rect, so we use a reference to rect in the next call. Here‚Äôs what the output of this example looks like:  We can see the first bit of output came from src/main.rs line  where we‚Äôre debugging the expression  * scale, and its resultant value is  (the Debug formatting implemented for integers is to print only their value). The dbg! call on line  of src/main.rs outputs the value of &rect, which is the Rectangle struct. This output uses the pretty Debug formatting of the Rectangle type. The dbg! macro can be really helpful when you‚Äôre trying to figure out what your code is doing!  In addition to the Debug trait, Rust has provided a number of traits for us to use with the derive attribute that can add useful behavior to our custom types. Those traits and their behaviors are listed in Appendix C. We‚Äôll cover how to implement these traits with custom behavior as well as how to create your own traits in Chapter . There are also many attributes other than derive; for more information, see the ‚ÄúAttributes‚Äù section of the Rust Reference.  Our area function is very specific: it only computes the area of rectangles. It would be helpful to tie this behavior more closely to our Rectangle struct because it won‚Äôt work with any other type. Let‚Äôs look at how we can continue to refactor this code by turning the area function into an area method defined on our Rectangle type.  Method Syntax Methods are similar to functions: we declare them with the fn keyword and a name, they can have parameters and a return value, and they contain some code that‚Äôs run when the method is called from somewhere else. Unlike functions, methods are defined within the context of a struct (or an enum or a trait object, which we cover in Chapter  and Chapter , respectively), and their first parameter is always self, which represents the instance of the struct the method is being called on.  Defining Methods Let‚Äôs change the area function that has a Rectangle instance as a parameter and instead make an area method defined on the Rectangle struct, as shown in Listing -.  Filename: src/main.rs  Listing -: Defining an area method on the Rectangle struct  To define the function within the context of Rectangle, we start an impl (implementation) block for Rectangle. Everything within this impl block will be associated with the Rectangle type. Then we move the area function within the impl curly brackets and change the first (and in this case, only) parameter to be self in the signature and everywhere within the body. In main, where we called the area function and passed rect as an argument, we can instead use method syntax to call the area method on our Rectangle instance. The method syntax goes after an instance: we add a dot followed by the method name, parentheses, and any arguments.  In the signature for area, we use &self instead of rectangle: &Rectangle. The &self is actually short for self: &Self. Within an impl block, the type Self is an alias for the type that the impl block is for. Methods must have a parameter named self of type Self for their first parameter, so Rust lets you abbreviate this with only the name self in the first parameter spot. Note that we still need to use the & in front of the self shorthand to indicate that this method borrows the Self instance, just as we did in rectangle: &Rectangle. Methods can take ownership of self, borrow self immutably, as we‚Äôve done here, or borrow self mutably, just as they can any other parameter.  We chose &self here for the same reason we used &Rectangle in the function version: we don‚Äôt want to take ownership, and we just want to read the data in the struct, not write to it. If we wanted to change the instance that we‚Äôve called the method on as part of what the method does, we‚Äôd use &mut self as the first parameter. Having a method that takes ownership of the instance by using just self as the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation.  The main reason for using methods instead of functions, in addition to providing method syntax and not having to repeat the type of self in every method‚Äôs signature, is for organization. We‚Äôve put all the things we can do with an instance of a type in one impl block rather than making future users of our code search for capabilities of Rectangle in various places in the library we provide.  Note that we can choose to give a method the same name as one of the struct‚Äôs fields. For example, we can define a method on Rectangle that is also named width:  Filename: src/main.rs  Here, we‚Äôre choosing to make the width method return true if the value in the instance‚Äôs width field is greater than  and false if the value is : we can use a field within a method of the same name for any purpose. In main, when we follow rect.width with parentheses, Rust knows we mean the method width. When we don‚Äôt use parentheses, Rust knows we mean the field width.  Often, but not always, when we give a method the same name as a field we want it to only return the value in the field and do nothing else. Methods like this are called getters, and Rust does not implement them automatically for struct fields as some other languages do. Getters are useful because you can make the field private but the method public, and thus enable read-only access to that field as part of the type‚Äôs public API. We will discuss what public and private are and how to designate a field or method as public or private in Chapter .  Where‚Äôs the -> Operator? In C and C++, two different operators are used for calling methods: you use . if you‚Äôre calling a method on the object directly and -> if you‚Äôre calling the method on a pointer to the object and need to dereference the pointer first. In other words, if object is a pointer, object->something() is similar to (*object).something().  Rust doesn‚Äôt have an equivalent to the -> operator; instead, Rust has a feature called automatic referencing and dereferencing. Calling methods is one of the few places in Rust that has this behavior.  Here‚Äôs how it works: when you call a method with object.something(), Rust automatically adds in &, &mut, or * so object matches the signature of the method. In other words, the following are the same:  The first one looks much cleaner. This automatic referencing behavior works because methods have a clear receiver‚Äîthe type of self. Given the receiver and name of a method, Rust can figure out definitively whether the method is reading (&self), mutating (&mut self), or consuming (self). The fact that Rust makes borrowing implicit for method receivers is a big part of making ownership ergonomic in practice.  Methods with More Parameters Let‚Äôs practice using methods by implementing a second method on the Rectangle struct. This time we want an instance of Rectangle to take another instance of Rectangle and return true if the second Rectangle can fit completely within self (the first Rectangle); otherwise, it should return false. That is, once we‚Äôve defined the can_hold method, we want to be able to write the program shown in Listing -.  Filename: src/main.rs  Listing -: Using the as-yet-unwritten can_hold method  The expected output would look like the following because both dimensions of rect are smaller than the dimensions of rect, but rect is wider than rect:  We know we want to define a method, so it will be within the impl Rectangle block. The method name will be can_hold, and it will take an immutable borrow of another Rectangle as a parameter. We can tell what the type of the parameter will be by looking at the code that calls the method: rect.can_hold(&rect) passes in &rect, which is an immutable borrow to rect, an instance of Rectangle. This makes sense because we only need to read rect (rather than write, which would mean we‚Äôd need a mutable borrow), and we want main to retain ownership of rect so we can use it again after calling the can_hold method. The return value of can_hold will be a Boolean, and the implementation will check whether the width and height of self are greater than the width and height of the other Rectangle, respectively. Let‚Äôs add the new can_hold method to the impl block from Listing -, shown in Listing -.  Filename: src/main.rs  Listing -: Implementing the can_hold method on Rectangle that takes another Rectangle instance as a parameter  When we run this code with the main function in Listing -, we‚Äôll get our desired output. Methods can take multiple parameters that we add to the signature after the self parameter, and those parameters work just like parameters in functions.  Associated Functions All functions defined within an impl block are called associated functions because they‚Äôre associated with the type named after the impl. We can define associated functions that don‚Äôt have self as their first parameter (and thus are not methods) because they don‚Äôt need an instance of the type to work with. We‚Äôve already used one function like this: the String::from function that‚Äôs defined on the String type.  Associated functions that aren‚Äôt methods are often used for constructors that will return a new instance of the struct. These are often called new, but new isn‚Äôt a special name and isn‚Äôt built into the language. For example, we could choose to provide an associated function named square that would have one dimension parameter and use that as both width and height, thus making it easier to create a square Rectangle rather than having to specify the same value twice:  Filename: src/main.rs  The Self keywords in the return type and in the body of the function are aliases for the type that appears after the impl keyword, which in this case is Rectangle.  To call this associated function, we use the :: syntax with the struct name; let sq = Rectangle::square(); is an example. This function is namespaced by the struct: the :: syntax is used for both associated functions and namespaces created by modules. We‚Äôll discuss modules in Chapter .  Multiple impl Blocks Each struct is allowed to have multiple impl blocks. For example, Listing - is equivalent to the code shown in Listing -, which has each method in its own impl block.  Listing -: Rewriting Listing - using multiple impl blocks  There‚Äôs no reason to separate these methods into multiple impl blocks here, but this is valid syntax. We‚Äôll see a case in which multiple impl blocks are useful in Chapter , where we discuss generic types and traits.  Summary Structs let you create custom types that are meaningful for your domain. By using structs, you can keep associated pieces of data connected to each other and name each piece to make your code clear. In impl blocks, you can define functions that are associated with your type, and methods are a kind of associated function that let you specify the behavior that instances of your structs have.  But structs aren‚Äôt the only way you can create custom types: let‚Äôs turn to Rust‚Äôs enum feature to add another tool to your toolbox.  Enums and Pattern Matching In this chapter, we‚Äôll look at enumerations, also referred to as enums. Enums allow you to define a type by enumerating its possible variants. First we‚Äôll define and use an enum to show how an enum can encode meaning along with data. Next, we‚Äôll explore a particularly useful enum, called Option, which expresses that a value can be either something or nothing. Then we‚Äôll look at how pattern matching in the match expression makes it easy to run different code for different values of an enum. Finally, we‚Äôll cover how the if let construct is another convenient and concise idiom available to handle enums in your code.  Defining an Enum Where structs give you a way of grouping together related fields and data, like a Rectangle with its width and height, enums give you a way of saying a value is one of a possible set of values. For example, we may want to say that Rectangle is one of a set of possible shapes that also includes Circle and Triangle. To do this, Rust allows us to encode these possibilities as an enum.  Let‚Äôs look at a situation we might want to express in code and see why enums are useful and more appropriate than structs in this case. Say we need to work with IP addresses. Currently, two major standards are used for IP addresses: version four and version six. Because these are the only possibilities for an IP address that our program will come across, we can enumerate all possible variants, which is where enumeration gets its name.  Any IP address can be either a version four or a version six address, but not both at the same time. That property of IP addresses makes the enum data structure appropriate because an enum value can only be one of its variants. Both version four and version six addresses are still fundamentally IP addresses, so they should be treated as the same type when the code is handling situations that apply to any kind of IP address.  We can express this concept in code by defining an IpAddrKind enumeration and listing the possible kinds an IP address can be, V and V. These are the variants of the enum:  IpAddrKind is now a custom data type that we can use elsewhere in our code.  Enum Values We can create instances of each of the two variants of IpAddrKind like this:  Note that the variants of the enum are namespaced under its identifier, and we use a double colon to separate the two. This is useful because now both values IpAddrKind::V and IpAddrKind::V are of the same type: IpAddrKind. We can then, for instance, define a function that takes any IpAddrKind:  And we can call this function with either variant:  Using enums has even more advantages. Thinking more about our IP address type, at the moment we don‚Äôt have a way to store the actual IP address data; we only know what kind it is. Given that you just learned about structs in Chapter , you might be tempted to tackle this problem with structs as shown in Listing -.  Listing -: Storing the data and IpAddrKind variant of an IP address using a struct  Here, we‚Äôve defined a struct IpAddr that has two fields: a kind field that is of type IpAddrKind (the enum we defined previously) and an address field of type String. We have two instances of this struct. The first is home, and it has the value IpAddrKind::V as its kind with associated address data of .... The second instance is loopback. It has the other variant of IpAddrKind as its kind value, V, and has address :: associated with it. We‚Äôve used a struct to bundle the kind and address values together, so now the variant is associated with the value.  However, representing the same concept using just an enum is more concise: rather than an enum inside a struct, we can put data directly into each enum variant. This new definition of the IpAddr enum says that both V and V variants will have associated String values:  We attach data to each variant of the enum directly, so there is no need for an extra struct. Here, it‚Äôs also easier to see another detail of how enums work: the name of each enum variant that we define also becomes a function that constructs an instance of the enum. That is, IpAddr::V() is a function call that takes a String argument and returns an instance of the IpAddr type. We automatically get this constructor function defined as a result of defining the enum.  There‚Äôs another advantage to using an enum rather than a struct: each variant can have different types and amounts of associated data. Version four IP addresses will always have four numeric components that will have values between  and . If we wanted to store V addresses as four u values but still express V addresses as one String value, we wouldn‚Äôt be able to with a struct. Enums handle this case with ease:  We‚Äôve shown several different ways to define data structures to store version four and version six IP addresses. However, as it turns out, wanting to store IP addresses and encode which kind they are is so common that the standard library has a definition we can use! Let‚Äôs look at how the standard library defines IpAddr: it has the exact enum and variants that we‚Äôve defined and used, but it embeds the address data inside the variants in the form of two different structs, which are defined differently for each variant:  This code illustrates that you can put any kind of data inside an enum variant: strings, numeric types, or structs, for example. You can even include another enum! Also, standard library types are often not much more complicated than what you might come up with.  Note that even though the standard library contains a definition for IpAddr, we can still create and use our own definition without conflict because we haven‚Äôt brought the standard library‚Äôs definition into our scope. We‚Äôll talk more about bringing types into scope in Chapter .  Let‚Äôs look at another example of an enum in Listing -: this one has a wide variety of types embedded in its variants.  Listing -: A Message enum whose variants each store different amounts and types of values  This enum has four variants with different types:  Quit has no data associated with it at all. Move has named fields, like a struct does. Write includes a single String. ChangeColor includes three i values. Defining an enum with variants such as the ones in Listing - is similar to defining different kinds of struct definitions, except the enum doesn‚Äôt use the struct keyword and all the variants are grouped together under the Message type. The following structs could hold the same data that the preceding enum variants hold:  But if we used the different structs, each of which has its own type, we couldn‚Äôt as easily define a function to take any of these kinds of messages as we could with the Message enum defined in Listing -, which is a single type.  There is one more similarity between enums and structs: just as we‚Äôre able to define methods on structs using impl, we‚Äôre also able to define methods on enums. Here‚Äôs a method named call that we could define on our Message enum:  The body of the method would use self to get the value that we called the method on. In this example, we‚Äôve created a variable m that has the value Message::Write(String::from("hello")), and that is what self will be in the body of the call method when m.call() runs.  Let‚Äôs look at another enum in the standard library that is very common and useful: Option.  The Option Enum and Its Advantages Over Null Values This section explores a case study of Option, which is another enum defined by the standard library. The Option type encodes the very common scenario in which a value could be something or it could be nothing.  For example, if you request the first item in a non-empty list, you would get a value. If you request the first item in an empty list, you would get nothing. Expressing this concept in terms of the type system means the compiler can check whether you‚Äôve handled all the cases you should be handling; this functionality can prevent bugs that are extremely common in other programming languages.  Programming language design is often thought of in terms of which features you include, but the features you exclude are important too. Rust doesn‚Äôt have the null feature that many other languages have. Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null.  In his  presentation ‚ÄúNull References: The Billion Dollar Mistake,‚Äù Tony Hoare, the inventor of null, has this to say:  I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn‚Äôt resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.  The problem with null values is that if you try to use a null value as a not-null value, you‚Äôll get an error of some kind. Because this null or not-null property is pervasive, it‚Äôs extremely easy to make this kind of error.  However, the concept that null is trying to express is still a useful one: a null is a value that is currently invalid or absent for some reason.  The problem isn‚Äôt really with the concept but with the particular implementation. As such, Rust does not have nulls, but it does have an enum that can encode the concept of a value being present or absent. This enum is Option<T>, and it is defined by the standard library as follows:  The Option<T> enum is so useful that it‚Äôs even included in the prelude; you don‚Äôt need to bring it into scope explicitly. Its variants are also included in the prelude: you can use Some and None directly without the Option:: prefix. The Option<T> enum is still just a regular enum, and Some(T) and None are still variants of type Option<T>.  The <T> syntax is a feature of Rust we haven‚Äôt talked about yet. It‚Äôs a generic type parameter, and we‚Äôll cover generics in more detail in Chapter . For now, all you need to know is that <T> means that the Some variant of the Option enum can hold one piece of data of any type, and that each concrete type that gets used in place of T makes the overall Option<T> type a different type. Here are some examples of using Option values to hold number types and string types:  The type of some_number is Option<i>. The type of some_char is Option<char>, which is a different type. Rust can infer these types because we‚Äôve specified a value inside the Some variant. For absent_number, Rust requires us to annotate the overall Option type: the compiler can‚Äôt infer the type that the corresponding Some variant will hold by looking only at a None value. Here, we tell Rust that we mean for absent_number to be of type Option<i>.  When we have a Some value, we know that a value is present and the value is held within the Some. When we have a None value, in some sense it means the same thing as null: we don‚Äôt have a valid value. So why is having Option<T> any better than having null?  In short, because Option<T> and T (where T can be any type) are different types, the compiler won‚Äôt let us use an Option<T> value as if it were definitely a valid value. For example, this code won‚Äôt compile, because it‚Äôs trying to add an i to an Option<i>:  If we run this code, we get an error message like this one:  Intense! In effect, this error message means that Rust doesn‚Äôt understand how to add an i and an Option<i>, because they‚Äôre different types. When we have a value of a type like i in Rust, the compiler will ensure that we always have a valid value. We can proceed confidently without having to check for null before using that value. Only when we have an Option<i> (or whatever type of value we‚Äôre working with) do we have to worry about possibly not having a value, and the compiler will make sure we handle that case before using the value.  In other words, you have to convert an Option<T> to a T before you can perform T operations with it. Generally, this helps catch one of the most common issues with null: assuming that something isn‚Äôt null when it actually is.  Eliminating the risk of incorrectly assuming a not-null value helps you to be more confident in your code. In order to have a value that can possibly be null, you must explicitly opt in by making the type of that value Option<T>. Then, when you use that value, you are required to explicitly handle the case when the value is null. Everywhere that a value has a type that isn‚Äôt an Option<T>, you can safely assume that the value isn‚Äôt null. This was a deliberate design decision for Rust to limit null‚Äôs pervasiveness and increase the safety of Rust code.  So how do you get the T value out of a Some variant when you have a value of type Option<T> so that you can use that value? The Option<T> enum has a large number of methods that are useful in a variety of situations; you can check them out in its documentation. Becoming familiar with the methods on Option<T> will be extremely useful in your journey with Rust.  In general, in order to use an Option<T> value, you want to have code that will handle each variant. You want some code that will run only when you have a Some(T) value, and this code is allowed to use the inner T. You want some other code to run only if you have a None value, and that code doesn‚Äôt have a T value available. The match expression is a control flow construct that does just this when used with enums: it will run different code depending on which variant of the enum it has, and that code can use the data inside the matching value.   The match Control Flow Construct Rust has an extremely powerful control flow construct called match that allows you to compare a value against a series of patterns and then execute code based on which pattern matches. Patterns can be made up of literal values, variable names, wildcards, and many other things; Chapter  covers all the different kinds of patterns and what they do. The power of match comes from the expressiveness of the patterns and the fact that the compiler confirms that all possible cases are handled.  Think of a match expression as being like a coin-sorting machine: coins slide down a track with variously sized holes along it, and each coin falls through the first hole it encounters that it fits into. In the same way, values go through each pattern in a match, and at the first pattern the value ‚Äúfits,‚Äù the value falls into the associated code block to be used during execution.  Speaking of coins, let‚Äôs use them as an example using match! We can write a function that takes an unknown US coin and, in a similar way as the counting machine, determines which coin it is and returns its value in cents, as shown in Listing -.  Listing -: An enum and a match expression that has the variants of the enum as its patterns  Let‚Äôs break down the match in the value_in_cents function. First we list the match keyword followed by an expression, which in this case is the value coin. This seems very similar to a conditional expression used with if, but there‚Äôs a big difference: with if, the condition needs to evaluate to a Boolean value, but here it can be any type. The type of coin in this example is the Coin enum that we defined on the first line.  Next are the match arms. An arm has two parts: a pattern and some code. The first arm here has a pattern that is the value Coin::Penny and then the => operator that separates the pattern and the code to run. The code in this case is just the value . Each arm is separated from the next with a comma.  When the match expression executes, it compares the resultant value against the pattern of each arm, in order. If a pattern matches the value, the code associated with that pattern is executed. If that pattern doesn‚Äôt match the value, execution continues to the next arm, much as in a coin-sorting machine. We can have as many arms as we need: in Listing -, our match has four arms.  The code associated with each arm is an expression, and the resultant value of the expression in the matching arm is the value that gets returned for the entire match expression.  We don‚Äôt typically use curly brackets if the match arm code is short, as it is in Listing - where each arm just returns a value. If you want to run multiple lines of code in a match arm, you must use curly brackets, and the comma following the arm is then optional. For example, the following code prints ‚ÄúLucky penny!‚Äù every time the method is called with a Coin::Penny, but still returns the last value of the block, :  Patterns That Bind to Values Another useful feature of match arms is that they can bind to the parts of the values that match the pattern. This is how we can extract values out of enum variants.  As an example, let‚Äôs change one of our enum variants to hold data inside it. From  through , the United States minted quarters with different designs for each of the  states on one side. No other coins got state designs, so only quarters have this extra value. We can add this information to our enum by changing the Quarter variant to include a UsState value stored inside it, which we‚Äôve done in Listing -.  Listing -: A Coin enum in which the Quarter variant also holds a UsState value  Let‚Äôs imagine that a friend is trying to collect all  state quarters. While we sort our loose change by coin type, we‚Äôll also call out the name of the state associated with each quarter so that if it‚Äôs one our friend doesn‚Äôt have, they can add it to their collection.  In the match expression for this code, we add a variable called state to the pattern that matches values of the variant Coin::Quarter. When a Coin::Quarter matches, the state variable will bind to the value of that quarter‚Äôs state. Then we can use state in the code for that arm, like so:  If we were to call value_in_cents(Coin::Quarter(UsState::Alaska)), coin would be Coin::Quarter(UsState::Alaska). When we compare that value with each of the match arms, none of them match until we reach Coin::Quarter(state). At that point, the binding for state will be the value UsState::Alaska. We can then use that binding in the println! expression, thus getting the inner state value out of the Coin enum variant for Quarter.  Matching with Option<T> In the previous section, we wanted to get the inner T value out of the Some case when using Option<T>; we can also handle Option<T> using match, as we did with the Coin enum! Instead of comparing coins, we‚Äôll compare the variants of Option<T>, but the way the match expression works remains the same.  Let‚Äôs say we want to write a function that takes an Option<i> and, if there‚Äôs a value inside, adds  to that value. If there isn‚Äôt a value inside, the function should return the None value and not attempt to perform any operations.  This function is very easy to write, thanks to match, and will look like Listing -.  Listing -: A function that uses a match expression on an Option<i>  Let‚Äôs examine the first execution of plus_one in more detail. When we call plus_one(five), the variable x in the body of plus_one will have the value Some(). We then compare that against each match arm:  The Some() value doesn‚Äôt match the pattern None, so we continue to the next arm:  Does Some() match Some(i)? It does! We have the same variant. The i binds to the value contained in Some, so i takes the value . The code in the match arm is then executed, so we add  to the value of i and create a new Some value with our total  inside.  Now let‚Äôs consider the second call of plus_one in Listing -, where x is None. We enter the match and compare to the first arm:  It matches! There‚Äôs no value to add to, so the program stops and returns the None value on the right side of =>. Because the first arm matched, no other arms are compared.  Combining match and enums is useful in many situations. You‚Äôll see this pattern a lot in Rust code: match against an enum, bind a variable to the data inside, and then execute code based on it. It‚Äôs a bit tricky at first, but once you get used to it, you‚Äôll wish you had it in all languages. It‚Äôs consistently a user favorite.  Matches Are Exhaustive There‚Äôs one other aspect of match we need to discuss: the arms‚Äô patterns must cover all possibilities. Consider this version of our plus_one function, which has a bug and won‚Äôt compile:  We didn‚Äôt handle the None case, so this code will cause a bug. Luckily, it‚Äôs a bug Rust knows how to catch. If we try to compile this code, we‚Äôll get this error:  Rust knows that we didn‚Äôt cover every possible case, and even knows which pattern we forgot! Matches in Rust are exhaustive: we must exhaust every last possibility in order for the code to be valid. Especially in the case of Option<T>, when Rust prevents us from forgetting to explicitly handle the None case, it protects us from assuming that we have a value when we might have null, thus making the billion-dollar mistake discussed earlier impossible.  Catch-all Patterns and the _ Placeholder Using enums, we can also take special actions for a few particular values, but for all other values take one default action. Imagine we‚Äôre implementing a game where, if you roll a  on a dice roll, your player doesn‚Äôt move, but instead gets a new fancy hat. If you roll a , your player loses a fancy hat. For all other values, your player moves that number of spaces on the game board. Here‚Äôs a match that implements that logic, with the result of the dice roll hardcoded rather than a random value, and all other logic represented by functions without bodies because actually implementing them is out of scope for this example:  For the first two arms, the patterns are the literal values  and . For the last arm that covers every other possible value, the pattern is the variable we‚Äôve chosen to name other. The code that runs for the other arm uses the variable by passing it to the move_player function.  This code compiles, even though we haven‚Äôt listed all the possible values a u can have, because the last pattern will match all values not specifically listed. This catch-all pattern meets the requirement that match must be exhaustive. Note that we have to put the catch-all arm last because the patterns are evaluated in order. If we put the catch-all arm earlier, the other arms would never run, so Rust will warn us if we add arms after a catch-all!  Rust also has a pattern we can use when we want a catch-all but don‚Äôt want to use the value in the catch-all pattern: _ is a special pattern that matches any value and does not bind to that value. This tells Rust we aren‚Äôt going to use the value, so Rust won‚Äôt warn us about an unused variable.  Let‚Äôs change the rules of the game: now, if you roll anything other than a  or a , you must roll again. We no longer need to use the catch-all value, so we can change our code to use _ instead of the variable named other:  This example also meets the exhaustiveness requirement because we‚Äôre explicitly ignoring all other values in the last arm; we haven‚Äôt forgotten anything.  Finally, we‚Äôll change the rules of the game one more time so that nothing else happens on your turn if you roll anything other than a  or a . We can express that by using the unit value (the empty tuple type we mentioned in ‚ÄúThe Tuple Type‚Äù section) as the code that goes with the _ arm:  Here, we‚Äôre telling Rust explicitly that we aren‚Äôt going to use any other value that doesn‚Äôt match a pattern in an earlier arm, and we don‚Äôt want to run any code in this case.  There‚Äôs more about patterns and matching that we‚Äôll cover in Chapter . For now, we‚Äôre going to move on to the if let syntax, which can be useful in situations where the match expression is a bit wordy.  Concise Control Flow with if let The if let syntax lets you combine if and let into a less verbose way to handle values that match one pattern while ignoring the rest. Consider the program in Listing - that matches on an Option<u> value in the config_max variable but only wants to execute code if the value is the Some variant.  Listing -: A match that only cares about executing code when the value is Some  If the value is Some, we print out the value in the Some variant by binding the value to the variable max in the pattern. We don‚Äôt want to do anything with the None value. To satisfy the match expression, we have to add _ => () after processing just one variant, which is annoying boilerplate code to add.  Instead, we could write this in a shorter way using if let. The following code behaves the same as the match in Listing -:  The syntax if let takes a pattern and an expression separated by an equal sign. It works the same way as a match, where the expression is given to the match and the pattern is its first arm. In this case, the pattern is Some(max), and the max binds to the value inside the Some. We can then use max in the body of the if let block in the same way we used max in the corresponding match arm. The code in the if let block isn‚Äôt run if the value doesn‚Äôt match the pattern.  Using if let means less typing, less indentation, and less boilerplate code. However, you lose the exhaustive checking that match enforces. Choosing between match and if let depends on what you‚Äôre doing in your particular situation and whether gaining conciseness is an appropriate trade-off for losing exhaustive checking.  In other words, you can think of if let as syntax sugar for a match that runs code when the value matches one pattern and then ignores all other values.  We can include an else with an if let. The block of code that goes with the else is the same as the block of code that would go with the _ case in the match expression that is equivalent to the if let and else. Recall the Coin enum definition in Listing -, where the Quarter variant also held a UsState value. If we wanted to count all non-quarter coins we see while also announcing the state of the quarters, we could do that with a match expression, like this:  Or we could use an if let and else expression, like this:  If you have a situation in which your program has logic that is too verbose to express using a match, remember that if let is in your Rust toolbox as well.  Summary We‚Äôve now covered how to use enums to create custom types that can be one of a set of enumerated values. We‚Äôve shown how the standard library‚Äôs Option<T> type helps you use the type system to prevent errors. When enum values have data inside them, you can use match or if let to extract and use those values, depending on how many cases you need to handle.  Your Rust programs can now express concepts in your domain using structs and enums. Creating custom types to use in your API ensures type safety: the compiler will make certain your functions only get values of the type each function expects.  In order to provide a well-organized API to your users that is straightforward to use and only exposes exactly what your users will need, let‚Äôs now turn to Rust‚Äôs modules.  Managing Growing Projects with Packages, Crates, and Modules As you write large programs, organizing your code will become increasingly important. By grouping related functionality and separating code with distinct features, you‚Äôll clarify where to find code that implements a particular feature and where to go to change how a feature works.  The programs we‚Äôve written so far have been in one module in one file. As a project grows, you should organize code by splitting it into multiple modules and then multiple files. A package can contain multiple binary crates and optionally one library crate. As a package grows, you can extract parts into separate crates that become external dependencies. This chapter covers all these techniques. For very large projects comprising a set of interrelated packages that evolve together, Cargo provides workspaces, which we‚Äôll cover in the ‚ÄúCargo Workspaces‚Äù section in Chapter .  We‚Äôll also discuss encapsulating implementation details, which lets you reuse code at a higher level: once you‚Äôve implemented an operation, other code can call your code via its public interface without having to know how the implementation works. The way you write code defines which parts are public for other code to use and which parts are private implementation details that you reserve the right to change. This is another way to limit the amount of detail you have to keep in your head.  A related concept is scope: the nested context in which code is written has a set of names that are defined as ‚Äúin scope.‚Äù When reading, writing, and compiling code, programmers and compilers need to know whether a particular name at a particular spot refers to a variable, function, struct, enum, module, constant, or other item and what that item means. You can create scopes and change which names are in or out of scope. You can‚Äôt have two items with the same name in the same scope; tools are available to resolve name conflicts.  Rust has a number of features that allow you to manage your code‚Äôs organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the module system, include:  Packages: A Cargo feature that lets you build, test, and share crates Crates: A tree of modules that produces a library or executable Modules and use: Let you control the organization, scope, and privacy of paths Paths: A way of naming an item, such as a struct, function, or module In this chapter, we‚Äôll cover all these features, discuss how they interact, and explain how to use them to manage scope. By the end, you should have a solid understanding of the module system and be able to work with scopes like a pro!  Packages and Crates The first parts of the module system we‚Äôll cover are packages and crates.  A crate is the smallest amount of code that the Rust compiler considers at a time. Even if you run rustc rather than cargo and pass a single source code file (as we did all the way back in the ‚ÄúWriting and Running a Rust Program‚Äù section of Chapter ), the compiler considers that file to be a crate. Crates can contain modules, and the modules may be defined in other files that get compiled with the crate, as we‚Äôll see in the coming sections.  A crate can come in one of two forms: a binary crate or a library crate. Binary crates are programs you can compile to an executable that you can run, such as a command-line program or a server. Each must have a function called main that defines what happens when the executable runs. All the crates we‚Äôve created so far have been binary crates.  Library crates don‚Äôt have a main function, and they don‚Äôt compile to an executable. Instead, they define functionality intended to be shared with multiple projects. For example, the rand crate we used in Chapter  provides functionality that generates random numbers. Most of the time when Rustaceans say ‚Äúcrate‚Äù, they mean library crate, and they use ‚Äúcrate‚Äù interchangeably with the general programming concept of a ‚Äúlibrary".  The crate root is a source file that the Rust compiler starts from and makes up the root module of your crate (we‚Äôll explain modules in depth in the ‚ÄúDefining Modules to Control Scope and Privacy‚Äù section).  A package is a bundle of one or more crates that provides a set of functionality. A package contains a Cargo.toml file that describes how to build those crates. Cargo is actually a package that contains the binary crate for the command-line tool you‚Äôve been using to build your code. The Cargo package also contains a library crate that the binary crate depends on. Other projects can depend on the Cargo library crate to use the same logic the Cargo command-line tool uses.  A package can contain as many binary crates as you like, but at most only one library crate. A package must contain at least one crate, whether that‚Äôs a library or binary crate.  Let‚Äôs walk through what happens when we create a package. First, we enter the command cargo new:  After we run cargo new, we use ls to see what Cargo creates. In the project directory, there‚Äôs a Cargo.toml file, giving us a package. There‚Äôs also a src directory that contains main.rs. Open Cargo.toml in your text editor, and note there‚Äôs no mention of src/main.rs. Cargo follows a convention that src/main.rs is the crate root of a binary crate with the same name as the package. Likewise, Cargo knows that if the package directory contains src/lib.rs, the package contains a library crate with the same name as the package, and src/lib.rs is its crate root. Cargo passes the crate root files to rustc to build the library or binary.  Here, we have a package that only contains src/main.rs, meaning it only contains a binary crate named my-project. If a package contains src/main.rs and src/lib.rs, it has two crates: a binary and a library, both with the same name as the package. A package can have multiple binary crates by placing files in the src/bin directory: each file will be a separate binary crate.  Defining Modules to Control Scope and Privacy In this section, we‚Äôll talk about modules and other parts of the module system, namely paths that allow you to name items; the use keyword that brings a path into scope; and the pub keyword to make items public. We‚Äôll also discuss the as keyword, external packages, and the glob operator.  First, we‚Äôre going to start with a list of rules for easy reference when you‚Äôre organizing your code in the future. Then we‚Äôll explain each of the rules in detail.  Modules Cheat Sheet Here we provide a quick reference on how modules, paths, the use keyword, and the pub keyword work in the compiler, and how most developers organize their code. We‚Äôll be going through examples of each of these rules throughout this chapter, but this is a great place to refer to as a reminder of how modules work.  Start from the crate root: When compiling a crate, the compiler first looks in the crate root file (usually src/lib.rs for a library crate or src/main.rs for a binary crate) for code to compile. Declaring modules: In the crate root file, you can declare new modules; say, you declare a ‚Äúgarden‚Äù module with mod garden;. The compiler will look for the module‚Äôs code in these places: Inline, within curly brackets that replace the semicolon following mod garden In the file src/garden.rs In the file src/garden/mod.rs Declaring submodules: In any file other than the crate root, you can declare submodules. For example, you might declare mod vegetables; in src/garden.rs. The compiler will look for the submodule‚Äôs code within the directory named for the parent module in these places: Inline, directly following mod vegetables, within curly brackets instead of the semicolon In the file src/garden/vegetables.rs In the file src/garden/vegetables/mod.rs Paths to code in modules: Once a module is part of your crate, you can refer to code in that module from anywhere else in that same crate, as long as the privacy rules allow, using the path to the code. For example, an Asparagus type in the garden vegetables module would be found at crate::garden::vegetables::Asparagus. Private vs public: Code within a module is private from its parent modules by default. To make a module public, declare it with pub mod instead of mod. To make items within a public module public as well, use pub before their declarations. The use keyword: Within a scope, the use keyword creates shortcuts to items to reduce repetition of long paths. In any scope that can refer to crate::garden::vegetables::Asparagus, you can create a shortcut with use crate::garden::vegetables::Asparagus; and from then on you only need to write Asparagus to make use of that type in the scope. Here we create a binary crate named backyard that illustrates these rules. The crate‚Äôs directory, also named backyard, contains these files and directories:  The crate root file in this case is src/main.rs, and it contains:  Filename: src/main.rs  The pub mod garden; line tells the compiler to include the code it finds in src/garden.rs, which is:  Filename: src/garden.rs  Here, pub mod vegetables; means the code in src/garden/vegetables.rs is included too. That code is:  Now let‚Äôs get into the details of these rules and demonstrate them in action!  Grouping Related Code in Modules Modules let us organize code within a crate for readability and easy reuse. Modules also allow us to control the privacy of items, because code within a module is private by default. Private items are internal implementation details not available for outside use. We can choose to make modules and the items within them public, which exposes them to allow external code to use and depend on them.  As an example, let‚Äôs write a library crate that provides the functionality of a restaurant. We‚Äôll define the signatures of functions but leave their bodies empty to concentrate on the organization of the code, rather than the implementation of a restaurant.  In the restaurant industry, some parts of a restaurant are referred to as front of house and others as back of house. Front of house is where customers are; this encompasses where the hosts seat customers, servers take orders and payment, and bartenders make drinks. Back of house is where the chefs and cooks work in the kitchen, dishwashers clean up, and managers do administrative work.  To structure our crate in this way, we can organize its functions into nested modules. Create a new library named restaurant by running cargo new restaurant --lib; then enter the code in Listing - into src/lib.rs to define some modules and function signatures. Here‚Äôs the front of house section:  Filename: src/lib.rs  Listing -: A front_of_house module containing other modules that then contain functions  We define a module with the mod keyword followed by the name of the module (in this case, front_of_house). The body of the module then goes inside curly brackets. Inside modules, we can place other modules, as in this case with the modules hosting and serving. Modules can also hold definitions for other items, such as structs, enums, constants, traits, and‚Äîas in Listing -‚Äîfunctions.  By using modules, we can group related definitions together and name why they‚Äôre related. Programmers using this code can navigate the code based on the groups rather than having to read through all the definitions, making it easier to find the definitions relevant to them. Programmers adding new functionality to this code would know where to place the code to keep the program organized.  Earlier, we mentioned that src/main.rs and src/lib.rs are called crate roots. The reason for their name is that the contents of either of these two files form a module named crate at the root of the crate‚Äôs module structure, known as the module tree.  Listing - shows the module tree for the structure in Listing -.  Listing -: The module tree for the code in Listing -  This tree shows how some of the modules nest inside one another; for example, hosting nests inside front_of_house. The tree also shows that some modules are siblings to each other, meaning they‚Äôre defined in the same module; hosting and serving are siblings defined within front_of_house. If module A is contained inside module B, we say that module A is the child of module B and that module B is the parent of module A. Notice that the entire module tree is rooted under the implicit module named crate.  The module tree might remind you of the filesystem‚Äôs directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.  Paths for Referring to an Item in the Module Tree To show Rust where to find an item in a module tree, we use a path in the same way we use a path when navigating a filesystem. To call a function, we need to know its path.  A path can take two forms:  An absolute path is the full path starting from a crate root; for code from an external crate, the absolute path begins with the crate name, and for code from the current crate, it starts with the literal crate. A relative path starts from the current module and uses self, super, or an identifier in the current module. Both absolute and relative paths are followed by one or more identifiers separated by double colons (::).  Returning to Listing -, say we want to call the add_to_waitlist function. This is the same as asking: what‚Äôs the path of the add_to_waitlist function? Listing - contains Listing - with some of the modules and functions removed.  We‚Äôll show two ways to call the add_to_waitlist function from a new function eat_at_restaurant defined in the crate root. These paths are correct, but there‚Äôs another problem remaining that will prevent this example from compiling as-is. We‚Äôll explain why in a bit.  The eat_at_restaurant function is part of our library crate‚Äôs public API, so we mark it with the pub keyword. In the ‚ÄúExposing Paths with the pub Keyword‚Äù section, we‚Äôll go into more detail about pub.  Filename: src/lib.rs  Listing -: Calling the add_to_waitlist function using absolute and relative paths  The first time we call the add_to_waitlist function in eat_at_restaurant, we use an absolute path. The add_to_waitlist function is defined in the same crate as eat_at_restaurant, which means we can use the crate keyword to start an absolute path. We then include each of the successive modules until we make our way to add_to_waitlist. You can imagine a filesystem with the same structure: we‚Äôd specify the path /front_of_house/hosting/add_to_waitlist to run the add_to_waitlist program; using the crate name to start from the crate root is like using / to start from the filesystem root in your shell.  The second time we call add_to_waitlist in eat_at_restaurant, we use a relative path. The path starts with front_of_house, the name of the module defined at the same level of the module tree as eat_at_restaurant. Here the filesystem equivalent would be using the path front_of_house/hosting/add_to_waitlist. Starting with a module name means that the path is relative.  Choosing whether to use a relative or absolute path is a decision you‚Äôll make based on your project, and depends on whether you‚Äôre more likely to move item definition code separately from or together with the code that uses the item. For example, if we move the front_of_house module and the eat_at_restaurant function into a module named customer_experience, we‚Äôd need to update the absolute path to add_to_waitlist, but the relative path would still be valid. However, if we moved the eat_at_restaurant function separately into a module named dining, the absolute path to the add_to_waitlist call would stay the same, but the relative path would need to be updated. Our preference in general is to specify absolute paths because it‚Äôs more likely we‚Äôll want to move code definitions and item calls independently of each other.  Let‚Äôs try to compile Listing - and find out why it won‚Äôt compile yet! The error we get is shown in Listing -.  Listing -: Compiler errors from building the code in Listing -  The error messages say that module hosting is private. In other words, we have the correct paths for the hosting module and the add_to_waitlist function, but Rust won‚Äôt let us use them because it doesn‚Äôt have access to the private sections. In Rust, all items (functions, methods, structs, enums, modules, and constants) are private to parent modules by default. If you want to make an item like a function or struct private, you put it in a module.  Items in a parent module can‚Äôt use the private items inside child modules, but items in child modules can use the items in their ancestor modules. This is because child modules wrap and hide their implementation details, but the child modules can see the context in which they‚Äôre defined. To continue with our metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant they operate.  Rust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. However, Rust does give you the option to expose inner parts of child modules‚Äô code to outer ancestor modules by using the pub keyword to make an item public.  Exposing Paths with the pub Keyword Let‚Äôs return to the error in Listing - that told us the hosting module is private. We want the eat_at_restaurant function in the parent module to have access to the add_to_waitlist function in the child module, so we mark the hosting module with the pub keyword, as shown in Listing -.  Filename: src/lib.rs  Listing -: Declaring the hosting module as pub to use it from eat_at_restaurant  Unfortunately, the code in Listing - still results in an error, as shown in Listing -.  Listing -: Compiler errors from building the code in Listing -  What happened? Adding the pub keyword in front of mod hosting makes the module public. With this change, if we can access front_of_house, we can access hosting. But the contents of hosting are still private; making the module public doesn‚Äôt make its contents public. The pub keyword on a module only lets code in its ancestor modules refer to it, not access its inner code. Because modules are containers, there‚Äôs not much we can do by only making the module public; we need to go further and choose to make one or more of the items within the module public as well.  The errors in Listing - say that the add_to_waitlist function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.  Let‚Äôs also make the add_to_waitlist function public by adding the pub keyword before its definition, as in Listing -.  Filename: src/lib.rs  Listing -: Adding the pub keyword to mod hosting and fn add_to_waitlist lets us call the function from eat_at_restaurant  Now the code will compile! To see why adding the pub keyword lets us use these paths in eat_at_restaurant with respect to the privacy rules, let‚Äôs look at the absolute and the relative paths.  In the absolute path, we start with crate, the root of our crate‚Äôs module tree. The front_of_house module is defined in the crate root. While front_of_house isn‚Äôt public, because the eat_at_restaurant function is defined in the same module as front_of_house (that is, eat_at_restaurant and front_of_house are siblings), we can refer to front_of_house from eat_at_restaurant. Next is the hosting module marked with pub. We can access the parent module of hosting, so we can access hosting. Finally, the add_to_waitlist function is marked with pub and we can access its parent module, so this function call works!  In the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from front_of_house. The front_of_house module is defined within the same module as eat_at_restaurant, so the relative path starting from the module in which eat_at_restaurant is defined works. Then, because hosting and add_to_waitlist are marked with pub, the rest of the path works, and this function call is valid!  If you plan on sharing your library crate so other projects can use your code, your public API is your contract with users of your crate that determines how they can interact with your code. There are many considerations around managing changes to your public API to make it easier for people to depend on your crate. These considerations are out of the scope of this book; if you‚Äôre interested in this topic, see The Rust API Guidelines.  Best Practices for Packages with a Binary and a Library We mentioned a package can contain both a src/main.rs binary crate root as well as a src/lib.rs library crate root, and both crates will have the package name by default. Typically, packages with this pattern of containing both a library and a binary crate will have just enough code in the binary crate to start an executable that calls code within the library crate. This lets other projects benefit from most of the functionality that the package provides, because the library crate‚Äôs code can be shared.  The module tree should be defined in src/lib.rs. Then, any public items can be used in the binary crate by starting paths with the name of the package. The binary crate becomes a user of the library crate just like a completely external crate would use the library crate: it can only use the public API. This helps you design a good API; not only are you the author, you‚Äôre also a client!  In Chapter , we‚Äôll demonstrate this organizational practice with a command-line program that will contain both a binary crate and a library crate.  Starting Relative Paths with super We can construct relative paths that begin in the parent module, rather than the current module or the crate root, by using super at the start of the path. This is like starting a filesystem path with the .. syntax. Using super allows us to reference an item that we know is in the parent module, which can make rearranging the module tree easier when the module is closely related to the parent, but the parent might be moved elsewhere in the module tree someday.  Consider the code in Listing - that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer. The function fix_incorrect_order defined in the back_of_house module calls the function deliver_order defined in the parent module by specifying the path to deliver_order starting with super:  Filename: src/lib.rs  Listing -: Calling a function using a relative path starting with super  The fix_incorrect_order function is in the back_of_house module, so we can use super to go to the parent module of back_of_house, which in this case is crate, the root. From there, we look for deliver_order and find it. Success! We think the back_of_house module and the deliver_order function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate‚Äôs module tree. Therefore, we used super so we‚Äôll have fewer places to update code in the future if this code gets moved to a different module.  Making Structs and Enums Public We can also use pub to designate structs and enums as public, but there are a few details extra to the usage of pub with structs and enums. If we use pub before a struct definition, we make the struct public, but the struct‚Äôs fields will still be private. We can make each field public or not on a case-by-case basis. In Listing -, we‚Äôve defined a public back_of_house::Breakfast struct with a public toast field but a private seasonal_fruit field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what‚Äôs in season and in stock. The available fruit changes quickly, so customers can‚Äôt choose the fruit or even see which fruit they‚Äôll get.  Filename: src/lib.rs  Listing -: A struct with some public fields and some private fields  Because the toast field in the back_of_house::Breakfast struct is public, in eat_at_restaurant we can write and read to the toast field using dot notation. Notice that we can‚Äôt use the seasonal_fruit field in eat_at_restaurant because seasonal_fruit is private. Try uncommenting the line modifying the seasonal_fruit field value to see what error you get!  Also, note that because back_of_house::Breakfast has a private field, the struct needs to provide a public associated function that constructs an instance of Breakfast (we‚Äôve named it summer here). If Breakfast didn‚Äôt have such a function, we couldn‚Äôt create an instance of Breakfast in eat_at_restaurant because we couldn‚Äôt set the value of the private seasonal_fruit field in eat_at_restaurant.  In contrast, if we make an enum public, all of its variants are then public. We only need the pub before the enum keyword, as shown in Listing -.  Filename: src/lib.rs  Listing -: Designating an enum as public makes all its variants public  Because we made the Appetizer enum public, we can use the Soup and Salad variants in eat_at_restaurant.  Enums aren‚Äôt very useful unless their variants are public; it would be annoying to have to annotate all enum variants with pub in every case, so the default for enum variants is to be public. Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with pub.  There‚Äôs one more situation involving pub that we haven‚Äôt covered, and that is our last module system feature: the use keyword. We‚Äôll cover use by itself first, and then we‚Äôll show how to combine pub and use.  Bringing Paths into Scope with the use Keyword Having to write out the paths to call functions can feel inconvenient and repetitive. In Listing -, whether we chose the absolute or relative path to the add_to_waitlist function, every time we wanted to call add_to_waitlist we had to specify front_of_house and hosting too. Fortunately, there‚Äôs a way to simplify this process: we can create a shortcut to a path with the use keyword once, and then use the shorter name everywhere else in the scope.  In Listing -, we bring the crate::front_of_house::hosting module into the scope of the eat_at_restaurant function so we only have to specify hosting::add_to_waitlist to call the add_to_waitlist function in eat_at_restaurant.  Filename: src/lib.rs  Listing -: Bringing a module into scope with use  Adding use and a path in a scope is similar to creating a symbolic link in the filesystem. By adding use crate::front_of_house::hosting in the crate root, hosting is now a valid name in that scope, just as though the hosting module had been defined in the crate root. Paths brought into scope with use also check privacy, like any other paths.  Note that use only creates the shortcut for the particular scope in which the use occurs. Listing - moves the eat_at_restaurant function into a new child module named customer, which is then a different scope than the use statement, so the function body won‚Äôt compile:  Filename: src/lib.rs  Listing -: A use statement only applies in the scope it‚Äôs in  The compiler error shows that the shortcut no longer applies within the customer module:  Notice there‚Äôs also a warning that the use is no longer used in its scope! To fix this problem, move the use within the customer module too, or reference the shortcut in the parent module with super::hosting within the child customer module.  Creating Idiomatic use Paths In Listing -, you might have wondered why we specified use crate::front_of_house::hosting and then called hosting::add_to_waitlist in eat_at_restaurant rather than specifying the use path all the way out to the add_to_waitlist function to achieve the same result, as in Listing -.  Filename: src/lib.rs  Listing -: Bringing the add_to_waitlist function into scope with use, which is unidiomatic  Although both Listing - and - accomplish the same task, Listing - is the idiomatic way to bring a function into scope with use. Bringing the function‚Äôs parent module into scope with use means we have to specify the parent module when calling the function. Specifying the parent module when calling the function makes it clear that the function isn‚Äôt locally defined while still minimizing repetition of the full path. The code in Listing - is unclear as to where add_to_waitlist is defined.  On the other hand, when bringing in structs, enums, and other items with use, it‚Äôs idiomatic to specify the full path. Listing - shows the idiomatic way to bring the standard library‚Äôs HashMap struct into the scope of a binary crate.  Filename: src/main.rs  Listing -: Bringing HashMap into scope in an idiomatic way  There‚Äôs no strong reason behind this idiom: it‚Äôs just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.  The exception to this idiom is if we‚Äôre bringing two items with the same name into scope with use statements, because Rust doesn‚Äôt allow that. Listing - shows how to bring two Result types into scope that have the same name but different parent modules and how to refer to them.  Filename: src/lib.rs  Listing -: Bringing two types with the same name into the same scope requires using their parent modules.  As you can see, using the parent modules distinguishes the two Result types. If instead we specified use std::fmt::Result and use std::io::Result, we‚Äôd have two Result types in the same scope and Rust wouldn‚Äôt know which one we meant when we used Result.  Providing New Names with the as Keyword There‚Äôs another solution to the problem of bringing two types of the same name into the same scope with use: after the path, we can specify as and a new local name, or alias, for the type. Listing - shows another way to write the code in Listing - by renaming one of the two Result types using as.  Filename: src/lib.rs  Listing -: Renaming a type when it‚Äôs brought into scope with the as keyword  In the second use statement, we chose the new name IoResult for the std::io::Result type, which won‚Äôt conflict with the Result from std::fmt that we‚Äôve also brought into scope. Listing - and Listing - are considered idiomatic, so the choice is up to you!  Re-exporting Names with pub use When we bring a name into scope with the use keyword, the name available in the new scope is private. To enable the code that calls our code to refer to that name as if it had been defined in that code‚Äôs scope, we can combine pub and use. This technique is called re-exporting because we‚Äôre bringing an item into scope but also making that item available for others to bring into their scope.  Listing - shows the code in Listing - with use in the root module changed to pub use.  Filename: src/lib.rs  Listing -: Making a name available for any code to use from a new scope with pub use  Before this change, external code would have to call the add_to_waitlist function by using the path restaurant::front_of_house::hosting::add_to_waitlist(), which also would have required the front_of_house module to be marked as pub. Now that this pub use has re-exported the hosting module from the root module, external code can now use the path restaurant::hosting::add_to_waitlist() instead.  Re-exporting is useful when the internal structure of your code is different from how programmers calling your code would think about the domain. For example, in this restaurant metaphor, the people running the restaurant think about ‚Äúfront of house‚Äù and ‚Äúback of house.‚Äù But customers visiting a restaurant probably won‚Äôt think about the parts of the restaurant in those terms. With pub use, we can write our code with one structure but expose a different structure. Doing so makes our library well organized for programmers working on the library and programmers calling the library. We‚Äôll look at another example of pub use and how it affects your crate‚Äôs documentation in the ‚ÄúExporting a Convenient Public API with pub use‚Äù section of Chapter .  Using External Packages In Chapter , we programmed a guessing game project that used an external package called rand to get random numbers. To use rand in our project, we added this line to Cargo.toml:  Filename: Cargo.toml  Adding rand as a dependency in Cargo.toml tells Cargo to download the rand package and any dependencies from crates.io and make rand available to our project.  Then, to bring rand definitions into the scope of our package, we added a use line starting with the name of the crate, rand, and listed the items we wanted to bring into scope. Recall that in the ‚ÄúGenerating a Random Number‚Äù section in Chapter , we brought the Rng trait into scope and called the rand::thread_rng function:  Members of the Rust community have made many packages available at crates.io, and pulling any of them into your package involves these same steps: listing them in your package‚Äôs Cargo.toml file and using use to bring items from their crates into scope.  Note that the standard std library is also a crate that‚Äôs external to our package. Because the standard library is shipped with the Rust language, we don‚Äôt need to change Cargo.toml to include std. But we do need to refer to it with use to bring items from there into our package‚Äôs scope. For example, with HashMap we would use this line:  This is an absolute path starting with std, the name of the standard library crate.  Using Nested Paths to Clean Up Large use Lists If we‚Äôre using multiple items defined in the same crate or same module, listing each item on its own line can take up a lot of vertical space in our files. For example, these two use statements we had in the Guessing Game in Listing - bring items from std into scope:  Filename: src/main.rs  Instead, we can use nested paths to bring the same items into scope in one line. We do this by specifying the common part of the path, followed by two colons, and then curly brackets around a list of the parts of the paths that differ, as shown in Listing -.  Filename: src/main.rs  Listing -: Specifying a nested path to bring multiple items with the same prefix into scope  In bigger programs, bringing many items into scope from the same crate or module using nested paths can reduce the number of separate use statements needed by a lot!  We can use a nested path at any level in a path, which is useful when combining two use statements that share a subpath. For example, Listing - shows two use statements: one that brings std::io into scope and one that brings std::io::Write into scope.  Filename: src/lib.rs  Listing -: Two use statements where one is a subpath of the other  The common part of these two paths is std::io, and that‚Äôs the complete first path. To merge these two paths into one use statement, we can use self in the nested path, as shown in Listing -.  Filename: src/lib.rs  Listing -: Combining the paths in Listing - into one use statement  This line brings std::io and std::io::Write into scope.  The Glob Operator If we want to bring all public items defined in a path into scope, we can specify that path followed by the * glob operator:  This use statement brings all public items defined in std::collections into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.  The glob operator is often used when testing to bring everything under test into the tests module; we‚Äôll talk about that in the ‚ÄúHow to Write Tests‚Äù section in Chapter . The glob operator is also sometimes used as part of the prelude pattern: see the standard library documentation for more information on that pattern.  Separating Modules into Different Files So far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.  For example, let‚Äôs start from the code in Listing - that had multiple restaurant modules. We‚Äôll extract modules into files instead of having all the modules defined in the crate root file. In this case, the crate root file is src/lib.rs, but this procedure also works with binary crates whose crate root file is src/main.rs.  First, we‚Äôll extract the front_of_house module to its own file. Remove the code inside the curly brackets for the front_of_house module, leaving only the mod front_of_house; declaration, so that src/lib.rs contains the code shown in Listing -. Note that this won‚Äôt compile until we create the src/front_of_house.rs file in Listing -.  Filename: src/lib.rs  Listing -: Declaring the front_of_house module whose body will be in src/front_of_house.rs  Next, place the code that was in the curly brackets into a new file named src/front_of_house.rs, as shown in Listing -. The compiler knows to look in this file because it came across the module declaration in the crate root with the name front_of_house.  Filename: src/front_of_house.rs  Listing -: Definitions inside the front_of_house module in src/front_of_house.rs  Note that you only need to load a file using a mod declaration once in your module tree. Once the compiler knows the file is part of the project (and knows where in the module tree the code resides because of where you‚Äôve put the mod statement), other files in your project should refer to the loaded file‚Äôs code using a path to where it was declared, as covered in the ‚ÄúPaths for Referring to an Item in the Module Tree‚Äù section. In other words, mod is not an ‚Äúinclude‚Äù operation that you may have seen in other programming languages.  Next, we‚Äôll extract the hosting module to its own file. The process is a bit different because hosting is a child module of front_of_house, not of the root module. We‚Äôll place the file for hosting in a new directory that will be named for its ancestors in the module tree, in this case src/front_of_house/.  To start moving hosting, we change src/front_of_house.rs to contain only the declaration of the hosting module:  Filename: src/front_of_house.rs  Then we create a src/front_of_house directory and a file hosting.rs to contain the definitions made in the hosting module:  Filename: src/front_of_house/hosting.rs  If we instead put hosting.rs in the src directory, the compiler would expect the hosting.rs code to be in a hosting module declared in the crate root, and not declared as a child of the front_of_house module. The compiler‚Äôs rules for which files to check for which modules‚Äô code means the directories and files more closely match the module tree.  Alternate File Paths So far we‚Äôve covered the most idiomatic file paths the Rust compiler uses, but Rust also supports an older style of file path. For a module named front_of_house declared in the crate root, the compiler will look for the module‚Äôs code in:  src/front_of_house.rs (what we covered) src/front_of_house/mod.rs (older style, still supported path) For a module named hosting that is a submodule of front_of_house, the compiler will look for the module‚Äôs code in:  src/front_of_house/hosting.rs (what we covered) src/front_of_house/hosting/mod.rs (older style, still supported path) If you use both styles for the same module, you‚Äôll get a compiler error. Using a mix of both styles for different modules in the same project is allowed, but might be confusing for people navigating your project.  The main downside to the style that uses files named mod.rs is that your project can end up with many files named mod.rs, which can get confusing when you have them open in your editor at the same time.  We‚Äôve moved each module‚Äôs code to a separate file, and the module tree remains the same. The function calls in eat_at_restaurant will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.  Note that the pub use crate::front_of_house::hosting statement in src/lib.rs also hasn‚Äôt changed, nor does use have any impact on what files are compiled as part of the crate. The mod keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.  Summary Rust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a use statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the pub keyword.  In the next chapter, we‚Äôll look at some collection data structures in the standard library that you can use in your neatly organized code.  Common Collections Rust‚Äôs standard library includes a number of very useful data structures called collections. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs. Each kind of collection has different capabilities and costs, and choosing an appropriate one for your current situation is a skill you‚Äôll develop over time. In this chapter, we‚Äôll discuss three collections that are used very often in Rust programs:  A vector allows you to store a variable number of values next to each other. A string is a collection of characters. We‚Äôve mentioned the String type previously, but in this chapter we‚Äôll talk about it in depth. A hash map allows you to associate a value with a particular key. It‚Äôs a particular implementation of the more general data structure called a map. To learn about the other kinds of collections provided by the standard library, see the documentation.  We‚Äôll discuss how to create and update vectors, strings, and hash maps, as well as what makes each special.  Storing Lists of Values with Vectors The first collection type we‚Äôll look at is Vec<T>, also known as a vector. Vectors allow you to store more than one value in a single data structure that puts all the values next to each other in memory. Vectors can only store values of the same type. They are useful when you have a list of items, such as the lines of text in a file or the prices of items in a shopping cart.  Creating a New Vector To create a new empty vector, we call the Vec::new function, as shown in Listing -.  Listing -: Creating a new, empty vector to hold values of type i  Note that we added a type annotation here. Because we aren‚Äôt inserting any values into this vector, Rust doesn‚Äôt know what kind of elements we intend to store. This is an important point. Vectors are implemented using generics; we‚Äôll cover how to use generics with your own types in Chapter . For now, know that the Vec<T> type provided by the standard library can hold any type. When we create a vector to hold a specific type, we can specify the type within angle brackets. In Listing -, we‚Äôve told Rust that the Vec<T> in v will hold elements of the i type.  More often, you‚Äôll create a Vec<T> with initial values and Rust will infer the type of value you want to store, so you rarely need to do this type annotation. Rust conveniently provides the vec! macro, which will create a new vector that holds the values you give it. Listing - creates a new Vec<i> that holds the values , , and . The integer type is i because that‚Äôs the default integer type, as we discussed in the ‚ÄúData Types‚Äù section of Chapter .  Listing -: Creating a new vector containing values  Because we‚Äôve given initial i values, Rust can infer that the type of v is Vec<i>, and the type annotation isn‚Äôt necessary. Next, we‚Äôll look at how to modify a vector.  Updating a Vector To create a vector and then add elements to it, we can use the push method, as shown in Listing -.  Listing -: Using the push method to add values to a vector  As with any variable, if we want to be able to change its value, we need to make it mutable using the mut keyword, as discussed in Chapter . The numbers we place inside are all of type i, and Rust infers this from the data, so we don‚Äôt need the Vec<i> annotation.  Reading Elements of Vectors There are two ways to reference a value stored in a vector: via indexing or using the get method. In the following examples, we‚Äôve annotated the types of the values that are returned from these functions for extra clarity.  Listing - shows both methods of accessing a value in a vector, with indexing syntax and the get method.  Listing -: Using indexing syntax or the get method to access an item in a vector  Note a few details here. We use the index value of  to get the third element because vectors are indexed by number, starting at zero. Using & and [] gives us a reference to the element at the index value. When we use the get method with the index passed as an argument, we get an Option<&T> that we can use with match.  The reason Rust provides these two ways to reference an element is so you can choose how the program behaves when you try to use an index value outside the range of existing elements. As an example, let‚Äôs see what happens when we have a vector of five elements and then we try to access an element at index  with each technique, as shown in Listing -.  Listing -: Attempting to access the element at index  in a vector containing five elements  When we run this code, the first [] method will cause the program to panic because it references a nonexistent element. This method is best used when you want your program to crash if there‚Äôs an attempt to access an element past the end of the vector.  When the get method is passed an index that is outside the vector, it returns None without panicking. You would use this method if accessing an element beyond the range of the vector may happen occasionally under normal circumstances. Your code will then have logic to handle having either Some(&element) or None, as discussed in Chapter . For example, the index could be coming from a person entering a number. If they accidentally enter a number that‚Äôs too large and the program gets a None value, you could tell the user how many items are in the current vector and give them another chance to enter a valid value. That would be more user-friendly than crashing the program due to a typo!  When the program has a valid reference, the borrow checker enforces the ownership and borrowing rules (covered in Chapter ) to ensure this reference and any other references to the contents of the vector remain valid. Recall the rule that states you can‚Äôt have mutable and immutable references in the same scope. That rule applies in Listing -, where we hold an immutable reference to the first element in a vector and try to add an element to the end. This program won‚Äôt work if we also try to refer to that element later in the function:  Listing -: Attempting to add an element to a vector while holding a reference to an item  Compiling this code will result in this error:  The code in Listing - might look like it should work: why should a reference to the first element care about changes at the end of the vector? This error is due to the way vectors work: because vectors put the values next to each other in memory, adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space, if there isn‚Äôt enough room to put all the elements next to each other where the vector is currently stored. In that case, the reference to the first element would be pointing to deallocated memory. The borrowing rules prevent programs from ending up in that situation.  Note: For more on the implementation details of the Vec<T> type, see ‚ÄúThe Rustonomicon‚Äù.  Iterating over the Values in a Vector To access each element in a vector in turn, we would iterate through all of the elements rather than use indices to access one at a time. Listing - shows how to use a for loop to get immutable references to each element in a vector of i values and print them.  Listing -: Printing each element in a vector by iterating over the elements using a for loop  We can also iterate over mutable references to each element in a mutable vector in order to make changes to all the elements. The for loop in Listing - will add  to each element.  Listing -: Iterating over mutable references to elements in a vector  To change the value that the mutable reference refers to, we have to use the * dereference operator to get to the value in i before we can use the += operator. We‚Äôll talk more about the dereference operator in the ‚ÄúFollowing the Pointer to the Value with the Dereference Operator‚Äù section of Chapter .  Iterating over a vector, whether immutably or mutably, is safe because of the borrow checker's rules. If we attempted to insert or remove items in the for loop bodies in Listing - and Listing -, we would get a compiler error similar to the one we got with the code in Listing -. The reference to the vector that the for loop holds prevents simultaneous modification of the whole vector.  Using an Enum to Store Multiple Types Vectors can only store values that are the same type. This can be inconvenient; there are definitely use cases for needing to store a list of items of different types. Fortunately, the variants of an enum are defined under the same enum type, so when we need one type to represent elements of different types, we can define and use an enum!  For example, say we want to get values from a row in a spreadsheet in which some of the columns in the row contain integers, some floating-point numbers, and some strings. We can define an enum whose variants will hold the different value types, and all the enum variants will be considered the same type: that of the enum. Then we can create a vector to hold that enum and so, ultimately, hold different types. We‚Äôve demonstrated this in Listing -.  Listing -: Defining an enum to store values of different types in one vector  Rust needs to know what types will be in the vector at compile time so it knows exactly how much memory on the heap will be needed to store each element. We must also be explicit about what types are allowed in this vector. If Rust allowed a vector to hold any type, there would be a chance that one or more of the types would cause errors with the operations performed on the elements of the vector. Using an enum plus a match expression means that Rust will ensure at compile time that every possible case is handled, as discussed in Chapter .  If you don‚Äôt know the exhaustive set of types a program will get at runtime to store in a vector, the enum technique won‚Äôt work. Instead, you can use a trait object, which we‚Äôll cover in Chapter .  Now that we‚Äôve discussed some of the most common ways to use vectors, be sure to review the API documentation for all the many useful methods defined on Vec<T> by the standard library. For example, in addition to push, a pop method removes and returns the last element.  Dropping a Vector Drops Its Elements Like any other struct, a vector is freed when it goes out of scope, as annotated in Listing -.  Listing -: Showing where the vector and its elements are dropped  When the vector gets dropped, all of its contents are also dropped, meaning the integers it holds will be cleaned up. The borrow checker ensures that any references to contents of a vector are only used while the vector itself is valid.  Let‚Äôs move on to the next collection type: String!  Storing UTF- Encoded Text with Strings We talked about strings in Chapter , but we‚Äôll look at them in more depth now. New Rustaceans commonly get stuck on strings for a combination of three reasons: Rust‚Äôs propensity for exposing possible errors, strings being a more complicated data structure than many programmers give them credit for, and UTF-. These factors combine in a way that can seem difficult when you‚Äôre coming from other programming languages.  We discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text. In this section, we‚Äôll talk about the operations on String that every collection type has, such as creating, updating, and reading. We‚Äôll also discuss the ways in which String is different from the other collections, namely how indexing into a String is complicated by the differences between how people and computers interpret String data.  What Is a String? We‚Äôll first define what we mean by the term string. Rust has only one string type in the core language, which is the string slice str that is usually seen in its borrowed form &str. In Chapter , we talked about string slices, which are references to some UTF- encoded string data stored elsewhere. String literals, for example, are stored in the program‚Äôs binary and are therefore string slices.  The String type, which is provided by Rust‚Äôs standard library rather than coded into the core language, is a growable, mutable, owned, UTF- encoded string type. When Rustaceans refer to ‚Äústrings‚Äù in Rust, they might be referring to either the String or the string slice &str types, not just one of those types. Although this section is largely about String, both types are used heavily in Rust‚Äôs standard library, and both String and string slices are UTF- encoded.  Creating a New String Many of the same operations available with Vec<T> are available with String as well, because String is actually implemented as a wrapper around a vector of bytes with some extra guarantees, restrictions, and capabilities. An example of a function that works the same way with Vec<T> and String is the new function to create an instance, shown in Listing -.  Listing -: Creating a new, empty String  This line creates a new empty string called s, which we can then load data into. Often, we‚Äôll have some initial data that we want to start the string with. For that, we use the to_string method, which is available on any type that implements the Display trait, as string literals do. Listing - shows two examples.  Listing -: Using the to_string method to create a String from a string literal  This code creates a string containing initial contents.  We can also use the function String::from to create a String from a string literal. The code in Listing - is equivalent to the code from Listing - that uses to_string.  Listing -: Using the String::from function to create a String from a string literal  Because strings are used for so many things, we can use many different generic APIs for strings, providing us with a lot of options. Some of them can seem redundant, but they all have their place! In this case, String::from and to_string do the same thing, so which you choose is a matter of style and readability.  Remember that strings are UTF- encoded, so we can include any properly encoded data in them, as shown in Listing -.  Listing -: Storing greetings in different languages in strings  All of these are valid String values.  Updating a String A String can grow in size and its contents can change, just like the contents of a Vec<T>, if you push more data into it. In addition, you can conveniently use the + operator or the format! macro to concatenate String values.  Appending to a String with push_str and push We can grow a String by using the push_str method to append a string slice, as shown in Listing -.  Listing -: Appending a string slice to a String using the push_str method  After these two lines, s will contain foobar. The push_str method takes a string slice because we don‚Äôt necessarily want to take ownership of the parameter. For example, in the code in Listing -, we want to be able to use s after appending its contents to s.  Listing -: Using a string slice after appending its contents to a String  If the push_str method took ownership of s, we wouldn‚Äôt be able to print its value on the last line. However, this code works as we‚Äôd expect!  The push method takes a single character as a parameter and adds it to the String. Listing - adds the letter ‚Äúl‚Äù to a String using the push method.  Listing -: Adding one character to a String value using push  As a result, s will contain lol.  Concatenation with the + Operator or the format! Macro Often, you‚Äôll want to combine two existing strings. One way to do so is to use the + operator, as shown in Listing -.  Listing -: Using the + operator to combine two String values into a new String value  The string s will contain Hello, world!. The reason s is no longer valid after the addition, and the reason we used a reference to s, has to do with the signature of the method that‚Äôs called when we use the + operator. The + operator uses the add method, whose signature looks something like this:  In the standard library, you'll see add defined using generics and associated types. Here, we‚Äôve substituted in concrete types, which is what happens when we call this method with String values. We‚Äôll discuss generics in Chapter . This signature gives us the clues we need to understand the tricky bits of the + operator.  First, s has an &, meaning that we‚Äôre adding a reference of the second string to the first string. This is because of the s parameter in the add function: we can only add a &str to a String; we can‚Äôt add two String values together. But wait‚Äîthe type of &s is &String, not &str, as specified in the second parameter to add. So why does Listing - compile?  The reason we‚Äôre able to use &s in the call to add is that the compiler can coerce the &String argument into a &str. When we call the add method, Rust uses a deref coercion, which here turns &s into &s[..]. We‚Äôll discuss deref coercion in more depth in Chapter . Because add does not take ownership of the s parameter, s will still be a valid String after this operation.  Second, we can see in the signature that add takes ownership of self, because self does not have an &. This means s in Listing - will be moved into the add call and will no longer be valid after that. So although let s = s + &s; looks like it will copy both strings and create a new one, this statement actually takes ownership of s, appends a copy of the contents of s, and then returns ownership of the result. In other words, it looks like it‚Äôs making a lot of copies but isn‚Äôt; the implementation is more efficient than copying.  If we need to concatenate multiple strings, the behavior of the + operator gets unwieldy:  At this point, s will be tic-tac-toe. With all of the + and " characters, it‚Äôs difficult to see what‚Äôs going on. For more complicated string combining, we can instead use the format! macro:  This code also sets s to tic-tac-toe. The format! macro works like println!, but instead of printing the output to the screen, it returns a String with the contents. The version of the code using format! is much easier to read, and the code generated by the format! macro uses references so that this call doesn‚Äôt take ownership of any of its parameters.  Indexing into Strings In many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation. However, if you try to access parts of a String using indexing syntax in Rust, you‚Äôll get an error. Consider the invalid code in Listing -.  Listing -: Attempting to use indexing syntax with a String  This code will result in the following error:  The error and the note tell the story: Rust strings don‚Äôt support indexing. But why not? To answer that question, we need to discuss how Rust stores strings in memory.  Internal Representation A String is a wrapper over a Vec<u>. Let‚Äôs look at some of our properly encoded UTF- example strings from Listing -. First, this one:  In this case, len will be , which means the vector storing the string ‚ÄúHola‚Äù is  bytes long. Each of these letters takes  byte when encoded in UTF-. The following line, however, may surprise you. (Note that this string begins with the capital Cyrillic letter Ze, not the number .)  Asked how long the string is, you might say . In fact, Rust‚Äôs answer is : that‚Äôs the number of bytes it takes to encode ‚Äú–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚Äù in UTF-, because each Unicode scalar value in that string takes  bytes of storage. Therefore, an index into the string‚Äôs bytes will not always correlate to a valid Unicode scalar value. To demonstrate, consider this invalid Rust code:  You already know that answer will not be –ó, the first letter. When encoded in UTF-, the first byte of –ó is  and the second is , so it would seem that answer should in fact be , but  is not a valid character on its own. Returning  is likely not what a user would want if they asked for the first letter of this string; however, that‚Äôs the only data that Rust has at byte index . Users generally don‚Äôt want the byte value returned, even if the string contains only Latin letters: if &"hello"[] were valid code that returned the byte value, it would return , not h.  The answer, then, is that to avoid returning an unexpected value and causing bugs that might not be discovered immediately, Rust doesn‚Äôt compile this code at all and prevents misunderstandings early in the development process.  Bytes and Scalar Values and Grapheme Clusters! Oh My! Another point about UTF- is that there are actually three relevant ways to look at strings from Rust‚Äôs perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call letters).  If we look at the Hindi word ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù written in the Devanagari script, it is stored as a vector of u values that looks like this:  That‚Äôs  bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust‚Äôs char type is, those bytes look like this:  There are six char values here, but the fourth and sixth are not letters: they‚Äôre diacritics that don‚Äôt make sense on their own. Finally, if we look at them as grapheme clusters, we‚Äôd get what a person would call the four letters that make up the Hindi word:  Rust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.  A final reason Rust doesn‚Äôt allow us to index into a String to get a character is that indexing operations are expected to always take constant time (O()). But it isn‚Äôt possible to guarantee that performance with a String, because Rust would have to walk through the contents from the beginning to the index to determine how many valid characters there were.  Slicing Strings Indexing into a string is often a bad idea because it‚Äôs not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice. If you really need to use indices to create string slices, therefore, Rust asks you to be more specific.  Rather than indexing using [] with a single number, you can use [] with a range to create a string slice containing particular bytes:  Here, s will be a &str that contains the first  bytes of the string. Earlier, we mentioned that each of these characters was  bytes, which means s will be –ó–¥.  If we were to try to slice only part of a character‚Äôs bytes with something like &hello[..], Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:  You should use ranges to create string slices with caution, because doing so can crash your program.  Methods for Iterating Over Strings The best way to operate on pieces of strings is to be explicit about whether you want characters or bytes. For individual Unicode scalar values, use the chars method. Calling chars on ‚Äú–ó–¥‚Äù separates out and returns two values of type char, and you can iterate over the result to access each element:  This code will print the following:  Alternatively, the bytes method returns each raw byte, which might be appropriate for your domain:  This code will print the four bytes that make up this string:  But be sure to remember that valid Unicode scalar values may be made up of more than  byte.  Getting grapheme clusters from strings as with the Devanagari script is complex, so this functionality is not provided by the standard library. Crates are available on crates.io if this is the functionality you need.  Strings Are Not So Simple To summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of String data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF- data upfront. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.  The good news is that the standard library offers a lot of functionality built off the String and &str types to help handle these complex situations correctly. Be sure to check out the documentation for useful methods like contains for searching in a string and replace for substituting parts of a string with another string.  Let‚Äôs switch to something a bit less complex: hash maps!  Storing Keys with Associated Values in Hash Maps The last of our common collections is the hash map. The type HashMap<K, V> stores a mapping of keys of type K to values of type V using a hashing function, which determines how it places these keys and values into memory. Many programming languages support this kind of data structure, but they often use a different name, such as hash, map, object, hash table, dictionary, or associative array, just to name a few.  Hash maps are useful when you want to look up data not by using an index, as you can with vectors, but by using a key that can be of any type. For example, in a game, you could keep track of each team‚Äôs score in a hash map in which each key is a team‚Äôs name and the values are each team‚Äôs score. Given a team name, you can retrieve its score.  We‚Äôll go over the basic API of hash maps in this section, but many more goodies are hiding in the functions defined on HashMap<K, V> by the standard library. As always, check the standard library documentation for more information.  Creating a New Hash Map One way to create an empty hash map is using new and adding elements with insert. In Listing -, we‚Äôre keeping track of the scores of two teams whose names are Blue and Yellow. The Blue team starts with  points, and the Yellow team starts with .  Listing -: Creating a new hash map and inserting some keys and values  Note that we need to first use the HashMap from the collections portion of the standard library. Of our three common collections, this one is the least often used, so it‚Äôs not included in the features brought into scope automatically in the prelude. Hash maps also have less support from the standard library; there‚Äôs no built-in macro to construct them, for example.  Just like vectors, hash maps store their data on the heap. This HashMap has keys of type String and values of type i. Like vectors, hash maps are homogeneous: all of the keys must have the same type as each other, and all of the values must have the same type.  Accessing Values in a Hash Map We can get a value out of the hash map by providing its key to the get method, as shown in Listing -.  Listing -: Accessing the score for the Blue team stored in the hash map  Here, score will have the value that‚Äôs associated with the Blue team, and the result will be . The get method returns an Option<&V>; if there‚Äôs no value for that key in the hash map, get will return None. This program handles the Option by calling copied to get an Option<i> rather than an Option<&i>, then unwrap_or to set score to zero if scores doesn't have an entry for the key.  We can iterate over each key/value pair in a hash map in a similar manner as we do with vectors, using a for loop:  This code will print each pair in an arbitrary order:  Hash Maps and Ownership For types that implement the Copy trait, like i, the values are copied into the hash map. For owned values like String, the values will be moved and the hash map will be the owner of those values, as demonstrated in Listing -.  Listing -: Showing that keys and values are owned by the hash map once they‚Äôre inserted  We aren‚Äôt able to use the variables field_name and field_value after they‚Äôve been moved into the hash map with the call to insert.  If we insert references to values into the hash map, the values won‚Äôt be moved into the hash map. The values that the references point to must be valid for at least as long as the hash map is valid. We‚Äôll talk more about these issues in the ‚ÄúValidating References with Lifetimes‚Äù section in Chapter .  Updating a Hash Map Although the number of key and value pairs is growable, each unique key can only have one value associated with it at a time (but not vice versa: for example, both the Blue team and the Yellow team could have value  stored in the scores hash map).  When you want to change the data in a hash map, you have to decide how to handle the case when a key already has a value assigned. You could replace the old value with the new value, completely disregarding the old value. You could keep the old value and ignore the new value, only adding the new value if the key doesn‚Äôt already have a value. Or you could combine the old value and the new value. Let‚Äôs look at how to do each of these!  Overwriting a Value If we insert a key and a value into a hash map and then insert that same key with a different value, the value associated with that key will be replaced. Even though the code in Listing - calls insert twice, the hash map will only contain one key/value pair because we‚Äôre inserting the value for the Blue team‚Äôs key both times.  Listing -: Replacing a value stored with a particular key  This code will print {"Blue": }. The original value of  has been overwritten.   Adding a Key and Value Only If a Key Isn‚Äôt Present It‚Äôs common to check whether a particular key already exists in the hash map with a value then take the following actions: if the key does exist in the hash map, the existing value should remain the way it is. If the key doesn‚Äôt exist, insert it and a value for it.  Hash maps have a special API for this called entry that takes the key you want to check as a parameter. The return value of the entry method is an enum called Entry that represents a value that might or might not exist. Let‚Äôs say we want to check whether the key for the Yellow team has a value associated with it. If it doesn‚Äôt, we want to insert the value , and the same for the Blue team. Using the entry API, the code looks like Listing -.  Listing -: Using the entry method to only insert if the key does not already have a value  The or_insert method on Entry is defined to return a mutable reference to the value for the corresponding Entry key if that key exists, and if not, inserts the parameter as the new value for this key and returns a mutable reference to the new value. This technique is much cleaner than writing the logic ourselves and, in addition, plays more nicely with the borrow checker.  Running the code in Listing - will print {"Yellow": , "Blue": }. The first call to entry will insert the key for the Yellow team with the value  because the Yellow team doesn‚Äôt have a value already. The second call to entry will not change the hash map because the Blue team already has the value .  Updating a Value Based on the Old Value Another common use case for hash maps is to look up a key‚Äôs value and then update it based on the old value. For instance, Listing - shows code that counts how many times each word appears in some text. We use a hash map with the words as keys and increment the value to keep track of how many times we‚Äôve seen that word. If it‚Äôs the first time we‚Äôve seen a word, we‚Äôll first insert the value .  Listing -: Counting occurrences of words using a hash map that stores words and counts  This code will print {"world": , "hello": , "wonderful": }. You might see the same key/value pairs printed in a different order: recall from the ‚ÄúAccessing Values in a Hash Map‚Äù section that iterating over a hash map happens in an arbitrary order.  The split_whitespace method returns an iterator over sub-slices, separated by whitespace, of the value in text. The or_insert method returns a mutable reference (&mut V) to the value for the specified key. Here we store that mutable reference in the count variable, so in order to assign to that value, we must first dereference count using the asterisk (*). The mutable reference goes out of scope at the end of the for loop, so all of these changes are safe and allowed by the borrowing rules.  Hashing Functions By default, HashMap uses a hashing function called SipHash that can provide resistance to Denial of Service (DoS) attacks involving hash tables. This is not the fastest hashing algorithm available, but the trade-off for better security that comes with the drop in performance is worth it. If you profile your code and find that the default hash function is too slow for your purposes, you can switch to another function by specifying a different hasher. A hasher is a type that implements the BuildHasher trait. We‚Äôll talk about traits and how to implement them in Chapter . You don‚Äôt necessarily have to implement your own hasher from scratch; crates.io has libraries shared by other Rust users that provide hashers implementing many common hashing algorithms.   https://en.wikipedia.org/wiki/SipHash Summary Vectors, strings, and hash maps will provide a large amount of functionality necessary in programs when you need to store, access, and modify data. Here are some exercises you should now be equipped to solve:  Given a list of integers, use a vector and return the median (when sorted, the value in the middle position) and mode (the value that occurs most often; a hash map will be helpful here) of the list. Convert strings to pig latin. The first consonant of each word is moved to the end of the word and ‚Äúay‚Äù is added, so ‚Äúfirst‚Äù becomes ‚Äúirst-fay.‚Äù Words that start with a vowel have ‚Äúhay‚Äù added to the end instead (‚Äúapple‚Äù becomes ‚Äúapple-hay‚Äù). Keep in mind the details about UTF- encoding! Using a hash map and vectors, create a text interface to allow a user to add employee names to a department in a company. For example, ‚ÄúAdd Sally to Engineering‚Äù or ‚ÄúAdd Amir to Sales.‚Äù Then let the user retrieve a list of all people in a department or all people in the company by department, sorted alphabetically. The standard library API documentation describes methods that vectors, strings, and hash maps have that will be helpful for these exercises!  We‚Äôre getting into more complex programs in which operations can fail, so, it‚Äôs a perfect time to discuss error handling. We‚Äôll do that next!  Error Handling Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you‚Äôll discover errors and handle them appropriately before you‚Äôve deployed your code to production!  Rust groups errors into two major categories: recoverable and unrecoverable errors. For a recoverable error, such as a file not found error, we most likely just want to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array, and so we want to immediately stop the program.  Most languages don‚Äôt distinguish between these two kinds of errors and handle both in the same way, using mechanisms such as exceptions. Rust doesn‚Äôt have exceptions. Instead, it has the type Result<T, E> for recoverable errors and the panic! macro that stops execution when the program encounters an unrecoverable error. This chapter covers calling panic! first and then talks about returning Result<T, E> values. Additionally, we‚Äôll explore considerations when deciding whether to try to recover from an error or to stop execution.  Unrecoverable Errors with panic! Sometimes, bad things happen in your code, and there‚Äôs nothing you can do about it. In these cases, Rust has the panic! macro. There are two ways to cause a panic in practice: by taking an action that causes our code to panic (such as accessing an array past the end) or by explicitly calling the panic! macro. In both cases, we cause a panic in our program. By default, these panics will print a failure message, unwind, clean up the stack, and quit. Via an environment variable, you can also have Rust display the call stack when a panic occurs to make it easier to track down the source of the panic.  Unwinding the Stack or Aborting in Response to a Panic By default, when a panic occurs, the program starts unwinding, which means Rust walks back up the stack and cleans up the data from each function it encounters. However, this walking back and cleanup is a lot of work. Rust, therefore, allows you to choose the alternative of immediately aborting, which ends the program without cleaning up.  Memory that the program was using will then need to be cleaned up by the operating system. If in your project you need to make the resulting binary as small as possible, you can switch from unwinding to aborting upon a panic by adding panic = 'abort' to the appropriate [profile] sections in your Cargo.toml file. For example, if you want to abort on panic in release mode, add this:  Let‚Äôs try calling panic! in a simple program:  Filename: src/main.rs  When you run the program, you‚Äôll see something like this:  The call to panic! causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: src/main.rs:: indicates that it‚Äôs the second line, fifth character of our src/main.rs file.  In this case, the line indicated is part of our code, and if we go to that line, we see the panic! macro call. In other cases, the panic! call might be in code that our code calls, and the filename and line number reported by the error message will be someone else‚Äôs code where the panic! macro is called, not the line of our code that eventually led to the panic! call. We can use the backtrace of the functions the panic! call came from to figure out the part of our code that is causing the problem. We‚Äôll discuss backtraces in more detail next.  Using a panic! Backtrace Let‚Äôs look at another example to see what it‚Äôs like when a panic! call comes from a library because of a bug in our code instead of from our code calling the macro directly. Listing - has some code that attempts to access an index in a vector beyond the range of valid indexes.  Filename: src/main.rs  Listing -: Attempting to access an element beyond the end of a vector, which will cause a call to panic!  Here, we‚Äôre attempting to access the th element of our vector (which is at index  because indexing starts at zero), but the vector has only  elements. In this situation, Rust will panic. Using [] is supposed to return an element, but if you pass an invalid index, there‚Äôs no element that Rust could return here that would be correct.  In C, attempting to read beyond the end of a data structure is undefined behavior. You might get whatever is at the location in memory that would correspond to that element in the data structure, even though the memory doesn‚Äôt belong to that structure. This is called a buffer overread and can lead to security vulnerabilities if an attacker is able to manipulate the index in such a way as to read data they shouldn‚Äôt be allowed to that is stored after the data structure.  To protect your program from this sort of vulnerability, if you try to read an element at an index that doesn‚Äôt exist, Rust will stop execution and refuse to continue. Let‚Äôs try it and see:  This error points at line  of our main.rs where we attempt to access index . The next note line tells us that we can set the RUST_BACKTRACE environment variable to get a backtrace of exactly what happened to cause the error. A backtrace is a list of all the functions that have been called to get to this point. Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote. That‚Äôs the spot where the problem originated. The lines above that spot are code that your code has called; the lines below are code that called your code. These before-and-after lines might include core Rust code, standard library code, or crates that you‚Äôre using. Let‚Äôs try getting a backtrace by setting the RUST_BACKTRACE environment variable to any value except . Listing - shows output similar to what you‚Äôll see.  Listing -: The backtrace generated by a call to panic! displayed when the environment variable RUST_BACKTRACE is set  That‚Äôs a lot of output! The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using cargo build or cargo run without the --release flag, as we have here.  In the output in Listing -, line  of the backtrace points to the line in our project that‚Äôs causing the problem: line  of src/main.rs. If we don‚Äôt want our program to panic, we should start our investigation at the location pointed to by the first line mentioning a file we wrote. In Listing -, where we deliberately wrote code that would panic, the way to fix the panic is to not request an element beyond the range of the vector indexes. When your code panics in the future, you‚Äôll need to figure out what action the code is taking with what values to cause the panic and what the code should do instead.  We‚Äôll come back to panic! and when we should and should not use panic! to handle error conditions in the ‚ÄúTo panic! or Not to panic!‚Äù section later in this chapter. Next, we‚Äôll look at how to recover from an error using Result.  Recoverable Errors with Result Most errors aren‚Äôt serious enough to require the program to stop entirely. Sometimes, when a function fails, it‚Äôs for a reason that you can easily interpret and respond to. For example, if you try to open a file and that operation fails because the file doesn‚Äôt exist, you might want to create the file instead of terminating the process.  Recall from ‚ÄúHandling Potential Failure with Result‚Äù in Chapter  that the Result enum is defined as having two variants, Ok and Err, as follows:  The T and E are generic type parameters: we‚Äôll discuss generics in more detail in Chapter . What you need to know right now is that T represents the type of the value that will be returned in a success case within the Ok variant, and E represents the type of the error that will be returned in a failure case within the Err variant. Because Result has these generic type parameters, we can use the Result type and the functions defined on it in many different situations where the successful value and error value we want to return may differ.  Let‚Äôs call a function that returns a Result value because the function could fail. In Listing - we try to open a file.  Filename: src/main.rs  Listing -: Opening a file  The return type of File::open is a Result<T, E>. The generic parameter T has been filled in by the implementation of File::open with the type of the success value, std::fs::File, which is a file handle. The type of E used in the error value is std::io::Error. This return type means the call to File::open might succeed and return a file handle that we can read from or write to. The function call also might fail: for example, the file might not exist, or we might not have permission to access the file. The File::open function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the Result enum conveys.  In the case where File::open succeeds, the value in the variable greeting_file_result will be an instance of Ok that contains a file handle. In the case where it fails, the value in greeting_file_result will be an instance of Err that contains more information about the kind of error that happened.  We need to add to the code in Listing - to take different actions depending on the value File::open returns. Listing - shows one way to handle the Result using a basic tool, the match expression that we discussed in Chapter .  Filename: src/main.rs  Listing -: Using a match expression to handle the Result variants that might be returned  Note that, like the Option enum, the Result enum and its variants have been brought into scope by the prelude, so we don‚Äôt need to specify Result:: before the Ok and Err variants in the match arms.  When the result is Ok, this code will return the inner file value out of the Ok variant, and we then assign that file handle value to the variable greeting_file. After the match, we can use the file handle for reading or writing.  The other arm of the match handles the case where we get an Err value from File::open. In this example, we‚Äôve chosen to call the panic! macro. If there‚Äôs no file named hello.txt in our current directory and we run this code, we‚Äôll see the following output from the panic! macro:  As usual, this output tells us exactly what has gone wrong.  Matching on Different Errors The code in Listing - will panic! no matter why File::open failed. However, we want to take different actions for different failure reasons: if File::open failed because the file doesn‚Äôt exist, we want to create the file and return the handle to the new file. If File::open failed for any other reason‚Äîfor example, because we didn‚Äôt have permission to open the file‚Äîwe still want the code to panic! in the same way as it did in Listing -. For this we add an inner match expression, shown in Listing -.  Filename: src/main.rs  Listing -: Handling different kinds of errors in different ways  The type of the value that File::open returns inside the Err variant is io::Error, which is a struct provided by the standard library. This struct has a method kind that we can call to get an io::ErrorKind value. The enum io::ErrorKind is provided by the standard library and has variants representing the different kinds of errors that might result from an io operation. The variant we want to use is ErrorKind::NotFound, which indicates the file we‚Äôre trying to open doesn‚Äôt exist yet. So we match on greeting_file_result, but we also have an inner match on error.kind().  The condition we want to check in the inner match is whether the value returned by error.kind() is the NotFound variant of the ErrorKind enum. If it is, we try to create the file with File::create. However, because File::create could also fail, we need a second arm in the inner match expression. When the file can‚Äôt be created, a different error message is printed. The second arm of the outer match stays the same, so the program panics on any error besides the missing file error.  Alternatives to Using match with Result<T, E> That‚Äôs a lot of match! The match expression is very useful but also very much a primitive. In Chapter , you‚Äôll learn about closures, which are used with many of the methods defined on Result<T, E>. These methods can be more concise than using match when handling Result<T, E> values in your code.  For example, here‚Äôs another way to write the same logic as shown in Listing -, this time using closures and the unwrap_or_else method:  Although this code has the same behavior as Listing -, it doesn‚Äôt contain any match expressions and is cleaner to read. Come back to this example after you‚Äôve read Chapter , and look up the unwrap_or_else method in the standard library documentation. Many more of these methods can clean up huge nested match expressions when you‚Äôre dealing with errors.  Shortcuts for Panic on Error: unwrap and expect Using match works well enough, but it can be a bit verbose and doesn‚Äôt always communicate intent well. The Result<T, E> type has many helper methods defined on it to do various, more specific tasks. The unwrap method is a shortcut method implemented just like the match expression we wrote in Listing -. If the Result value is the Ok variant, unwrap will return the value inside the Ok. If the Result is the Err variant, unwrap will call the panic! macro for us. Here is an example of unwrap in action:  Filename: src/main.rs  If we run this code without a hello.txt file, we‚Äôll see an error message from the panic! call that the unwrap method makes:  Similarly, the expect method lets us also choose the panic! error message. Using expect instead of unwrap and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of expect looks like this:  Filename: src/main.rs  We use expect in the same way as unwrap: to return the file handle or call the panic! macro. The error message used by expect in its call to panic! will be the parameter that we pass to expect, rather than the default panic! message that unwrap uses. Here‚Äôs what it looks like:  In production-quality code, most Rustaceans choose expect rather than unwrap and give more context about why the operation is expected to always succeed. That way, if your assumptions are ever proven wrong, you have more information to use in debugging.  Propagating Errors When a function‚Äôs implementation calls something that might fail, instead of handling the error within the function itself, you can return the error to the calling code so that it can decide what to do. This is known as propagating the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.  For example, Listing - shows a function that reads a username from a file. If the file doesn‚Äôt exist or can‚Äôt be read, this function will return those errors to the code that called the function.  Filename: src/main.rs  Listing -: A function that returns errors to the calling code using match  This function can be written in a much shorter way, but we‚Äôre going to start by doing a lot of it manually in order to explore error handling; at the end, we‚Äôll show the shorter way. Let‚Äôs look at the return type of the function first: Result<String, io::Error>. This means the function is returning a value of the type Result<T, E> where the generic parameter T has been filled in with the concrete type String, and the generic type E has been filled in with the concrete type io::Error.  If this function succeeds without any problems, the code that calls this function will receive an Ok value that holds a String‚Äîthe username that this function read from the file. If this function encounters any problems, the calling code will receive an Err value that holds an instance of io::Error that contains more information about what the problems were. We chose io::Error as the return type of this function because that happens to be the type of the error value returned from both of the operations we‚Äôre calling in this function‚Äôs body that might fail: the File::open function and the read_to_string method.  The body of the function starts by calling the File::open function. Then we handle the Result value with a match similar to the match in Listing -. If File::open succeeds, the file handle in the pattern variable file becomes the value in the mutable variable username_file and the function continues. In the Err case, instead of calling panic!, we use the return keyword to return early out of the function entirely and pass the error value from File::open, now in the pattern variable e, back to the calling code as this function‚Äôs error value.  So if we have a file handle in username_file, the function then creates a new String in variable username and calls the read_to_string method on the file handle in username_file to read the contents of the file into username. The read_to_string method also returns a Result because it might fail, even though File::open succeeded. So we need another match to handle that Result: if read_to_string succeeds, then our function has succeeded, and we return the username from the file that‚Äôs now in username wrapped in an Ok. If read_to_string fails, we return the error value in the same way that we returned the error value in the match that handled the return value of File::open. However, we don‚Äôt need to explicitly say return, because this is the last expression in the function.  The code that calls this code will then handle getting either an Ok value that contains a username or an Err value that contains an io::Error. It‚Äôs up to the calling code to decide what to do with those values. If the calling code gets an Err value, it could call panic! and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don‚Äôt have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.  This pattern of propagating errors is so common in Rust that Rust provides the question mark operator ? to make this easier.  A Shortcut for Propagating Errors: the ? Operator Listing - shows an implementation of read_username_from_file that has the same functionality as in Listing -, but this implementation uses the ? operator.  Filename: src/main.rs  Listing -: A function that returns errors to the calling code using the ? operator  The ? placed after a Result value is defined to work in almost the same way as the match expressions we defined to handle the Result values in Listing -. If the value of the Result is an Ok, the value inside the Ok will get returned from this expression, and the program will continue. If the value is an Err, the Err will be returned from the whole function as if we had used the return keyword so the error value gets propagated to the calling code.  There is a difference between what the match expression from Listing - does and what the ? operator does: error values that have the ? operator called on them go through the from function, defined in the From trait in the standard library, which is used to convert values from one type into another. When the ? operator calls the from function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons.  For example, we could change the read_username_from_file function in Listing - to return a custom error type named OurError that we define. If we also define impl From<io::Error> for OurError to construct an instance of OurError from an io::Error, then the ? operator calls in the body of read_username_from_file will call from and convert the error types without needing to add any more code to the function.  In the context of Listing -, the ? at the end of the File::open call will return the value inside an Ok to the variable username_file. If an error occurs, the ? operator will return early out of the whole function and give any Err value to the calling code. The same thing applies to the ? at the end of the read_to_string call.  The ? operator eliminates a lot of boilerplate and makes this function‚Äôs implementation simpler. We could even shorten this code further by chaining method calls immediately after the ?, as shown in Listing -.  Filename: src/main.rs  Listing -: Chaining method calls after the ? operator  We‚Äôve moved the creation of the new String in username to the beginning of the function; that part hasn‚Äôt changed. Instead of creating a variable username_file, we‚Äôve chained the call to read_to_string directly onto the result of File::open("hello.txt")?. We still have a ? at the end of the read_to_string call, and we still return an Ok value containing username when both File::open and read_to_string succeed rather than returning errors. The functionality is again the same as in Listing - and Listing -; this is just a different, more ergonomic way to write it.  Listing - shows a way to make this even shorter using fs::read_to_string.  Filename: src/main.rs  Listing -: Using fs::read_to_string instead of opening and then reading the file  Reading a file into a string is a fairly common operation, so the standard library provides the convenient fs::read_to_string function that opens the file, creates a new String, reads the contents of the file, puts the contents into that String, and returns it. Of course, using fs::read_to_string doesn‚Äôt give us the opportunity to explain all the error handling, so we did it the longer way first.  Where The ? Operator Can Be Used The ? operator can only be used in functions whose return type is compatible with the value the ? is used on. This is because the ? operator is defined to perform an early return of a value out of the function, in the same manner as the match expression we defined in Listing -. In Listing -, the match was using a Result value, and the early return arm returned an Err(e) value. The return type of the function has to be a Result so that it‚Äôs compatible with this return.  In Listing -, let‚Äôs look at the error we‚Äôll get if we use the ? operator in a main function with a return type incompatible with the type of the value we use ? on:  Filename: src/main.rs  Listing -: Attempting to use the ? in the main function that returns () won‚Äôt compile  This code opens a file, which might fail. The ? operator follows the Result value returned by File::open, but this main function has the return type of (), not Result. When we compile this code, we get the following error message:  This error points out that we‚Äôre only allowed to use the ? operator in a function that returns Result, Option, or another type that implements FromResidual.  To fix the error, you have two choices. One choice is to change the return type of your function to be compatible with the value you‚Äôre using the ? operator on as long as you have no restrictions preventing that. The other technique is to use a match or one of the Result<T, E> methods to handle the Result<T, E> in whatever way is appropriate.  The error message also mentioned that ? can be used with Option<T> values as well. As with using ? on Result, you can only use ? on Option in a function that returns an Option. The behavior of the ? operator when called on an Option<T> is similar to its behavior when called on a Result<T, E>: if the value is None, the None will be returned early from the function at that point. If the value is Some, the value inside the Some is the resulting value of the expression and the function continues. Listing - has an example of a function that finds the last character of the first line in the given text:  Listing -: Using the ? operator on an Option<T> value  This function returns Option<char> because it‚Äôs possible that there is a character there, but it‚Äôs also possible that there isn‚Äôt. This code takes the text string slice argument and calls the lines method on it, which returns an iterator over the lines in the string. Because this function wants to examine the first line, it calls next on the iterator to get the first value from the iterator. If text is the empty string, this call to next will return None, in which case we use ? to stop and return None from last_char_of_first_line. If text is not the empty string, next will return a Some value containing a string slice of the first line in text.  The ? extracts the string slice, and we can call chars on that string slice to get an iterator of its characters. We‚Äôre interested in the last character in this first line, so we call last to return the last item in the iterator. This is an Option because it‚Äôs possible that the first line is the empty string, for example if text starts with a blank line but has characters on other lines, as in "\nhi". However, if there is a last character on the first line, it will be returned in the Some variant. The ? operator in the middle gives us a concise way to express this logic, allowing us to implement the function in one line. If we couldn‚Äôt use the ? operator on Option, we‚Äôd have to implement this logic using more method calls or a match expression.  Note that you can use the ? operator on a Result in a function that returns Result, and you can use the ? operator on an Option in a function that returns Option, but you can‚Äôt mix and match. The ? operator won‚Äôt automatically convert a Result to an Option or vice versa; in those cases, you can use methods like the ok method on Result or the ok_or method on Option to do the conversion explicitly.  So far, all the main functions we‚Äôve used return (). The main function is special because it‚Äôs the entry and exit point of executable programs, and there are restrictions on what its return type can be for the programs to behave as expected.  Luckily, main can also return a Result<(), E>. Listing - has the code from Listing - but we‚Äôve changed the return type of main to be Result<(), Box<dyn Error>> and added a return value Ok(()) to the end. This code will now compile:  Listing -: Changing main to return Result<(), E> allows the use of the ? operator on Result values  The Box<dyn Error> type is a trait object, which we‚Äôll talk about in the ‚ÄúUsing Trait Objects that Allow for Values of Different Types‚Äù section in Chapter . For now, you can read Box<dyn Error> to mean ‚Äúany kind of error.‚Äù Using ? on a Result value in a main function with the error type Box<dyn Error> is allowed, because it allows any Err value to be returned early. Even though the body of this main function will only ever return errors of type std::io::Error, by specifying Box<dyn Error>, this signature will continue to be correct even if more code that returns other errors is added to the body of main.  When a main function returns a Result<(), E>, the executable will exit with a value of  if main returns Ok(()) and will exit with a nonzero value if main returns an Err value. Executables written in C return integers when they exit: programs that exit successfully return the integer , and programs that error return some integer other than . Rust also returns integers from executables to be compatible with this convention.  The main function may return any types that implement the std::process::Termination trait, which contains a function report that returns an ExitCode. Consult the standard library documentation for more information on implementing the Termination trait for your own types.  Now that we‚Äôve discussed the details of calling panic! or returning Result, let‚Äôs return to the topic of how to decide which is appropriate to use in which cases.  To panic! or Not to panic! So how do you decide when you should call panic! and when you should return Result? When code panics, there‚Äôs no way to recover. You could call panic! for any error situation, whether there‚Äôs a possible way to recover or not, but then you‚Äôre making the decision that a situation is unrecoverable on behalf of the calling code. When you choose to return a Result value, you give the calling code options. The calling code could choose to attempt to recover in a way that‚Äôs appropriate for its situation, or it could decide that an Err value in this case is unrecoverable, so it can call panic! and turn your recoverable error into an unrecoverable one. Therefore, returning Result is a good default choice when you‚Äôre defining a function that might fail.  In situations such as examples, prototype code, and tests, it‚Äôs more appropriate to write code that panics instead of returning a Result. Let‚Äôs explore why, then discuss situations in which the compiler can‚Äôt tell that failure is impossible, but you as a human can. The chapter will conclude with some general guidelines on how to decide whether to panic in library code.  Examples, Prototype Code, and Tests When you‚Äôre writing an example to illustrate some concept, also including robust error-handling code can make the example less clear. In examples, it‚Äôs understood that a call to a method like unwrap that could panic is meant as a placeholder for the way you‚Äôd want your application to handle errors, which can differ based on what the rest of your code is doing.  Similarly, the unwrap and expect methods are very handy when prototyping, before you‚Äôre ready to decide how to handle errors. They leave clear markers in your code for when you‚Äôre ready to make your program more robust.  If a method call fails in a test, you‚Äôd want the whole test to fail, even if that method isn‚Äôt the functionality under test. Because panic! is how a test is marked as a failure, calling unwrap or expect is exactly what should happen.  Cases in Which You Have More Information Than the Compiler It would also be appropriate to call unwrap or expect when you have some other logic that ensures the Result will have an Ok value, but the logic isn‚Äôt something the compiler understands. You‚Äôll still have a Result value that you need to handle: whatever operation you‚Äôre calling still has the possibility of failing in general, even though it‚Äôs logically impossible in your particular situation. If you can ensure by manually inspecting the code that you‚Äôll never have an Err variant, it‚Äôs perfectly acceptable to call unwrap, and even better to document the reason you think you‚Äôll never have an Err variant in the expect text. Here‚Äôs an example:  We‚Äôre creating an IpAddr instance by parsing a hardcoded string. We can see that ... is a valid IP address, so it‚Äôs acceptable to use expect here. However, having a hardcoded, valid string doesn‚Äôt change the return type of the parse method: we still get a Result value, and the compiler will still make us handle the Result as if the Err variant is a possibility because the compiler isn‚Äôt smart enough to see that this string is always a valid IP address. If the IP address string came from a user rather than being hardcoded into the program and therefore did have a possibility of failure, we‚Äôd definitely want to handle the Result in a more robust way instead. Mentioning the assumption that this IP address is hardcoded will prompt us to change expect to better error handling code if in the future, we need to get the IP address from some other source instead.  Guidelines for Error Handling It‚Äôs advisable to have your code panic when it‚Äôs possible that your code could end up in a bad state. In this context, a bad state is when some assumption, guarantee, contract, or invariant has been broken, such as when invalid values, contradictory values, or missing values are passed to your code‚Äîplus one or more of the following:  The bad state is something that is unexpected, as opposed to something that will likely happen occasionally, like a user entering data in the wrong format. Your code after this point needs to rely on not being in this bad state, rather than checking for the problem at every step. There‚Äôs not a good way to encode this information in the types you use. We‚Äôll work through an example of what we mean in the ‚ÄúEncoding States and Behavior as Types‚Äù section of Chapter . If someone calls your code and passes in values that don‚Äôt make sense, it‚Äôs best to return an error if you can so the user of the library can decide what they want to do in that case. However, in cases where continuing could be insecure or harmful, the best choice might be to call panic! and alert the person using your library to the bug in their code so they can fix it during development. Similarly, panic! is often appropriate if you‚Äôre calling external code that is out of your control and it returns an invalid state that you have no way of fixing.  However, when failure is expected, it‚Äôs more appropriate to return a Result than to make a panic! call. Examples include a parser being given malformed data or an HTTP request returning a status that indicates you have hit a rate limit. In these cases, returning a Result indicates that failure is an expected possibility that the calling code must decide how to handle.  When your code performs an operation that could put a user at risk if it‚Äôs called using invalid values, your code should verify the values are valid first and panic if the values aren‚Äôt valid. This is mostly for safety reasons: attempting to operate on invalid data can expose your code to vulnerabilities. This is the main reason the standard library will call panic! if you attempt an out-of-bounds memory access: trying to access memory that doesn‚Äôt belong to the current data structure is a common security problem. Functions often have contracts: their behavior is only guaranteed if the inputs meet particular requirements. Panicking when the contract is violated makes sense because a contract violation always indicates a caller-side bug and it‚Äôs not a kind of error you want the calling code to have to explicitly handle. In fact, there‚Äôs no reasonable way for calling code to recover; the calling programmers need to fix the code. Contracts for a function, especially when a violation will cause a panic, should be explained in the API documentation for the function.  However, having lots of error checks in all of your functions would be verbose and annoying. Fortunately, you can use Rust‚Äôs type system (and thus the type checking done by the compiler) to do many of the checks for you. If your function has a particular type as a parameter, you can proceed with your code‚Äôs logic knowing that the compiler has already ensured you have a valid value. For example, if you have a type rather than an Option, your program expects to have something rather than nothing. Your code then doesn‚Äôt have to handle two cases for the Some and None variants: it will only have one case for definitely having a value. Code trying to pass nothing to your function won‚Äôt even compile, so your function doesn‚Äôt have to check for that case at runtime. Another example is using an unsigned integer type such as u, which ensures the parameter is never negative.  Creating Custom Types for Validation Let‚Äôs take the idea of using Rust‚Äôs type system to ensure we have a valid value one step further and look at creating a custom type for validation. Recall the guessing game in Chapter  in which our code asked the user to guess a number between  and . We never validated that the user‚Äôs guess was between those numbers before checking it against our secret number; we only validated that the guess was positive. In this case, the consequences were not very dire: our output of ‚ÄúToo high‚Äù or ‚ÄúToo low‚Äù would still be correct. But it would be a useful enhancement to guide the user toward valid guesses and have different behavior when a user guesses a number that‚Äôs out of range versus when a user types, for example, letters instead.  One way to do this would be to parse the guess as an i instead of only a u to allow potentially negative numbers, and then add a check for the number being in range, like so:  The if expression checks whether our value is out of range, tells the user about the problem, and calls continue to start the next iteration of the loop and ask for another guess. After the if expression, we can proceed with the comparisons between guess and the secret number knowing that guess is between  and .  However, this is not an ideal solution: if it was absolutely critical that the program only operated on values between  and , and it had many functions with this requirement, having a check like this in every function would be tedious (and might impact performance).  Instead, we can make a new type and put the validations in a function to create an instance of the type rather than repeating the validations everywhere. That way, it‚Äôs safe for functions to use the new type in their signatures and confidently use the values they receive. Listing - shows one way to define a Guess type that will only create an instance of Guess if the new function receives a value between  and .  Listing -: A Guess type that will only continue with values between  and   First, we define a struct named Guess that has a field named value that holds an i. This is where the number will be stored.  Then we implement an associated function named new on Guess that creates instances of Guess values. The new function is defined to have one parameter named value of type i and to return a Guess. The code in the body of the new function tests value to make sure it‚Äôs between  and . If value doesn‚Äôt pass this test, we make a panic! call, which will alert the programmer who is writing the calling code that they have a bug they need to fix, because creating a Guess with a value outside this range would violate the contract that Guess::new is relying on. The conditions in which Guess::new might panic should be discussed in its public-facing API documentation; we‚Äôll cover documentation conventions indicating the possibility of a panic! in the API documentation that you create in Chapter . If value does pass the test, we create a new Guess with its value field set to the value parameter and return the Guess.  Next, we implement a method named value that borrows self, doesn‚Äôt have any other parameters, and returns an i. This kind of method is sometimes called a getter, because its purpose is to get some data from its fields and return it. This public method is necessary because the value field of the Guess struct is private. It‚Äôs important that the value field be private so code using the Guess struct is not allowed to set value directly: code outside the module must use the Guess::new function to create an instance of Guess, thereby ensuring there‚Äôs no way for a Guess to have a value that hasn‚Äôt been checked by the conditions in the Guess::new function.  A function that has a parameter or returns only numbers between  and  could then declare in its signature that it takes or returns a Guess rather than an i and wouldn‚Äôt need to do any additional checks in its body.  Summary Rust‚Äôs error handling features are designed to help you write more robust code. The panic! macro signals that your program is in a state it can‚Äôt handle and lets you tell the process to stop instead of trying to proceed with invalid or incorrect values. The Result enum uses Rust‚Äôs type system to indicate that operations might fail in a way that your code could recover from. You can use Result to tell code that calls your code that it needs to handle potential success or failure as well. Using panic! and Result in the appropriate situations will make your code more reliable in the face of inevitable problems.  Now that you‚Äôve seen useful ways that the standard library uses generics with the Option and Result enums, we‚Äôll talk about how generics work and how you can use them in your code.  Generic Types, Traits, and Lifetimes Every programming language has tools for effectively handling the duplication of concepts. In Rust, one such tool is generics: abstract stand-ins for concrete types or other properties. We can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.  Functions can take parameters of some generic type, instead of a concrete type like i or String, in the same way a function takes parameters with unknown values to run the same code on multiple concrete values. In fact, we‚Äôve already used generics in Chapter  with Option<T>, Chapter  with Vec<T> and HashMap<K, V>, and Chapter  with Result<T, E>. In this chapter, you‚Äôll explore how to define your own types, functions, and methods with generics!  First, we‚Äôll review how to extract a function to reduce code duplication. We‚Äôll then use the same technique to make a generic function from two functions that differ only in the types of their parameters. We‚Äôll also explain how to use generic types in struct and enum definitions.  Then you‚Äôll learn how to use traits to define behavior in a generic way. You can combine traits with generic types to constrain a generic type to accept only those types that have a particular behavior, as opposed to just any type.  Finally, we‚Äôll discuss lifetimes: a variety of generics that give the compiler information about how references relate to each other. Lifetimes allow us to give the compiler enough information about borrowed values so that it can ensure references will be valid in more situations than it could without our help.  Removing Duplication by Extracting a Function Generics allow us to replace specific types with a placeholder that represents multiple types to remove code duplication. Before diving into generics syntax, then, let‚Äôs first look at how to remove duplication in a way that doesn‚Äôt involve generic types by extracting a function that replaces specific values with a placeholder that represents multiple values. Then we‚Äôll apply the same technique to extract a generic function! By looking at how to recognize duplicated code you can extract into a function, you‚Äôll start to recognize duplicated code that can use generics.  We begin with the short program in Listing - that finds the largest number in a list.  Filename: src/main.rs  Listing -: Finding the largest number in a list of numbers  We store a list of integers in the variable number_list and place a reference to the first number in the list in a variable named largest. We then iterate through all the numbers in the list, and if the current number is greater than the number stored in largest, replace the reference in that variable. However, if the current number is less than or equal to the largest number seen so far, the variable doesn‚Äôt change, and the code moves on to the next number in the list. After considering all the numbers in the list, largest should refer to the largest number, which in this case is .  We've now been tasked with finding the largest number in two different lists of numbers. To do so, we can choose to duplicate the code in Listing - and use the same logic at two different places in the program, as shown in Listing -.  Filename: src/main.rs  Listing -: Code to find the largest number in two lists of numbers  Although this code works, duplicating code is tedious and error prone. We also have to remember to update the code in multiple places when we want to change it.  To eliminate this duplication, we‚Äôll create an abstraction by defining a function that operates on any list of integers passed in a parameter. This solution makes our code clearer and lets us express the concept of finding the largest number in a list abstractly.  In Listing -, we extract the code that finds the largest number into a function named largest. Then we call the function to find the largest number in the two lists from Listing -. We could also use the function on any other list of i values we might have in the future.  Filename: src/main.rs  Listing -: Abstracted code to find the largest number in two lists  The largest function has a parameter called list, which represents any concrete slice of i values we might pass into the function. As a result, when we call the function, the code runs on the specific values that we pass in.  In summary, here are the steps we took to change the code from Listing - to Listing -:  Identify duplicate code. Extract the duplicate code into the body of the function and specify the inputs and return values of that code in the function signature. Update the two instances of duplicated code to call the function instead. Next, we‚Äôll use these same steps with generics to reduce code duplication. In the same way that the function body can operate on an abstract list instead of specific values, generics allow code to operate on abstract types.  For example, say we had two functions: one that finds the largest item in a slice of i values and one that finds the largest item in a slice of char values. How would we eliminate that duplication? Let‚Äôs find out!  Generic Data Types We use generics to create definitions for items like function signatures or structs, which we can then use with many different concrete data types. Let‚Äôs first look at how to define functions, structs, enums, and methods using generics. Then we‚Äôll discuss how generics affect code performance.  In Function Definitions When defining a function that uses generics, we place the generics in the signature of the function where we would usually specify the data types of the parameters and return value. Doing so makes our code more flexible and provides more functionality to callers of our function while preventing code duplication.  Continuing with our largest function, Listing - shows two functions that both find the largest value in a slice. We'll then combine these into a single function that uses generics.  Filename: src/main.rs  Listing -: Two functions that differ only in their names and the types in their signatures  The largest_i function is the one we extracted in Listing - that finds the largest i in a slice. The largest_char function finds the largest char in a slice. The function bodies have the same code, so let‚Äôs eliminate the duplication by introducing a generic type parameter in a single function.  To parameterize the types in a new single function, we need to name the type parameter, just as we do for the value parameters to a function. You can use any identifier as a type parameter name. But we‚Äôll use T because, by convention, type parameter names in Rust are short, often just a letter, and Rust‚Äôs type-naming convention is UpperCamelCase. Short for ‚Äútype,‚Äù T is the default choice of most Rust programmers.  When we use a parameter in the body of the function, we have to declare the parameter name in the signature so the compiler knows what that name means. Similarly, when we use a type parameter name in a function signature, we have to declare the type parameter name before we use it. To define the generic largest function, place type name declarations inside angle brackets, <>, between the name of the function and the parameter list, like this:  We read this definition as: the function largest is generic over some type T. This function has one parameter named list, which is a slice of values of type T. The largest function will return a reference to a value of the same type T.  Listing - shows the combined largest function definition using the generic data type in its signature. The listing also shows how we can call the function with either a slice of i values or char values. Note that this code won‚Äôt compile yet, but we‚Äôll fix it later in this chapter.  Filename: src/main.rs  Listing -: The largest function using generic type parameters; this doesn‚Äôt yet compile  If we compile this code right now, we‚Äôll get this error:  The help text mentions std::cmp::PartialOrd, which is a trait, and we‚Äôre going to talk about traits in the next section. For now, know that this error states that the body of largest won‚Äôt work for all possible types that T could be. Because we want to compare values of type T in the body, we can only use types whose values can be ordered. To enable comparisons, the standard library has the std::cmp::PartialOrd trait that you can implement on types (see Appendix C for more on this trait). By following the help text's suggestion, we restrict the types valid for T to only those that implement PartialOrd and this example will compile, because the standard library implements PartialOrd on both i and char.  In Struct Definitions We can also define structs to use a generic type parameter in one or more fields using the <> syntax. Listing - defines a Point<T> struct to hold x and y coordinate values of any type.  Filename: src/main.rs  Listing -: A Point<T> struct that holds x and y values of type T  The syntax for using generics in struct definitions is similar to that used in function definitions. First, we declare the name of the type parameter inside angle brackets just after the name of the struct. Then we use the generic type in the struct definition where we would otherwise specify concrete data types.  Note that because we‚Äôve used only one generic type to define Point<T>, this definition says that the Point<T> struct is generic over some type T, and the fields x and y are both that same type, whatever that type may be. If we create an instance of a Point<T> that has values of different types, as in Listing -, our code won‚Äôt compile.  Filename: src/main.rs  Listing -: The fields x and y must be the same type because both have the same generic data type T.  In this example, when we assign the integer value  to x, we let the compiler know that the generic type T will be an integer for this instance of Point<T>. Then when we specify . for y, which we‚Äôve defined to have the same type as x, we‚Äôll get a type mismatch error like this:  To define a Point struct where x and y are both generics but could have different types, we can use multiple generic type parameters. For example, in Listing -, we change the definition of Point to be generic over types T and U where x is of type T and y is of type U.  Filename: src/main.rs  Listing -: A Point<T, U> generic over two types so that x and y can be values of different types  Now all the instances of Point shown are allowed! You can use as many generic type parameters in a definition as you want, but using more than a few makes your code hard to read. If you're finding you need lots of generic types in your code, it could indicate that your code needs restructuring into smaller pieces.  In Enum Definitions As we did with structs, we can define enums to hold generic data types in their variants. Let‚Äôs take another look at the Option<T> enum that the standard library provides, which we used in Chapter :  This definition should now make more sense to you. As you can see, the Option<T> enum is generic over type T and has two variants: Some, which holds one value of type T, and a None variant that doesn‚Äôt hold any value. By using the Option<T> enum, we can express the abstract concept of an optional value, and because Option<T> is generic, we can use this abstraction no matter what the type of the optional value is.  Enums can use multiple generic types as well. The definition of the Result enum that we used in Chapter  is one example:  The Result enum is generic over two types, T and E, and has two variants: Ok, which holds a value of type T, and Err, which holds a value of type E. This definition makes it convenient to use the Result enum anywhere we have an operation that might succeed (return a value of some type T) or fail (return an error of some type E). In fact, this is what we used to open a file in Listing -, where T was filled in with the type std::fs::File when the file was opened successfully and E was filled in with the type std::io::Error when there were problems opening the file.  When you recognize situations in your code with multiple struct or enum definitions that differ only in the types of the values they hold, you can avoid duplication by using generic types instead.  In Method Definitions We can implement methods on structs and enums (as we did in Chapter ) and use generic types in their definitions, too. Listing - shows the Point<T> struct we defined in Listing - with a method named x implemented on it.  Filename: src/main.rs  Listing -: Implementing a method named x on the Point<T> struct that will return a reference to the x field of type T  Here, we‚Äôve defined a method named x on Point<T> that returns a reference to the data in the field x.  Note that we have to declare T just after impl so we can use T to specify that we‚Äôre implementing methods on the type Point<T>. By declaring T as a generic type after impl, Rust can identify that the type in the angle brackets in Point is a generic type rather than a concrete type. We could have chosen a different name for this generic parameter than the generic parameter declared in the struct definition, but using the same name is conventional. Methods written within an impl that declares the generic type will be defined on any instance of the type, no matter what concrete type ends up substituting for the generic type.  We can also specify constraints on generic types when defining methods on the type. We could, for example, implement methods only on Point<f> instances rather than on Point<T> instances with any generic type. In Listing - we use the concrete type f, meaning we don‚Äôt declare any types after impl.  Filename: src/main.rs  Listing -: An impl block that only applies to a struct with a particular concrete type for the generic type parameter T  This code means the type Point<f> will have a distance_from_origin method; other instances of Point<T> where T is not of type f will not have this method defined. The method measures how far our point is from the point at coordinates (., .) and uses mathematical operations that are available only for floating point types.  Generic type parameters in a struct definition aren‚Äôt always the same as those you use in that same struct‚Äôs method signatures. Listing - uses the generic types X and Y for the Point struct and X Y for the mixup method signature to make the example clearer. The method creates a new Point instance with the x value from the self Point (of type X) and the y value from the passed-in Point (of type Y).  Filename: src/main.rs  Listing -: A method that uses generic types different from its struct‚Äôs definition  In main, we‚Äôve defined a Point that has an i for x (with value ) and an f for y (with value .). The p variable is a Point struct that has a string slice for x (with value "Hello") and a char for y (with value c). Calling mixup on p with the argument p gives us p, which will have an i for x, because x came from p. The p variable will have a char for y, because y came from p. The println! macro call will print p.x = , p.y = c.  The purpose of this example is to demonstrate a situation in which some generic parameters are declared with impl and some are declared with the method definition. Here, the generic parameters X and Y are declared after impl because they go with the struct definition. The generic parameters X and Y are declared after fn mixup, because they‚Äôre only relevant to the method.  Performance of Code Using Generics You might be wondering whether there is a runtime cost when using generic type parameters. The good news is that using generic types won't make your program run any slower than it would with concrete types.  Rust accomplishes this by performing monomorphization of the code using generics at compile time. Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compiled. In this process, the compiler does the opposite of the steps we used to create the generic function in Listing -: the compiler looks at all the places where generic code is called and generates code for the concrete types the generic code is called with.  Let‚Äôs look at how this works by using the standard library‚Äôs generic Option<T> enum:  When Rust compiles this code, it performs monomorphization. During that process, the compiler reads the values that have been used in Option<T> instances and identifies two kinds of Option<T>: one is i and the other is f. As such, it expands the generic definition of Option<T> into two definitions specialized to i and f, thereby replacing the generic definition with the specific ones.  The monomorphized version of the code looks similar to the following (the compiler uses different names than what we‚Äôre using here for illustration):  Filename: src/main.rs  The generic Option<T> is replaced with the specific definitions created by the compiler. Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust‚Äôs generics extremely efficient at runtime.  Traits: Defining Shared Behavior A trait defines functionality a particular type has and can share with other types. We can use traits to define shared behavior in an abstract way. We can use trait bounds to specify that a generic type can be any type that has certain behavior.  Note: Traits are similar to a feature often called interfaces in other languages, although with some differences.  Defining a Trait A type‚Äôs behavior consists of the methods we can call on that type. Different types share the same behavior if we can call the same methods on all of those types. Trait definitions are a way to group method signatures together to define a set of behaviors necessary to accomplish some purpose.  For example, let‚Äôs say we have multiple structs that hold various kinds and amounts of text: a NewsArticle struct that holds a news story filed in a particular location and a Tweet that can have at most  characters along with metadata that indicates whether it was a new tweet, a retweet, or a reply to another tweet.  We want to make a media aggregator library crate named aggregator that can display summaries of data that might be stored in a NewsArticle or Tweet instance. To do this, we need a summary from each type, and we‚Äôll request that summary by calling a summarize method on an instance. Listing - shows the definition of a public Summary trait that expresses this behavior.  Filename: src/lib.rs  Listing -: A Summary trait that consists of the behavior provided by a summarize method  Here, we declare a trait using the trait keyword and then the trait‚Äôs name, which is Summary in this case. We‚Äôve also declared the trait as pub so that crates depending on this crate can make use of this trait too, as we‚Äôll see in a few examples. Inside the curly brackets, we declare the method signatures that describe the behaviors of the types that implement this trait, which in this case is fn summarize(&self) -> String.  After the method signature, instead of providing an implementation within curly brackets, we use a semicolon. Each type implementing this trait must provide its own custom behavior for the body of the method. The compiler will enforce that any type that has the Summary trait will have the method summarize defined with this signature exactly.  A trait can have multiple methods in its body: the method signatures are listed one per line and each line ends in a semicolon.  Implementing a Trait on a Type Now that we‚Äôve defined the desired signatures of the Summary trait‚Äôs methods, we can implement it on the types in our media aggregator. Listing - shows an implementation of the Summary trait on the NewsArticle struct that uses the headline, the author, and the location to create the return value of summarize. For the Tweet struct, we define summarize as the username followed by the entire text of the tweet, assuming that tweet content is already limited to  characters.  Filename: src/lib.rs  Listing -: Implementing the Summary trait on the NewsArticle and Tweet types  Implementing a trait on a type is similar to implementing regular methods. The difference is that after impl, we put the trait name we want to implement, then use the for keyword, and then specify the name of the type we want to implement the trait for. Within the impl block, we put the method signatures that the trait definition has defined. Instead of adding a semicolon after each signature, we use curly brackets and fill in the method body with the specific behavior that we want the methods of the trait to have for the particular type.  Now that the library has implemented the Summary trait on NewsArticle and Tweet, users of the crate can call the trait methods on instances of NewsArticle and Tweet in the same way we call regular methods. The only difference is that the user must bring the trait into scope as well as the types. Here‚Äôs an example of how a binary crate could use our aggregator library crate:  This code prints  new tweet: horse_ebooks: of course, as you probably already know, people.  Other crates that depend on the aggregator crate can also bring the Summary trait into scope to implement Summary on their own types. One restriction to note is that we can implement a trait on a type only if at least one of the trait or the type is local to our crate. For example, we can implement standard library traits like Display on a custom type like Tweet as part of our aggregator crate functionality, because the type Tweet is local to our aggregator crate. We can also implement Summary on Vec<T> in our aggregator crate, because the trait Summary is local to our aggregator crate.  But we can‚Äôt implement external traits on external types. For example, we can‚Äôt implement the Display trait on Vec<T> within our aggregator crate, because Display and Vec<T> are both defined in the standard library and aren‚Äôt local to our aggregator crate. This restriction is part of a property called coherence, and more specifically the orphan rule, so named because the parent type is not present. This rule ensures that other people‚Äôs code can‚Äôt break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn‚Äôt know which implementation to use.  Default Implementations Sometimes it‚Äôs useful to have default behavior for some or all of the methods in a trait instead of requiring implementations for all methods on every type. Then, as we implement the trait on a particular type, we can keep or override each method‚Äôs default behavior.  In Listing - we specify a default string for the summarize method of the Summary trait instead of only defining the method signature, as we did in Listing -.  Filename: src/lib.rs  Listing -: Defining a Summary trait with a default implementation of the summarize method  To use a default implementation to summarize instances of NewsArticle, we specify an empty impl block with impl Summary for NewsArticle {}.  Even though we‚Äôre no longer defining the summarize method on NewsArticle directly, we‚Äôve provided a default implementation and specified that NewsArticle implements the Summary trait. As a result, we can still call the summarize method on an instance of NewsArticle, like this:  This code prints New article available! (Read more...).  Creating a default implementation doesn‚Äôt require us to change anything about the implementation of Summary on Tweet in Listing -. The reason is that the syntax for overriding a default implementation is the same as the syntax for implementing a trait method that doesn‚Äôt have a default implementation.  Default implementations can call other methods in the same trait, even if those other methods don‚Äôt have a default implementation. In this way, a trait can provide a lot of useful functionality and only require implementors to specify a small part of it. For example, we could define the Summary trait to have a summarize_author method whose implementation is required, and then define a summarize method that has a default implementation that calls the summarize_author method:  To use this version of Summary, we only need to define summarize_author when we implement the trait on a type:  After we define summarize_author, we can call summarize on instances of the Tweet struct, and the default implementation of summarize will call the definition of summarize_author that we‚Äôve provided. Because we‚Äôve implemented summarize_author, the Summary trait has given us the behavior of the summarize method without requiring us to write any more code.  This code prints  new tweet: (Read more from @horse_ebooks...).  Note that it isn‚Äôt possible to call the default implementation from an overriding implementation of that same method.  Traits as Parameters Now that you know how to define and implement traits, we can explore how to use traits to define functions that accept many different types. We'll use the Summary trait we implemented on the NewsArticle and Tweet types in Listing - to define a notify function that calls the summarize method on its item parameter, which is of some type that implements the Summary trait. To do this, we use the impl Trait syntax, like this:  Instead of a concrete type for the item parameter, we specify the impl keyword and the trait name. This parameter accepts any type that implements the specified trait. In the body of notify, we can call any methods on item that come from the Summary trait, such as summarize. We can call notify and pass in any instance of NewsArticle or Tweet. Code that calls the function with any other type, such as a String or an i, won‚Äôt compile because those types don‚Äôt implement Summary.   Trait Bound Syntax The impl Trait syntax works for straightforward cases but is actually syntax sugar for a longer form known as a trait bound; it looks like this:  This longer form is equivalent to the example in the previous section but is more verbose. We place trait bounds with the declaration of the generic type parameter after a colon and inside angle brackets.  The impl Trait syntax is convenient and makes for more concise code in simple cases, while the fuller trait bound syntax can express more complexity in other cases. For example, we can have two parameters that implement Summary. Doing so with the impl Trait syntax looks like this:  Using impl Trait is appropriate if we want this function to allow item and item to have different types (as long as both types implement Summary). If we want to force both parameters to have the same type, however, we must use a trait bound, like this:  The generic type T specified as the type of the item and item parameters constrains the function such that the concrete type of the value passed as an argument for item and item must be the same.  Specifying Multiple Trait Bounds with the + Syntax We can also specify more than one trait bound. Say we wanted notify to use display formatting as well as summarize on item: we specify in the notify definition that item must implement both Display and Summary. We can do so using the + syntax:  The + syntax is also valid with trait bounds on generic types:  With the two trait bounds specified, the body of notify can call summarize and use {} to format item.  Clearer Trait Bounds with where Clauses Using too many trait bounds has its downsides. Each generic has its own trait bounds, so functions with multiple generic type parameters can contain lots of trait bound information between the function‚Äôs name and its parameter list, making the function signature hard to read. For this reason, Rust has alternate syntax for specifying trait bounds inside a where clause after the function signature. So instead of writing this:  we can use a where clause, like this:  This function‚Äôs signature is less cluttered: the function name, parameter list, and return type are close together, similar to a function without lots of trait bounds.  Returning Types that Implement Traits We can also use the impl Trait syntax in the return position to return a value of some type that implements a trait, as shown here:  By using impl Summary for the return type, we specify that the returns_summarizable function returns some type that implements the Summary trait without naming the concrete type. In this case, returns_summarizable returns a Tweet, but the code calling this function doesn‚Äôt need to know that.  The ability to specify a return type only by the trait it implements is especially useful in the context of closures and iterators, which we cover in Chapter . Closures and iterators create types that only the compiler knows or types that are very long to specify. The impl Trait syntax lets you concisely specify that a function returns some type that implements the Iterator trait without needing to write out a very long type.  However, you can only use impl Trait if you‚Äôre returning a single type. For example, this code that returns either a NewsArticle or a Tweet with the return type specified as impl Summary wouldn‚Äôt work:  Returning either a NewsArticle or a Tweet isn‚Äôt allowed due to restrictions around how the impl Trait syntax is implemented in the compiler. We‚Äôll cover how to write a function with this behavior in the ‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù section of Chapter .  Using Trait Bounds to Conditionally Implement Methods By using a trait bound with an impl block that uses generic type parameters, we can implement methods conditionally for types that implement the specified traits. For example, the type Pair<T> in Listing - always implements the new function to return a new instance of Pair<T> (recall from the ‚ÄúDefining Methods‚Äù section of Chapter  that Self is a type alias for the type of the impl block, which in this case is Pair<T>). But in the next impl block, Pair<T> only implements the cmp_display method if its inner type T implements the PartialOrd trait that enables comparison and the Display trait that enables printing.  Filename: src/lib.rs  Listing -: Conditionally implementing methods on a generic type depending on trait bounds  We can also conditionally implement a trait for any type that implements another trait. Implementations of a trait on any type that satisfies the trait bounds are called blanket implementations and are extensively used in the Rust standard library. For example, the standard library implements the ToString trait on any type that implements the Display trait. The impl block in the standard library looks similar to this code:  Because the standard library has this blanket implementation, we can call the to_string method defined by the ToString trait on any type that implements the Display trait. For example, we can turn integers into their corresponding String values like this because integers implement Display:  Blanket implementations appear in the documentation for the trait in the ‚ÄúImplementors‚Äù section.  Traits and trait bounds let us write code that uses generic type parameters to reduce duplication but also specify to the compiler that we want the generic type to have particular behavior. The compiler can then use the trait bound information to check that all the concrete types used with our code provide the correct behavior. In dynamically typed languages, we would get an error at runtime if we called a method on a type which didn‚Äôt define the method. But Rust moves these errors to compile time so we‚Äôre forced to fix the problems before our code is even able to run. Additionally, we don‚Äôt have to write code that checks for behavior at runtime because we‚Äôve already checked at compile time. Doing so improves performance without having to give up the flexibility of generics.  Validating References with Lifetimes Lifetimes are another kind of generic that we‚Äôve already been using. Rather than ensuring that a type has the behavior we want, lifetimes ensure that references are valid as long as we need them to be.  One detail we didn‚Äôt discuss in the ‚ÄúReferences and Borrowing‚Äù section in Chapter  is that every reference in Rust has a lifetime, which is the scope for which that reference is valid. Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred. We must only annotate types when multiple types are possible. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways. Rust requires us to annotate the relationships using generic lifetime parameters to ensure the actual references used at runtime will definitely be valid.  Annotating lifetimes is not a concept most other programming languages have, so this is going to feel unfamiliar. Although we won‚Äôt cover lifetimes in their entirety in this chapter, we‚Äôll discuss common ways you might encounter lifetime syntax so you can get comfortable with the concept.  Preventing Dangling References with Lifetimes The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it‚Äôs intended to reference. Consider the program in Listing -, which has an outer scope and an inner scope.  Listing -: An attempt to use a reference whose value has gone out of scope  Note: The examples in Listings -, -, and - declare variables without giving them an initial value, so the variable name exists in the outer scope. At first glance, this might appear to be in conflict with Rust‚Äôs having no null values. However, if we try to use a variable before giving it a value, we‚Äôll get a compile-time error, which shows that Rust indeed does not allow null values.  The outer scope declares a variable named r with no initial value, and the inner scope declares a variable named x with the initial value of . Inside the inner scope, we attempt to set the value of r as a reference to x. Then the inner scope ends, and we attempt to print the value in r. This code won‚Äôt compile because what the value r is referring to has gone out of scope before we try to use it. Here is the error message:  The variable x doesn‚Äôt ‚Äúlive long enough.‚Äù The reason is that x will be out of scope when the inner scope ends on line . But r is still valid for the outer scope; because its scope is larger, we say that it ‚Äúlives longer.‚Äù If Rust allowed this code to work, r would be referencing memory that was deallocated when x went out of scope, and anything we tried to do with r wouldn‚Äôt work correctly. So how does Rust determine that this code is invalid? It uses a borrow checker.  The Borrow Checker The Rust compiler has a borrow checker that compares scopes to determine whether all borrows are valid. Listing - shows the same code as Listing - but with annotations showing the lifetimes of the variables.  Listing -: Annotations of the lifetimes of r and x, named 'a and 'b, respectively  Here, we‚Äôve annotated the lifetime of r with 'a and the lifetime of x with 'b. As you can see, the inner 'b block is much smaller than the outer 'a lifetime block. At compile time, Rust compares the size of the two lifetimes and sees that r has a lifetime of 'a but that it refers to memory with a lifetime of 'b. The program is rejected because 'b is shorter than 'a: the subject of the reference doesn‚Äôt live as long as the reference.  Listing - fixes the code so it doesn‚Äôt have a dangling reference and compiles without any errors.  Listing -: A valid reference because the data has a longer lifetime than the reference  Here, x has the lifetime 'b, which in this case is larger than 'a. This means r can reference x because Rust knows that the reference in r will always be valid while x is valid.  Now that you know what the lifetimes of references are and how Rust analyzes lifetimes to ensure references will always be valid, let‚Äôs explore generic lifetimes of parameters and return values in the context of functions.  Generic Lifetimes in Functions We‚Äôll write a function that returns the longer of two string slices. This function will take two string slices and return a single string slice. After we‚Äôve implemented the longest function, the code in Listing - should print The longest string is abcd.  Filename: src/main.rs  Listing -: A main function that calls the longest function to find the longer of two string slices  Note that we want the function to take string slices, which are references, rather than strings, because we don‚Äôt want the longest function to take ownership of its parameters. Refer to the ‚ÄúString Slices as Parameters‚Äù section in Chapter  for more discussion about why the parameters we use in Listing - are the ones we want.  If we try to implement the longest function as shown in Listing -, it won‚Äôt compile.  Filename: src/main.rs  Listing -: An implementation of the longest function that returns the longer of two string slices but does not yet compile  Instead, we get the following error that talks about lifetimes:  The help text reveals that the return type needs a generic lifetime parameter on it because Rust can‚Äôt tell whether the reference being returned refers to x or y. Actually, we don‚Äôt know either, because the if block in the body of this function returns a reference to x and the else block returns a reference to y!  When we‚Äôre defining this function, we don‚Äôt know the concrete values that will be passed into this function, so we don‚Äôt know whether the if case or the else case will execute. We also don‚Äôt know the concrete lifetimes of the references that will be passed in, so we can‚Äôt look at the scopes as we did in Listings - and - to determine whether the reference we return will always be valid. The borrow checker can‚Äôt determine this either, because it doesn‚Äôt know how the lifetimes of x and y relate to the lifetime of the return value. To fix this error, we‚Äôll add generic lifetime parameters that define the relationship between the references so the borrow checker can perform its analysis.  Lifetime Annotation Syntax Lifetime annotations don‚Äôt change how long any of the references live. Rather, they describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.  Lifetime annotations have a slightly unusual syntax: the names of lifetime parameters must start with an apostrophe (') and are usually all lowercase and very short, like generic types. Most people use the name 'a for the first lifetime annotation. We place lifetime parameter annotations after the & of a reference, using a space to separate the annotation from the reference‚Äôs type.  Here are some examples: a reference to an i without a lifetime parameter, a reference to an i that has a lifetime parameter named 'a, and a mutable reference to an i that also has the lifetime 'a.  One lifetime annotation by itself doesn‚Äôt have much meaning, because the annotations are meant to tell Rust how generic lifetime parameters of multiple references relate to each other. Let‚Äôs examine how the lifetime annotations relate to each other in the context of the longest function.  Lifetime Annotations in Function Signatures To use lifetime annotations in function signatures, we need to declare the generic lifetime parameters inside angle brackets between the function name and the parameter list, just as we did with generic type parameters.  We want the signature to express the following constraint: the returned reference will be valid as long as both the parameters are valid. This is the relationship between lifetimes of the parameters and the return value. We‚Äôll name the lifetime 'a and then add it to each reference, as shown in Listing -.  Filename: src/main.rs  Listing -: The longest function definition specifying that all the references in the signature must have the same lifetime 'a  This code should compile and produce the result we want when we use it with the main function in Listing -.  The function signature now tells Rust that for some lifetime 'a, the function takes two parameters, both of which are string slices that live at least as long as lifetime 'a. The function signature also tells Rust that the string slice returned from the function will live at least as long as lifetime 'a. In practice, it means that the lifetime of the reference returned by the longest function is the same as the smaller of the lifetimes of the values referred to by the function arguments. These relationships are what we want Rust to use when analyzing this code.  Remember, when we specify the lifetime parameters in this function signature, we‚Äôre not changing the lifetimes of any values passed in or returned. Rather, we‚Äôre specifying that the borrow checker should reject any values that don‚Äôt adhere to these constraints. Note that the longest function doesn‚Äôt need to know exactly how long x and y will live, only that some scope can be substituted for 'a that will satisfy this signature.  When annotating lifetimes in functions, the annotations go in the function signature, not in the function body. The lifetime annotations become part of the contract of the function, much like the types in the signature. Having function signatures contain the lifetime contract means the analysis the Rust compiler does can be simpler. If there‚Äôs a problem with the way a function is annotated or the way it is called, the compiler errors can point to the part of our code and the constraints more precisely. If, instead, the Rust compiler made more inferences about what we intended the relationships of the lifetimes to be, the compiler might only be able to point to a use of our code many steps away from the cause of the problem.  When we pass concrete references to longest, the concrete lifetime that is substituted for 'a is the part of the scope of x that overlaps with the scope of y. In other words, the generic lifetime 'a will get the concrete lifetime that is equal to the smaller of the lifetimes of x and y. Because we‚Äôve annotated the returned reference with the same lifetime parameter 'a, the returned reference will also be valid for the length of the smaller of the lifetimes of x and y.  Let‚Äôs look at how the lifetime annotations restrict the longest function by passing in references that have different concrete lifetimes. Listing - is a straightforward example.  Filename: src/main.rs  Listing -: Using the longest function with references to String values that have different concrete lifetimes  In this example, string is valid until the end of the outer scope, string is valid until the end of the inner scope, and result references something that is valid until the end of the inner scope. Run this code, and you‚Äôll see that the borrow checker approves; it will compile and print The longest string is long string is long.  Next, let‚Äôs try an example that shows that the lifetime of the reference in result must be the smaller lifetime of the two arguments. We‚Äôll move the declaration of the result variable outside the inner scope but leave the assignment of the value to the result variable inside the scope with string. Then we‚Äôll move the println! that uses result to outside the inner scope, after the inner scope has ended. The code in Listing - will not compile.  Filename: src/main.rs  Listing -: Attempting to use result after string has gone out of scope  When we try to compile this code, we get this error:  The error shows that for result to be valid for the println! statement, string would need to be valid until the end of the outer scope. Rust knows this because we annotated the lifetimes of the function parameters and return values using the same lifetime parameter 'a.  As humans, we can look at this code and see that string is longer than string and therefore result will contain a reference to string. Because string has not gone out of scope yet, a reference to string will still be valid for the println! statement. However, the compiler can‚Äôt see that the reference is valid in this case. We‚Äôve told Rust that the lifetime of the reference returned by the longest function is the same as the smaller of the lifetimes of the references passed in. Therefore, the borrow checker disallows the code in Listing - as possibly having an invalid reference.  Try designing more experiments that vary the values and lifetimes of the references passed in to the longest function and how the returned reference is used. Make hypotheses about whether or not your experiments will pass the borrow checker before you compile; then check to see if you‚Äôre right!  Thinking in Terms of Lifetimes The way in which you need to specify lifetime parameters depends on what your function is doing. For example, if we changed the implementation of the longest function to always return the first parameter rather than the longest string slice, we wouldn‚Äôt need to specify a lifetime on the y parameter. The following code will compile:  Filename: src/main.rs  We‚Äôve specified a lifetime parameter 'a for the parameter x and the return type, but not for the parameter y, because the lifetime of y does not have any relationship with the lifetime of x or the return value.  When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters. If the reference returned does not refer to one of the parameters, it must refer to a value created within this function. However, this would be a dangling reference because the value will go out of scope at the end of the function. Consider this attempted implementation of the longest function that won‚Äôt compile:  Filename: src/main.rs  Here, even though we‚Äôve specified a lifetime parameter 'a for the return type, this implementation will fail to compile because the return value lifetime is not related to the lifetime of the parameters at all. Here is the error message we get:  The problem is that result goes out of scope and gets cleaned up at the end of the longest function. We‚Äôre also trying to return a reference to result from the function. There is no way we can specify lifetime parameters that would change the dangling reference, and Rust won‚Äôt let us create a dangling reference. In this case, the best fix would be to return an owned data type rather than a reference so the calling function is then responsible for cleaning up the value.  Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they‚Äôre connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.  Lifetime Annotations in Struct Definitions So far, the structs we‚Äôve defined all hold owned types. We can define structs to hold references, but in that case we would need to add a lifetime annotation on every reference in the struct‚Äôs definition. Listing - has a struct named ImportantExcerpt that holds a string slice.  Filename: src/main.rs  Listing -: A struct that holds a reference, requiring a lifetime annotation  This struct has the single field part that holds a string slice, which is a reference. As with generic data types, we declare the name of the generic lifetime parameter inside angle brackets after the name of the struct so we can use the lifetime parameter in the body of the struct definition. This annotation means an instance of ImportantExcerpt can‚Äôt outlive the reference it holds in its part field.  The main function here creates an instance of the ImportantExcerpt struct that holds a reference to the first sentence of the String owned by the variable novel. The data in novel exists before the ImportantExcerpt instance is created. In addition, novel doesn‚Äôt go out of scope until after the ImportantExcerpt goes out of scope, so the reference in the ImportantExcerpt instance is valid.  Lifetime Elision You‚Äôve learned that every reference has a lifetime and that you need to specify lifetime parameters for functions or structs that use references. However, in Chapter  we had a function in Listing -, shown again in Listing -, that compiled without lifetime annotations.  Filename: src/lib.rs  Listing -: A function we defined in Listing - that compiled without lifetime annotations, even though the parameter and return type are references  The reason this function compiles without lifetime annotations is historical: in early versions (pre-.) of Rust, this code wouldn‚Äôt have compiled because every reference needed an explicit lifetime. At that time, the function signature would have been written like this:  After writing a lot of Rust code, the Rust team found that Rust programmers were entering the same lifetime annotations over and over in particular situations. These situations were predictable and followed a few deterministic patterns. The developers programmed these patterns into the compiler‚Äôs code so the borrow checker could infer the lifetimes in these situations and wouldn‚Äôt need explicit annotations.  This piece of Rust history is relevant because it‚Äôs possible that more deterministic patterns will emerge and be added to the compiler. In the future, even fewer lifetime annotations might be required.  The patterns programmed into Rust‚Äôs analysis of references are called the lifetime elision rules. These aren‚Äôt rules for programmers to follow; they‚Äôre a set of particular cases that the compiler will consider, and if your code fits these cases, you don‚Äôt need to write the lifetimes explicitly.  The elision rules don‚Äôt provide full inference. If Rust deterministically applies the rules but there is still ambiguity as to what lifetimes the references have, the compiler won‚Äôt guess what the lifetime of the remaining references should be. Instead of guessing, the compiler will give you an error that you can resolve by adding the lifetime annotations.  Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.  The compiler uses three rules to figure out the lifetimes of the references when there aren‚Äôt explicit annotations. The first rule applies to input lifetimes, and the second and third rules apply to output lifetimes. If the compiler gets to the end of the three rules and there are still references for which it can‚Äôt figure out lifetimes, the compiler will stop with an error. These rules apply to fn definitions as well as impl blocks.  The first rule is that the compiler assigns a lifetime parameter to each parameter that‚Äôs a reference. In other words, a function with one parameter gets one lifetime parameter: fn foo<'a>(x: &'a i); a function with two parameters gets two separate lifetime parameters: fn foo<'a, 'b>(x: &'a i, y: &'b i); and so on.  The second rule is that, if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters: fn foo<'a>(x: &'a i) -> &'a i.  The third rule is that, if there are multiple input lifetime parameters, but one of them is &self or &mut self because this is a method, the lifetime of self is assigned to all output lifetime parameters. This third rule makes methods much nicer to read and write because fewer symbols are necessary.  Let‚Äôs pretend we‚Äôre the compiler. We‚Äôll apply these rules to figure out the lifetimes of the references in the signature of the first_word function in Listing -. The signature starts without any lifetimes associated with the references:  Then the compiler applies the first rule, which specifies that each parameter gets its own lifetime. We‚Äôll call it 'a as usual, so now the signature is this:  The second rule applies because there is exactly one input lifetime. The second rule specifies that the lifetime of the one input parameter gets assigned to the output lifetime, so the signature is now this:  Now all the references in this function signature have lifetimes, and the compiler can continue its analysis without needing the programmer to annotate the lifetimes in this function signature.  Let‚Äôs look at another example, this time using the longest function that had no lifetime parameters when we started working with it in Listing -:  Let‚Äôs apply the first rule: each parameter gets its own lifetime. This time we have two parameters instead of one, so we have two lifetimes:  You can see that the second rule doesn‚Äôt apply because there is more than one input lifetime. The third rule doesn‚Äôt apply either, because longest is a function rather than a method, so none of the parameters are self. After working through all three rules, we still haven‚Äôt figured out what the return type‚Äôs lifetime is. This is why we got an error trying to compile the code in Listing -: the compiler worked through the lifetime elision rules but still couldn‚Äôt figure out all the lifetimes of the references in the signature.  Because the third rule really only applies in method signatures, we‚Äôll look at lifetimes in that context next to see why the third rule means we don‚Äôt have to annotate lifetimes in method signatures very often.  Lifetime Annotations in Method Definitions When we implement methods on a struct with lifetimes, we use the same syntax as that of generic type parameters shown in Listing -. Where we declare and use the lifetime parameters depends on whether they‚Äôre related to the struct fields or the method parameters and return values.  Lifetime names for struct fields always need to be declared after the impl keyword and then used after the struct‚Äôs name, because those lifetimes are part of the struct‚Äôs type.  In method signatures inside the impl block, references might be tied to the lifetime of references in the struct‚Äôs fields, or they might be independent. In addition, the lifetime elision rules often make it so that lifetime annotations aren‚Äôt necessary in method signatures. Let‚Äôs look at some examples using the struct named ImportantExcerpt that we defined in Listing -.  First, we‚Äôll use a method named level whose only parameter is a reference to self and whose return value is an i, which is not a reference to anything:  The lifetime parameter declaration after impl and its use after the type name are required, but we‚Äôre not required to annotate the lifetime of the reference to self because of the first elision rule.  Here is an example where the third lifetime elision rule applies:  There are two input lifetimes, so Rust applies the first lifetime elision rule and gives both &self and announcement their own lifetimes. Then, because one of the parameters is &self, the return type gets the lifetime of &self, and all lifetimes have been accounted for.  The Static Lifetime One special lifetime we need to discuss is 'static, which denotes that the affected reference can live for the entire duration of the program. All string literals have the 'static lifetime, which we can annotate as follows:  The text of this string is stored directly in the program‚Äôs binary, which is always available. Therefore, the lifetime of all string literals is 'static.  You might see suggestions to use the 'static lifetime in error messages. But before specifying 'static as the lifetime for a reference, think about whether the reference you have actually lives the entire lifetime of your program or not, and whether you want it to. Most of the time, an error message suggesting the 'static lifetime results from attempting to create a dangling reference or a mismatch of the available lifetimes. In such cases, the solution is fixing those problems, not specifying the 'static lifetime.  Generic Type Parameters, Trait Bounds, and Lifetimes Together Let‚Äôs briefly look at the syntax of specifying generic type parameters, trait bounds, and lifetimes all in one function!  This is the longest function from Listing - that returns the longer of two string slices. But now it has an extra parameter named ann of the generic type T, which can be filled in by any type that implements the Display trait as specified by the where clause. This extra parameter will be printed using {}, which is why the Display trait bound is necessary. Because lifetimes are a type of generic, the declarations of the lifetime parameter 'a and the generic type parameter T go in the same list inside the angle brackets after the function name.  Summary We covered a lot in this chapter! Now that you know about generic type parameters, traits and trait bounds, and generic lifetime parameters, you‚Äôre ready to write code without repetition that works in many different situations. Generic type parameters let you apply the code to different types. Traits and trait bounds ensure that even though the types are generic, they‚Äôll have the behavior the code needs. You learned how to use lifetime annotations to ensure that this flexible code won‚Äôt have any dangling references. And all of this analysis happens at compile time, which doesn‚Äôt affect runtime performance!  Believe it or not, there is much more to learn on the topics we discussed in this chapter: Chapter  discusses trait objects, which are another way to use traits. There are also more complex scenarios involving lifetime annotations that you will only need in very advanced scenarios; for those, you should read the Rust Reference. But next, you‚Äôll learn how to write tests in Rust so you can make sure your code is working the way it should.  Writing Automated Tests In his  essay ‚ÄúThe Humble Programmer,‚Äù Edsger W. Dijkstra said that ‚ÄúProgram testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.‚Äù That doesn‚Äôt mean we shouldn‚Äôt try to test as much as we can!  Correctness in our programs is the extent to which our code does what we intend it to do. Rust is designed with a high degree of concern about the correctness of programs, but correctness is complex and not easy to prove. Rust‚Äôs type system shoulders a huge part of this burden, but the type system cannot catch everything. As such, Rust includes support for writing automated software tests.  Say we write a function add_two that adds  to whatever number is passed to it. This function‚Äôs signature accepts an integer as a parameter and returns an integer as a result. When we implement and compile that function, Rust does all the type checking and borrow checking that you‚Äôve learned so far to ensure that, for instance, we aren‚Äôt passing a String value or an invalid reference to this function. But Rust can‚Äôt check that this function will do precisely what we intend, which is return the parameter plus  rather than, say, the parameter plus  or the parameter minus ! That‚Äôs where tests come in.  We can write tests that assert, for example, that when we pass  to the add_two function, the returned value is . We can run these tests whenever we make changes to our code to make sure any existing correct behavior has not changed.  Testing is a complex skill: although we can‚Äôt cover every detail about how to write good tests in one chapter, we‚Äôll discuss the mechanics of Rust‚Äôs testing facilities. We‚Äôll talk about the annotations and macros available to you when writing your tests, the default behavior and options provided for running your tests, and how to organize tests into unit tests and integration tests.  How to Write Tests Tests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:  Set up any needed data or state. Run the code you want to test. Assert the results are what you expect. Let‚Äôs look at the features Rust provides specifically for writing tests that take these actions, which include the test attribute, a few macros, and the should_panic attribute.  The Anatomy of a Test Function At its simplest, a test in Rust is a function that‚Äôs annotated with the test attribute. Attributes are metadata about pieces of Rust code; one example is the derive attribute we used with structs in Chapter . To change a function into a test function, add #[test] on the line before fn. When you run your tests with the cargo test command, Rust builds a test runner binary that runs the annotated functions and reports on whether each test function passes or fails.  Whenever we make a new library project with Cargo, a test module with a test function in it is automatically generated for us. This module gives you a template for writing your tests so you don‚Äôt have to look up the exact structure and syntax every time you start a new project. You can add as many additional test functions and as many test modules as you want!  We‚Äôll explore some aspects of how tests work by experimenting with the template test before we actually test any code. Then we‚Äôll write some real-world tests that call some code that we‚Äôve written and assert that its behavior is correct.  Let‚Äôs create a new library project called adder that will add two numbers:  The contents of the src/lib.rs file in your adder library should look like Listing -.  Filename: src/lib.rs  Listing -: The test module and function generated automatically by cargo new  For now, let‚Äôs focus solely on the it_works() function. Note the #[test] annotation: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We might also have non-test functions in the tests module to help set up common scenarios or perform common operations, so we always need to indicate which functions are tests.  The example function body uses the assert_eq! macro to assert that result, which contains the result of adding  and , equals . This assertion serves as an example of the format for a typical test. Let‚Äôs run it to see that this test passes.  The cargo test command runs all tests in our project, as shown in Listing -.  Listing -: The output from running the automatically generated test  Cargo compiled and ran the test. We see the line running  test. The next line shows the name of the generated test function, called it_works, and that the result of running that test is ok. The overall summary test result: ok. means that all the tests passed, and the portion that reads  passed;  failed totals the number of tests that passed or failed.  It‚Äôs possible to mark a test as ignored so it doesn‚Äôt run in a particular instance; we‚Äôll cover that in the ‚ÄúIgnoring Some Tests Unless Specifically Requested‚Äù section later in this chapter. Because we haven‚Äôt done that here, the summary shows  ignored. We can also pass an argument to the cargo test command to run only tests whose name matches a string; this is called filtering and we‚Äôll cover that in the ‚ÄúRunning a Subset of Tests by Name‚Äù section. We also haven‚Äôt filtered the tests being run, so the end of the summary shows  filtered out.  The  measured statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See the documentation about benchmark tests to learn more.  The next part of the test output starting at Doc-tests adder is for the results of any documentation tests. We don‚Äôt have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps keep your docs and your code in sync! We‚Äôll discuss how to write documentation tests in the ‚ÄúDocumentation Comments as Tests‚Äù section of Chapter . For now, we‚Äôll ignore the Doc-tests output.  Let‚Äôs start to customize the test to our own needs. First change the name of the it_works function to a different name, such as exploration, like so:  Filename: src/lib.rs  Then run cargo test again. The output now shows exploration instead of it_works:  Now we‚Äôll add another test, but this time we‚Äôll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. In Chapter , we talked about how the simplest way to panic is to call the panic! macro. Enter the new test as a function named another, so your src/lib.rs file looks like Listing -.  Filename: src/lib.rs  Listing -: Adding a second test that will fail because we call the panic! macro  Run the tests again using cargo test. The output should look like Listing -, which shows that our exploration test passed and another failed.  Listing -: Test results when one test passes and one test fails  Instead of ok, the line test tests::another shows FAILED. Two new sections appear between the individual results and the summary: the first displays the detailed reason for each test failure. In this case, we get the details that another failed because it panicked at 'Make this test fail' on line  in the src/lib.rs file. The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output. We can use the name of a failing test to run just that test to more easily debug it; we‚Äôll talk more about ways to run tests in the ‚ÄúControlling How Tests Are Run‚Äù section.  The summary line displays at the end: overall, our test result is FAILED. We had one test pass and one test fail.  Now that you‚Äôve seen what the test results look like in different scenarios, let‚Äôs look at some macros other than panic! that are useful in tests.  Checking Results with the assert! Macro The assert! macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to true. We give the assert! macro an argument that evaluates to a Boolean. If the value is true, nothing happens and the test passes. If the value is false, the assert! macro calls panic! to cause the test to fail. Using the assert! macro helps us check that our code is functioning in the way we intend.  In Chapter , Listing -, we used a Rectangle struct and a can_hold method, which are repeated here in Listing -. Let‚Äôs put this code in the src/lib.rs file, then write some tests for it using the assert! macro.  Filename: src/lib.rs  Listing -: Using the Rectangle struct and its can_hold method from Chapter   The can_hold method returns a Boolean, which means it‚Äôs a perfect use case for the assert! macro. In Listing -, we write a test that exercises the can_hold method by creating a Rectangle instance that has a width of  and a height of  and asserting that it can hold another Rectangle instance that has a width of  and a height of .  Filename: src/lib.rs  Listing -: A test for can_hold that checks whether a larger rectangle can indeed hold a smaller rectangle  Note that we‚Äôve added a new line inside the tests module: use super::*;. The tests module is a regular module that follows the usual visibility rules we covered in Chapter  in the ‚ÄúPaths for Referring to an Item in the Module Tree‚Äù section. Because the tests module is an inner module, we need to bring the code under test in the outer module into the scope of the inner module. We use a glob here so anything we define in the outer module is available to this tests module.  We‚Äôve named our test larger_can_hold_smaller, and we‚Äôve created the two Rectangle instances that we need. Then we called the assert! macro and passed it the result of calling larger.can_hold(&smaller). This expression is supposed to return true, so our test should pass. Let‚Äôs find out!  It does pass! Let‚Äôs add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:  Filename: src/lib.rs  Because the correct result of the can_hold function in this case is false, we need to negate that result before we pass it to the assert! macro. As a result, our test will pass if can_hold returns false:  Two tests that pass! Now let‚Äôs see what happens to our test results when we introduce a bug in our code. We‚Äôll change the implementation of the can_hold method by replacing the greater-than sign with a less-than sign when it compares the widths:  Running the tests now produces the following:  Our tests caught the bug! Because larger.width is  and smaller.width is , the comparison of the widths in can_hold now returns false:  is not less than .  Testing Equality with the assert_eq! and assert_ne! Macros A common way to verify functionality is to test for equality between the result of the code under test and the value you expect the code to return. You could do this using the assert! macro and passing it an expression using the == operator. However, this is such a common test that the standard library provides a pair of macros‚Äîassert_eq! and assert_ne!‚Äîto perform this test more conveniently. These macros compare two arguments for equality or inequality, respectively. They‚Äôll also print the two values if the assertion fails, which makes it easier to see why the test failed; conversely, the assert! macro only indicates that it got a false value for the == expression, without printing the values that led to the false value.  In Listing -, we write a function named add_two that adds  to its parameter, then we test this function using the assert_eq! macro.  Filename: src/lib.rs  Listing -: Testing the function add_two using the assert_eq! macro  Let‚Äôs check that it passes!  We pass  as the argument to assert_eq!, which is equal to the result of calling add_two(). The line for this test is test tests::it_adds_two ... ok, and the ok text indicates that our test passed!  Let‚Äôs introduce a bug into our code to see what assert_eq! looks like when it fails. Change the implementation of the add_two function to instead add :  Run the tests again:  Our test caught the bug! The it_adds_two test failed, and the message tells us that the assertion that fails was assertion `left == right` failed and what the left and right values are. This message helps us start debugging: the left argument was  but the right argument, where we had add_two(), was . You can imagine that this would be especially helpful when we have a lot of tests going on.  Note that in some languages and test frameworks, the parameters to equality assertion functions are called expected and actual, and the order in which we specify the arguments matters. However, in Rust, they‚Äôre called left and right, and the order in which we specify the value we expect and the value the code produces doesn‚Äôt matter. We could write the assertion in this test as assert_eq!(add_two(), ), which would result in the same failure message that displays assertion failed: `(left == right)`.  The assert_ne! macro will pass if the two values we give it are not equal and fail if they‚Äôre equal. This macro is most useful for cases when we‚Äôre not sure what a value will be, but we know what the value definitely shouldn‚Äôt be. For example, if we‚Äôre testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.  Under the surface, the assert_eq! and assert_ne! macros use the operators == and !=, respectively. When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the PartialEq and Debug traits. All primitive types and most of the standard library types implement these traits. For structs and enums that you define yourself, you‚Äôll need to implement PartialEq to assert equality of those types. You‚Äôll also need to implement Debug to print the values when the assertion fails. Because both traits are derivable traits, as mentioned in Listing - in Chapter , this is usually as straightforward as adding the #[derive(PartialEq, Debug)] annotation to your struct or enum definition. See Appendix C, ‚ÄúDerivable Traits,‚Äù for more details about these and other derivable traits.  Adding Custom Failure Messages You can also add a custom message to be printed with the failure message as optional arguments to the assert!, assert_eq!, and assert_ne! macros. Any arguments specified after the required arguments are passed along to the format! macro (discussed in Chapter  in the ‚ÄúConcatenation with the + Operator or the format! Macro‚Äù section), so you can pass a format string that contains {} placeholders and values to go in those placeholders. Custom messages are useful for documenting what an assertion means; when a test fails, you‚Äôll have a better idea of what the problem is with the code.  For example, let‚Äôs say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:  Filename: src/lib.rs  The requirements for this program haven‚Äôt been agreed upon yet, and we‚Äôre pretty sure the Hello text at the beginning of the greeting will change. We decided we don‚Äôt want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the greeting function, we‚Äôll just assert that the output contains the text of the input parameter.  Now let‚Äôs introduce a bug into this code by changing greeting to exclude name to see what the default test failure looks like:  Running this test produces the following:  This result just indicates that the assertion failed and which line the assertion is on. A more useful failure message would print the value from the greeting function. Let‚Äôs add a custom failure message composed of a format string with a placeholder filled in with the actual value we got from the greeting function:  Now when we run the test, we‚Äôll get a more informative error message:  We can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.  Checking for Panics with should_panic In addition to checking return values, it‚Äôs important to check that our code handles error conditions as we expect. For example, consider the Guess type that we created in Chapter , Listing -. Other code that uses Guess depends on the guarantee that Guess instances will contain only values between  and . We can write a test that ensures that attempting to create a Guess instance with a value outside that range panics.  We do this by adding the attribute should_panic to our test function. The test passes if the code inside the function panics; the test fails if the code inside the function doesn‚Äôt panic.  Listing - shows a test that checks that the error conditions of Guess::new happen when we expect them to.  Filename: src/lib.rs  Listing -: Testing that a condition will cause a panic!  We place the #[should_panic] attribute after the #[test] attribute and before the test function it applies to. Let‚Äôs look at the result when this test passes:  Looks good! Now let‚Äôs introduce a bug in our code by removing the condition that the new function will panic if the value is greater than :  When we run the test in Listing -, it will fail:  We don‚Äôt get a very helpful message in this case, but when we look at the test function, we see that it‚Äôs annotated with #[should_panic]. The failure we got means that the code in the test function did not cause a panic.  Tests that use should_panic can be imprecise. A should_panic test would pass even if the test panics for a different reason from the one we were expecting. To make should_panic tests more precise, we can add an optional expected parameter to the should_panic attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for Guess in Listing - where the new function panics with different messages depending on whether the value is too small or too large.  Filename: src/lib.rs  Listing -: Testing for a panic! with a panic message containing a specified substring  This test will pass because the value we put in the should_panic attribute‚Äôs expected parameter is a substring of the message that the Guess::new function panics with. We could have specified the entire panic message that we expect, which in this case would be Guess value must be less than or equal to , got . What you choose to specify depends on how much of the panic message is unique or dynamic and how precise you want your test to be. In this case, a substring of the panic message is enough to ensure that the code in the test function executes the else if value >  case.  To see what happens when a should_panic test with an expected message fails, let‚Äôs again introduce a bug into our code by swapping the bodies of the if value <  and the else if value >  blocks:  This time when we run the should_panic test, it will fail:  The failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string less than or equal to . The panic message that we did get in this case was Guess value must be greater than or equal to , got . Now we can start figuring out where our bug is!  Using Result<T, E> in Tests Our tests so far all panic when they fail. We can also write tests that use Result<T, E>! Here‚Äôs the test from Listing -, rewritten to use Result<T, E> and return an Err instead of panicking:  The it_works function now has the Result<(), String> return type. In the body of the function, rather than calling the assert_eq! macro, we return Ok(()) when the test passes and an Err with a String inside when the test fails.  Writing tests so they return a Result<T, E> enables you to use the question mark operator in the body of tests, which can be a convenient way to write tests that should fail if any operation within them returns an Err variant.  You can‚Äôt use the #[should_panic] annotation on tests that use Result<T, E>. To assert that an operation returns an Err variant, don‚Äôt use the question mark operator on the Result<T, E> value. Instead, use assert!(value.is_err()).  Now that you know several ways to write tests, let‚Äôs look at what is happening when we run our tests and explore the different options we can use with cargo test.  Controlling How Tests Are Run Just as cargo run compiles your code and then runs the resulting binary, cargo test compiles your code in test mode and runs the resulting test binary. The default behavior of the binary produced by cargo test is to run all the tests in parallel and capture output generated during test runs, preventing the output from being displayed and making it easier to read the output related to the test results. You can, however, specify command line options to change this default behavior.  Some command line options go to cargo test, and some go to the resulting test binary. To separate these two types of arguments, you list the arguments that go to cargo test followed by the separator -- and then the ones that go to the test binary. Running cargo test --help displays the options you can use with cargo test, and running cargo test -- --help displays the options you can use after the separator.  Running Tests in Parallel or Consecutively When you run multiple tests, by default they run in parallel using threads, meaning they finish running faster and you get feedback quicker. Because the tests are running at the same time, you must make sure your tests don‚Äôt depend on each other or on any shared state, including a shared environment, such as the current working directory or environment variables.  For example, say each of your tests runs some code that creates a file on disk named test-output.txt and writes some data to that file. Then each test reads the data in that file and asserts that the file contains a particular value, which is different in each test. Because the tests run at the same time, one test might overwrite the file in the time between another test writing and reading the file. The second test will then fail, not because the code is incorrect but because the tests have interfered with each other while running in parallel. One solution is to make sure each test writes to a different file; another solution is to run the tests one at a time.  If you don‚Äôt want to run the tests in parallel or if you want more fine-grained control over the number of threads used, you can send the --test-threads flag and the number of threads you want to use to the test binary. Take a look at the following example:  We set the number of test threads to , telling the program not to use any parallelism. Running the tests using one thread will take longer than running them in parallel, but the tests won‚Äôt interfere with each other if they share state.  Showing Function Output By default, if a test passes, Rust‚Äôs test library captures anything printed to standard output. For example, if we call println! in a test and the test passes, we won‚Äôt see the println! output in the terminal; we‚Äôll see only the line that indicates the test passed. If a test fails, we‚Äôll see whatever was printed to standard output with the rest of the failure message.  As an example, Listing - has a silly function that prints the value of its parameter and returns , as well as a test that passes and a test that fails.  Filename: src/lib.rs  Listing -: Tests for a function that calls println!  When we run these tests with cargo test, we‚Äôll see the following output:  Note that nowhere in this output do we see I got the value , which is what is printed when the test that passes runs. That output has been captured. The output from the test that failed, I got the value , appears in the section of the test summary output, which also shows the cause of the test failure.  If we want to see printed values for passing tests as well, we can tell Rust to also show the output of successful tests with --show-output.  When we run the tests in Listing - again with the --show-output flag, we see the following output:  Running a Subset of Tests by Name Sometimes, running a full test suite can take a long time. If you‚Äôre working on code in a particular area, you might want to run only the tests pertaining to that code. You can choose which tests to run by passing cargo test the name or names of the test(s) you want to run as an argument.  To demonstrate how to run a subset of tests, we‚Äôll first create three tests for our add_two function, as shown in Listing -, and choose which ones to run.  Filename: src/lib.rs  Listing -: Three tests with three different names  If we run the tests without passing any arguments, as we saw earlier, all the tests will run in parallel:  Running Single Tests We can pass the name of any test function to cargo test to run only that test:  Only the test with the name one_hundred ran; the other two tests didn‚Äôt match that name. The test output lets us know we had more tests that didn‚Äôt run by displaying  filtered out at the end.  We can‚Äôt specify the names of multiple tests in this way; only the first value given to cargo test will be used. But there is a way to run multiple tests.  Filtering to Run Multiple Tests We can specify part of a test name, and any test whose name matches that value will be run. For example, because two of our tests‚Äô names contain add, we can run those two by running cargo test add:  This command ran all tests with add in the name and filtered out the test named one_hundred. Also note that the module in which a test appears becomes part of the test‚Äôs name, so we can run all the tests in a module by filtering on the module‚Äôs name.  Ignoring Some Tests Unless Specifically Requested Sometimes a few specific tests can be very time-consuming to execute, so you might want to exclude them during most runs of cargo test. Rather than listing as arguments all tests you do want to run, you can instead annotate the time-consuming tests using the ignore attribute to exclude them, as shown here:  Filename: src/lib.rs  After #[test] we add the #[ignore] line to the test we want to exclude. Now when we run our tests, it_works runs, but expensive_test doesn‚Äôt:  The expensive_test function is listed as ignored. If we want to run only the ignored tests, we can use cargo test -- --ignored:  By controlling which tests run, you can make sure your cargo test results will be fast. When you‚Äôre at a point where it makes sense to check the results of the ignored tests and you have time to wait for the results, you can run cargo test -- --ignored instead. If you want to run all tests whether they‚Äôre ignored or not, you can run cargo test -- --include-ignored.  Test Organization As mentioned at the start of the chapter, testing is a complex discipline, and different people use different terminology and organization. The Rust community thinks about tests in terms of two main categories: unit tests and integration tests. Unit tests are small and more focused, testing one module in isolation at a time, and can test private interfaces. Integration tests are entirely external to your library and use your code in the same way any other external code would, using only the public interface and potentially exercising multiple modules per test.  Writing both kinds of tests is important to ensure that the pieces of your library are doing what you expect them to, separately and together.  Unit Tests The purpose of unit tests is to test each unit of code in isolation from the rest of the code to quickly pinpoint where code is and isn‚Äôt working as expected. You‚Äôll put unit tests in the src directory in each file with the code that they‚Äôre testing. The convention is to create a module named tests in each file to contain the test functions and to annotate the module with cfg(test).  The Tests Module and #[cfg(test)] The #[cfg(test)] annotation on the tests module tells Rust to compile and run the test code only when you run cargo test, not when you run cargo build. This saves compile time when you only want to build the library and saves space in the resulting compiled artifact because the tests are not included. You‚Äôll see that because integration tests go in a different directory, they don‚Äôt need the #[cfg(test)] annotation. However, because unit tests go in the same files as the code, you‚Äôll use #[cfg(test)] to specify that they shouldn‚Äôt be included in the compiled result.  Recall that when we generated the new adder project in the first section of this chapter, Cargo generated this code for us:  Filename: src/lib.rs  This code is the automatically generated test module. The attribute cfg stands for configuration and tells Rust that the following item should only be included given a certain configuration option. In this case, the configuration option is test, which is provided by Rust for compiling and running tests. By using the cfg attribute, Cargo compiles our test code only if we actively run the tests with cargo test. This includes any helper functions that might be within this module, in addition to the functions annotated with #[test].  Testing Private Functions There‚Äôs debate within the testing community about whether or not private functions should be tested directly, and other languages make it difficult or impossible to test private functions. Regardless of which testing ideology you adhere to, Rust‚Äôs privacy rules do allow you to test private functions. Consider the code in Listing - with the private function internal_adder.  Filename: src/lib.rs  Listing -: Testing a private function  Note that the internal_adder function is not marked as pub. Tests are just Rust code, and the tests module is just another module. As we discussed in the ‚ÄúPaths for Referring to an Item in the Module Tree‚Äù section, items in child modules can use the items in their ancestor modules. In this test, we bring all of the tests module‚Äôs parent‚Äôs items into scope with use super::*, and then the test can call internal_adder. If you don‚Äôt think private functions should be tested, there‚Äôs nothing in Rust that will compel you to do so.  Integration Tests In Rust, integration tests are entirely external to your library. They use your library in the same way any other code would, which means they can only call functions that are part of your library‚Äôs public API. Their purpose is to test whether many parts of your library work together correctly. Units of code that work correctly on their own could have problems when integrated, so test coverage of the integrated code is important as well. To create integration tests, you first need a tests directory.  The tests Directory We create a tests directory at the top level of our project directory, next to src. Cargo knows to look for integration test files in this directory. We can then make as many test files as we want, and Cargo will compile each of the files as an individual crate.  Let‚Äôs create an integration test. With the code in Listing - still in the src/lib.rs file, make a tests directory, and create a new file named tests/integration_test.rs. Your directory structure should look like this:  Enter the code in Listing - into the tests/integration_test.rs file:  Filename: tests/integration_test.rs  Listing -: An integration test of a function in the adder crate  Each file in the tests directory is a separate crate, so we need to bring our library into each test crate‚Äôs scope. For that reason we add use adder::add_two at the top of the code, which we didn‚Äôt need in the unit tests.  We don‚Äôt need to annotate any code in tests/integration_test.rs with #[cfg(test)]. Cargo treats the tests directory specially and compiles files in this directory only when we run cargo test. Run cargo test now:  The three sections of output include the unit tests, the integration test, and the doc tests. Note that if any test in a section fails, the following sections will not be run. For example, if a unit test fails, there won‚Äôt be any output for integration and doc tests because those tests will only be run if all unit tests are passing.  The first section for the unit tests is the same as we‚Äôve been seeing: one line for each unit test (one named internal that we added in Listing -) and then a summary line for the unit tests.  The integration tests section starts with the line Running tests/integration_test.rs. Next, there is a line for each test function in that integration test and a summary line for the results of the integration test just before the Doc-tests adder section starts.  Each integration test file has its own section, so if we add more files in the tests directory, there will be more integration test sections.  We can still run a particular integration test function by specifying the test function‚Äôs name as an argument to cargo test. To run all the tests in a particular integration test file, use the --test argument of cargo test followed by the name of the file:  This command runs only the tests in the tests/integration_test.rs file.  Submodules in Integration Tests As you add more integration tests, you might want to make more files in the tests directory to help organize them; for example, you can group the test functions by the functionality they‚Äôre testing. As mentioned earlier, each file in the tests directory is compiled as its own separate crate, which is useful for creating separate scopes to more closely imitate the way end users will be using your crate. However, this means files in the tests directory don‚Äôt share the same behavior as files in src do, as you learned in Chapter  regarding how to separate code into modules and files.  The different behavior of tests directory files is most noticeable when you have a set of helper functions to use in multiple integration test files and you try to follow the steps in the ‚ÄúSeparating Modules into Different Files‚Äù section of Chapter  to extract them into a common module. For example, if we create tests/common.rs and place a function named setup in it, we can add some code to setup that we want to call from multiple test functions in multiple test files:  Filename: tests/common.rs  When we run the tests again, we‚Äôll see a new section in the test output for the common.rs file, even though this file doesn‚Äôt contain any test functions nor did we call the setup function from anywhere:  Having common appear in the test results with running  tests displayed for it is not what we wanted. We just wanted to share some code with the other integration test files.  To avoid having common appear in the test output, instead of creating tests/common.rs, we‚Äôll create tests/common/mod.rs. The project directory now looks like this:  This is the older naming convention that Rust also understands that we mentioned in the ‚ÄúAlternate File Paths‚Äù section of Chapter . Naming the file this way tells Rust not to treat the common module as an integration test file. When we move the setup function code into tests/common/mod.rs and delete the tests/common.rs file, the section in the test output will no longer appear. Files in subdirectories of the tests directory don‚Äôt get compiled as separate crates or have sections in the test output.  After we‚Äôve created tests/common/mod.rs, we can use it from any of the integration test files as a module. Here‚Äôs an example of calling the setup function from the it_adds_two test in tests/integration_test.rs:  Filename: tests/integration_test.rs  Note that the mod common; declaration is the same as the module declaration we demonstrated in Listing -. Then in the test function, we can call the common::setup() function.  Integration Tests for Binary Crates If our project is a binary crate that only contains a src/main.rs file and doesn‚Äôt have a src/lib.rs file, we can‚Äôt create integration tests in the tests directory and bring functions defined in the src/main.rs file into scope with a use statement. Only library crates expose functions that other crates can use; binary crates are meant to be run on their own.  This is one of the reasons Rust projects that provide a binary have a straightforward src/main.rs file that calls logic that lives in the src/lib.rs file. Using that structure, integration tests can test the library crate with use to make the important functionality available. If the important functionality works, the small amount of code in the src/main.rs file will work as well, and that small amount of code doesn‚Äôt need to be tested.  Summary Rust‚Äôs testing features provide a way to specify how code should function to ensure it continues to work as you expect, even as you make changes. Unit tests exercise different parts of a library separately and can test private implementation details. Integration tests check that many parts of the library work together correctly, and they use the library‚Äôs public API to test the code in the same way external code will use it. Even though Rust‚Äôs type system and ownership rules help prevent some kinds of bugs, tests are still important to reduce logic bugs having to do with how your code is expected to behave.  Let‚Äôs combine the knowledge you learned in this chapter and in previous chapters to work on a project!  An I/O Project: Building a Command Line Program This chapter is a recap of the many skills you‚Äôve learned so far and an exploration of a few more standard library features. We‚Äôll build a command line tool that interacts with file and command line input/output to practice some of the Rust concepts you now have under your belt.  Rust‚Äôs speed, safety, single binary output, and cross-platform support make it an ideal language for creating command line tools, so for our project, we‚Äôll make our own version of the classic command line search tool grep (globally search a regular expression and print). In the simplest use case, grep searches a specified file for a specified string. To do so, grep takes as its arguments a file path and a string. Then it reads the file, finds lines in that file that contain the string argument, and prints those lines.  Along the way, we‚Äôll show how to make our command line tool use the terminal features that many other command line tools use. We‚Äôll read the value of an environment variable to allow the user to configure the behavior of our tool. We‚Äôll also print error messages to the standard error console stream (stderr) instead of standard output (stdout), so, for example, the user can redirect successful output to a file while still seeing error messages onscreen.  One Rust community member, Andrew Gallant, has already created a fully featured, very fast version of grep, called ripgrep. By comparison, our version will be fairly simple, but this chapter will give you some of the background knowledge you need to understand a real-world project such as ripgrep.  Our grep project will combine a number of concepts you‚Äôve learned so far:  Organizing code (using what you learned about modules in Chapter ) Using vectors and strings (collections, Chapter ) Handling errors (Chapter ) Using traits and lifetimes where appropriate (Chapter ) Writing tests (Chapter ) We‚Äôll also briefly introduce closures, iterators, and trait objects, which Chapters  and  will cover in detail.  Accepting Command Line Arguments Let‚Äôs create a new project with, as always, cargo new. We‚Äôll call our project minigrep to distinguish it from the grep tool that you might already have on your system.  The first task is to make minigrep accept its two command line arguments: the file path and a string to search for. That is, we want to be able to run our program with cargo run, two hyphens to indicate the following arguments are for our program rather than for cargo, a string to search for, and a path to a file to search in, like so:  Right now, the program generated by cargo new cannot process arguments we give it. Some existing libraries on crates.io can help with writing a program that accepts command line arguments, but because you‚Äôre just learning this concept, let‚Äôs implement this capability ourselves.  Reading the Argument Values To enable minigrep to read the values of command line arguments we pass to it, we‚Äôll need the std::env::args function provided in Rust‚Äôs standard library. This function returns an iterator of the command line arguments passed to minigrep. We‚Äôll cover iterators fully in Chapter . For now, you only need to know two details about iterators: iterators produce a series of values, and we can call the collect method on an iterator to turn it into a collection, such as a vector, that contains all the elements the iterator produces.  The code in Listing - allows your minigrep program to read any command line arguments passed to it and then collect the values into a vector.  Filename: src/main.rs  Listing -: Collecting the command line arguments into a vector and printing them  First, we bring the std::env module into scope with a use statement so we can use its args function. Notice that the std::env::args function is nested in two levels of modules. As we discussed in Chapter , in cases where the desired function is nested in more than one module, we‚Äôve chosen to bring the parent module into scope rather than the function. By doing so, we can easily use other functions from std::env. It‚Äôs also less ambiguous than adding use std::env::args and then calling the function with just args, because args might easily be mistaken for a function that‚Äôs defined in the current module.  The args Function and Invalid Unicode Note that std::env::args will panic if any argument contains invalid Unicode. If your program needs to accept arguments containing invalid Unicode, use std::env::args_os instead. That function returns an iterator that produces OsString values instead of String values. We‚Äôve chosen to use std::env::args here for simplicity, because OsString values differ per platform and are more complex to work with than String values.  On the first line of main, we call env::args, and we immediately use collect to turn the iterator into a vector containing all the values produced by the iterator. We can use the collect function to create many kinds of collections, so we explicitly annotate the type of args to specify that we want a vector of strings. Although we very rarely need to annotate types in Rust, collect is one function you do often need to annotate because Rust isn‚Äôt able to infer the kind of collection you want.  Finally, we print the vector using the debug macro. Let‚Äôs try running the code first with no arguments and then with two arguments:  Notice that the first value in the vector is "target/debug/minigrep", which is the name of our binary. This matches the behavior of the arguments list in C, letting programs use the name by which they were invoked in their execution. It‚Äôs often convenient to have access to the program name in case you want to print it in messages or change behavior of the program based on what command line alias was used to invoke the program. But for the purposes of this chapter, we‚Äôll ignore it and save only the two arguments we need.  Saving the Argument Values in Variables The program is currently able to access the values specified as command line arguments. Now we need to save the values of the two arguments in variables so we can use the values throughout the rest of the program. We do that in Listing -.  Filename: src/main.rs  Listing -: Creating variables to hold the query argument and file path argument  As we saw when we printed the vector, the program‚Äôs name takes up the first value in the vector at args[], so we‚Äôre starting arguments at index . The first argument minigrep takes is the string we‚Äôre searching for, so we put a reference to the first argument in the variable query. The second argument will be the file path, so we put a reference to the second argument in the variable file_path.  We temporarily print the values of these variables to prove that the code is working as we intend. Let‚Äôs run this program again with the arguments test and sample.txt:  Great, the program is working! The values of the arguments we need are being saved into the right variables. Later we‚Äôll add some error handling to deal with certain potential erroneous situations, such as when the user provides no arguments; for now, we‚Äôll ignore that situation and work on adding file-reading capabilities instead.  Reading a File Now we‚Äôll add functionality to read the file specified in the file_path argument. First, we need a sample file to test it with: we‚Äôll use a file with a small amount of text over multiple lines with some repeated words. Listing - has an Emily Dickinson poem that will work well! Create a file called poem.txt at the root level of your project, and enter the poem ‚ÄúI‚Äôm Nobody! Who are you?‚Äù  Filename: poem.txt  Listing -: A poem by Emily Dickinson makes a good test case  With the text in place, edit src/main.rs and add code to read the file, as shown in Listing -.  Filename: src/main.rs  Listing -: Reading the contents of the file specified by the second argument  First, we bring in a relevant part of the standard library with a use statement: we need std::fs to handle files.  In main, the new statement fs::read_to_string takes the file_path, opens that file, and returns a std::io::Result<String> of the file‚Äôs contents.  After that, we again add a temporary println! statement that prints the value of contents after the file is read, so we can check that the program is working so far.  Let‚Äôs run this code with any string as the first command line argument (because we haven‚Äôt implemented the searching part yet) and the poem.txt file as the second argument:  Great! The code read and then printed the contents of the file. But the code has a few flaws. At the moment, the main function has multiple responsibilities: generally, functions are clearer and easier to maintain if each function is responsible for only one idea. The other problem is that we‚Äôre not handling errors as well as we could. The program is still small, so these flaws aren‚Äôt a big problem, but as the program grows, it will be harder to fix them cleanly. It‚Äôs good practice to begin refactoring early on when developing a program, because it‚Äôs much easier to refactor smaller amounts of code. We‚Äôll do that next.  Refactoring to Improve Modularity and Error Handling To improve our program, we‚Äôll fix four problems that have to do with the program‚Äôs structure and how it‚Äôs handling potential errors. First, our main function now performs two tasks: it parses arguments and reads files. As our program grows, the number of separate tasks the main function handles will increase. As a function gains responsibilities, it becomes more difficult to reason about, harder to test, and harder to change without breaking one of its parts. It‚Äôs best to separate functionality so each function is responsible for one task.  This issue also ties into the second problem: although query and file_path are configuration variables to our program, variables like contents are used to perform the program‚Äôs logic. The longer main becomes, the more variables we‚Äôll need to bring into scope; the more variables we have in scope, the harder it will be to keep track of the purpose of each. It‚Äôs best to group the configuration variables into one structure to make their purpose clear.  The third problem is that we‚Äôve used expect to print an error message when reading the file fails, but the error message just prints Should have been able to read the file. Reading a file can fail in a number of ways: for example, the file could be missing, or we might not have permission to open it. Right now, regardless of the situation, we‚Äôd print the same error message for everything, which wouldn‚Äôt give the user any information!  Fourth, we use expect to handle an error, and if the user runs our program without specifying enough arguments, they‚Äôll get an index out of bounds error from Rust that doesn‚Äôt clearly explain the problem. It would be best if all the error-handling code were in one place so future maintainers had only one place to consult the code if the error-handling logic needed to change. Having all the error-handling code in one place will also ensure that we‚Äôre printing messages that will be meaningful to our end users.  Let‚Äôs address these four problems by refactoring our project.  Separation of Concerns for Binary Projects The organizational problem of allocating responsibility for multiple tasks to the main function is common to many binary projects. As a result, the Rust community has developed guidelines for splitting the separate concerns of a binary program when main starts getting large. This process has the following steps:  Split your program into a main.rs and a lib.rs and move your program‚Äôs logic to lib.rs. As long as your command line parsing logic is small, it can remain in main.rs. When the command line parsing logic starts getting complicated, extract it from main.rs and move it to lib.rs. The responsibilities that remain in the main function after this process should be limited to the following:  Calling the command line parsing logic with the argument values Setting up any other configuration Calling a run function in lib.rs Handling the error if run returns an error This pattern is about separating concerns: main.rs handles running the program, and lib.rs handles all the logic of the task at hand. Because you can‚Äôt test the main function directly, this structure lets you test all of your program‚Äôs logic by moving it into functions in lib.rs. The code that remains in main.rs will be small enough to verify its correctness by reading it. Let‚Äôs rework our program by following this process.  Extracting the Argument Parser We‚Äôll extract the functionality for parsing arguments into a function that main will call to prepare for moving the command line parsing logic to src/lib.rs. Listing - shows the new start of main that calls a new function parse_config, which we‚Äôll define in src/main.rs for the moment.  Filename: src/main.rs  Listing -: Extracting a parse_config function from main  We‚Äôre still collecting the command line arguments into a vector, but instead of assigning the argument value at index  to the variable query and the argument value at index  to the variable file_path within the main function, we pass the whole vector to the parse_config function. The parse_config function then holds the logic that determines which argument goes in which variable and passes the values back to main. We still create the query and file_path variables in main, but main no longer has the responsibility of determining how the command line arguments and variables correspond.  This rework may seem like overkill for our small program, but we‚Äôre refactoring in small, incremental steps. After making this change, run the program again to verify that the argument parsing still works. It‚Äôs good to check your progress often, to help identify the cause of problems when they occur.  Grouping Configuration Values We can take another small step to improve the parse_config function further. At the moment, we‚Äôre returning a tuple, but then we immediately break that tuple into individual parts again. This is a sign that perhaps we don‚Äôt have the right abstraction yet.  Another indicator that shows there‚Äôs room for improvement is the config part of parse_config, which implies that the two values we return are related and are both part of one configuration value. We‚Äôre not currently conveying this meaning in the structure of the data other than by grouping the two values into a tuple; we‚Äôll instead put the two values into one struct and give each of the struct fields a meaningful name. Doing so will make it easier for future maintainers of this code to understand how the different values relate to each other and what their purpose is.  Listing - shows the improvements to the parse_config function.  Filename: src/main.rs  Listing -: Refactoring parse_config to return an instance of a Config struct  We‚Äôve added a struct named Config defined to have fields named query and file_path. The signature of parse_config now indicates that it returns a Config value. In the body of parse_config, where we used to return string slices that reference String values in args, we now define Config to contain owned String values. The args variable in main is the owner of the argument values and is only letting the parse_config function borrow them, which means we‚Äôd violate Rust‚Äôs borrowing rules if Config tried to take ownership of the values in args.  There are a number of ways we could manage the String data; the easiest, though somewhat inefficient, route is to call the clone method on the values. This will make a full copy of the data for the Config instance to own, which takes more time and memory than storing a reference to the string data. However, cloning the data also makes our code very straightforward because we don‚Äôt have to manage the lifetimes of the references; in this circumstance, giving up a little performance to gain simplicity is a worthwhile trade-off.  The Trade-Offs of Using clone There‚Äôs a tendency among many Rustaceans to avoid using clone to fix ownership problems because of its runtime cost. In Chapter , you‚Äôll learn how to use more efficient methods in this type of situation. But for now, it‚Äôs okay to copy a few strings to continue making progress because you‚Äôll make these copies only once and your file path and query string are very small. It‚Äôs better to have a working program that‚Äôs a bit inefficient than to try to hyperoptimize code on your first pass. As you become more experienced with Rust, it‚Äôll be easier to start with the most efficient solution, but for now, it‚Äôs perfectly acceptable to call clone.  We‚Äôve updated main so it places the instance of Config returned by parse_config into a variable named config, and we updated the code that previously used the separate query and file_path variables so it now uses the fields on the Config struct instead.  Now our code more clearly conveys that query and file_path are related and that their purpose is to configure how the program will work. Any code that uses these values knows to find them in the config instance in the fields named for their purpose.  Creating a Constructor for Config So far, we‚Äôve extracted the logic responsible for parsing the command line arguments from main and placed it in the parse_config function. Doing so helped us to see that the query and file_path values were related and that relationship should be conveyed in our code. We then added a Config struct to name the related purpose of query and file_path and to be able to return the values‚Äô names as struct field names from the parse_config function.  So now that the purpose of the parse_config function is to create a Config instance, we can change parse_config from a plain function to a function named new that is associated with the Config struct. Making this change will make the code more idiomatic. We can create instances of types in the standard library, such as String, by calling String::new. Similarly, by changing parse_config into a new function associated with Config, we‚Äôll be able to create instances of Config by calling Config::new. Listing - shows the changes we need to make.  Filename: src/main.rs  Listing -: Changing parse_config into Config::new  We‚Äôve updated main where we were calling parse_config to instead call Config::new. We‚Äôve changed the name of parse_config to new and moved it within an impl block, which associates the new function with Config. Try compiling this code again to make sure it works.  Fixing the Error Handling Now we‚Äôll work on fixing our error handling. Recall that attempting to access the values in the args vector at index  or index  will cause the program to panic if the vector contains fewer than three items. Try running the program without any arguments; it will look like this:  The line index out of bounds: the len is  but the index is  is an error message intended for programmers. It won‚Äôt help our end users understand what they should do instead. Let‚Äôs fix that now.  Improving the Error Message In Listing -, we add a check in the new function that will verify that the slice is long enough before accessing index  and . If the slice isn‚Äôt long enough, the program panics and displays a better error message.  Filename: src/main.rs  Listing -: Adding a check for the number of arguments  This code is similar to the Guess::new function we wrote in Listing -, where we called panic! when the value argument was out of the range of valid values. Instead of checking for a range of values here, we‚Äôre checking that the length of args is at least  and the rest of the function can operate under the assumption that this condition has been met. If args has fewer than three items, this condition will be true, and we call the panic! macro to end the program immediately.  With these extra few lines of code in new, let‚Äôs run the program without any arguments again to see what the error looks like now:  This output is better: we now have a reasonable error message. However, we also have extraneous information we don‚Äôt want to give to our users. Perhaps using the technique we used in Listing - isn‚Äôt the best to use here: a call to panic! is more appropriate for a programming problem than a usage problem, as discussed in Chapter . Instead, we‚Äôll use the other technique you learned about in Chapter ‚Äîreturning a Result that indicates either success or an error.   Returning a Result Instead of Calling panic! We can instead return a Result value that will contain a Config instance in the successful case and will describe the problem in the error case. We‚Äôre also going to change the function name from new to build because many programmers expect new functions to never fail. When Config::build is communicating to main, we can use the Result type to signal there was a problem. Then we can change main to convert an Err variant into a more practical error for our users without the surrounding text about thread 'main' and RUST_BACKTRACE that a call to panic! causes.  Listing - shows the changes we need to make to the return value of the function we‚Äôre now calling Config::build and the body of the function needed to return a Result. Note that this won‚Äôt compile until we update main as well, which we‚Äôll do in the next listing.  Filename: src/main.rs  Listing -: Returning a Result from Config::build  Our build function returns a Result with a Config instance in the success case and a &'static str in the error case. Our error values will always be string literals that have the 'static lifetime.  We‚Äôve made two changes in the body of the function: instead of calling panic! when the user doesn‚Äôt pass enough arguments, we now return an Err value, and we‚Äôve wrapped the Config return value in an Ok. These changes make the function conform to its new type signature.  Returning an Err value from Config::build allows the main function to handle the Result value returned from the build function and exit the process more cleanly in the error case.   Calling Config::build and Handling Errors To handle the error case and print a user-friendly message, we need to update main to handle the Result being returned by Config::build, as shown in Listing -. We‚Äôll also take the responsibility of exiting the command line tool with a nonzero error code away from panic! and instead implement it by hand. A nonzero exit status is a convention to signal to the process that called our program that the program exited with an error state.  Filename: src/main.rs  Listing -: Exiting with an error code if building a Config fails  In this listing, we‚Äôve used a method we haven‚Äôt covered in detail yet: unwrap_or_else, which is defined on Result<T, E> by the standard library. Using unwrap_or_else allows us to define some custom, non-panic! error handling. If the Result is an Ok value, this method‚Äôs behavior is similar to unwrap: it returns the inner value Ok is wrapping. However, if the value is an Err value, this method calls the code in the closure, which is an anonymous function we define and pass as an argument to unwrap_or_else. We‚Äôll cover closures in more detail in Chapter . For now, you just need to know that unwrap_or_else will pass the inner value of the Err, which in this case is the static string "not enough arguments" that we added in Listing -, to our closure in the argument err that appears between the vertical pipes. The code in the closure can then use the err value when it runs.  We‚Äôve added a new use line to bring process from the standard library into scope. The code in the closure that will be run in the error case is only two lines: we print the err value and then call process::exit. The process::exit function will stop the program immediately and return the number that was passed as the exit status code. This is similar to the panic!-based handling we used in Listing -, but we no longer get all the extra output. Let‚Äôs try it:  Great! This output is much friendlier for our users.  Extracting Logic from main Now that we‚Äôve finished refactoring the configuration parsing, let‚Äôs turn to the program‚Äôs logic. As we stated in ‚ÄúSeparation of Concerns for Binary Projects‚Äù, we‚Äôll extract a function named run that will hold all the logic currently in the main function that isn‚Äôt involved with setting up configuration or handling errors. When we‚Äôre done, main will be concise and easy to verify by inspection, and we‚Äôll be able to write tests for all the other logic.  Listing - shows the extracted run function. For now, we‚Äôre just making the small, incremental improvement of extracting the function. We‚Äôre still defining the function in src/main.rs.  Filename: src/main.rs  Listing -: Extracting a run function containing the rest of the program logic  The run function now contains all the remaining logic from main, starting from reading the file. The run function takes the Config instance as an argument.  Returning Errors from the run Function With the remaining program logic separated into the run function, we can improve the error handling, as we did with Config::build in Listing -. Instead of allowing the program to panic by calling expect, the run function will return a Result<T, E> when something goes wrong. This will let us further consolidate the logic around handling errors into main in a user-friendly way. Listing - shows the changes we need to make to the signature and body of run.  Filename: src/main.rs  Listing -: Changing the run function to return Result  We‚Äôve made three significant changes here. First, we changed the return type of the run function to Result<(), Box<dyn Error>>. This function previously returned the unit type, (), and we keep that as the value returned in the Ok case.  For the error type, we used the trait object Box<dyn Error> (and we‚Äôve brought std::error::Error into scope with a use statement at the top). We‚Äôll cover trait objects in Chapter . For now, just know that Box<dyn Error> means the function will return a type that implements the Error trait, but we don‚Äôt have to specify what particular type the return value will be. This gives us flexibility to return error values that may be of different types in different error cases. The dyn keyword is short for ‚Äúdynamic.‚Äù  Second, we‚Äôve removed the call to expect in favor of the ? operator, as we talked about in Chapter . Rather than panic! on an error, ? will return the error value from the current function for the caller to handle.  Third, the run function now returns an Ok value in the success case. We‚Äôve declared the run function‚Äôs success type as () in the signature, which means we need to wrap the unit type value in the Ok value. This Ok(()) syntax might look a bit strange at first, but using () like this is the idiomatic way to indicate that we‚Äôre calling run for its side effects only; it doesn‚Äôt return a value we need.  When you run this code, it will compile but will display a warning:  Rust tells us that our code ignored the Result value and the Result value might indicate that an error occurred. But we‚Äôre not checking to see whether or not there was an error, and the compiler reminds us that we probably meant to have some error-handling code here! Let‚Äôs rectify that problem now.  Handling Errors Returned from run in main We‚Äôll check for errors and handle them using a technique similar to one we used with Config::build in Listing -, but with a slight difference:  Filename: src/main.rs  We use if let rather than unwrap_or_else to check whether run returns an Err value and call process::exit() if it does. The run function doesn‚Äôt return a value that we want to unwrap in the same way that Config::build returns the Config instance. Because run returns () in the success case, we only care about detecting an error, so we don‚Äôt need unwrap_or_else to return the unwrapped value, which would only be ().  The bodies of the if let and the unwrap_or_else functions are the same in both cases: we print the error and exit.  Splitting Code into a Library Crate Our minigrep project is looking good so far! Now we‚Äôll split the src/main.rs file and put some code into the src/lib.rs file. That way we can test the code and have a src/main.rs file with fewer responsibilities.  Let‚Äôs move all the code that isn‚Äôt the main function from src/main.rs to src/lib.rs:  The run function definition The relevant use statements The definition of Config The Config::build function definition The contents of src/lib.rs should have the signatures shown in Listing - (we‚Äôve omitted the bodies of the functions for brevity). Note that this won‚Äôt compile until we modify src/main.rs in Listing -.  Filename: src/lib.rs  Listing -: Moving Config and run into src/lib.rs  We‚Äôve made liberal use of the pub keyword: on Config, on its fields and its build method, and on the run function. We now have a library crate that has a public API we can test!  Now we need to bring the code we moved to src/lib.rs into the scope of the binary crate in src/main.rs, as shown in Listing -.  Filename: src/main.rs  Listing -: Using the minigrep library crate in src/main.rs  We add a use minigrep::Config line to bring the Config type from the library crate into the binary crate‚Äôs scope, and we prefix the run function with our crate name. Now all the functionality should be connected and should work. Run the program with cargo run and make sure everything works correctly.  Whew! That was a lot of work, but we‚Äôve set ourselves up for success in the future. Now it‚Äôs much easier to handle errors, and we‚Äôve made the code more modular. Almost all of our work will be done in src/lib.rs from here on out.  Let‚Äôs take advantage of this newfound modularity by doing something that would have been difficult with the old code but is easy with the new code: we‚Äôll write some tests!  Developing the Library‚Äôs Functionality with Test-Driven Development Now that we‚Äôve extracted the logic into src/lib.rs and left the argument collecting and error handling in src/main.rs, it‚Äôs much easier to write tests for the core functionality of our code. We can call functions directly with various arguments and check return values without having to call our binary from the command line.  In this section, we‚Äôll add the searching logic to the minigrep program using the test-driven development (TDD) process with the following steps:  Write a test that fails and run it to make sure it fails for the reason you expect. Write or modify just enough code to make the new test pass. Refactor the code you just added or changed and make sure the tests continue to pass. Repeat from step ! Though it‚Äôs just one of many ways to write software, TDD can help drive code design. Writing the test before you write the code that makes the test pass helps to maintain high test coverage throughout the process.  We‚Äôll test drive the implementation of the functionality that will actually do the searching for the query string in the file contents and produce a list of lines that match the query. We‚Äôll add this functionality in a function called search.  Writing a Failing Test Because we don‚Äôt need them anymore, let‚Äôs remove the println! statements from src/lib.rs and src/main.rs that we used to check the program‚Äôs behavior. Then, in src/lib.rs, add a tests module with a test function, as we did in Chapter . The test function specifies the behavior we want the search function to have: it will take a query and the text to search, and it will return only the lines from the text that contain the query. Listing - shows this test, which won‚Äôt compile yet.  Filename: src/lib.rs  Listing -: Creating a failing test for the search function we wish we had  This test searches for the string "duct". The text we‚Äôre searching is three lines, only one of which contains "duct" (Note that the backslash after the opening double quote tells Rust not to put a newline character at the beginning of the contents of this string literal). We assert that the value returned from the search function contains only the line we expect.  We aren‚Äôt yet able to run this test and watch it fail because the test doesn‚Äôt even compile: the search function doesn‚Äôt exist yet! In accordance with TDD principles, we‚Äôll add just enough code to get the test to compile and run by adding a definition of the search function that always returns an empty vector, as shown in Listing -. Then the test should compile and fail because an empty vector doesn‚Äôt match a vector containing the line "safe, fast, productive."  Filename: src/lib.rs  Listing -: Defining just enough of the search function so our test will compile  Notice that we need to define an explicit lifetime 'a in the signature of search and use that lifetime with the contents argument and the return value. Recall in Chapter  that the lifetime parameters specify which argument lifetime is connected to the lifetime of the return value. In this case, we indicate that the returned vector should contain string slices that reference slices of the argument contents (rather than the argument query).  In other words, we tell Rust that the data returned by the search function will live as long as the data passed into the search function in the contents argument. This is important! The data referenced by a slice needs to be valid for the reference to be valid; if the compiler assumes we‚Äôre making string slices of query rather than contents, it will do its safety checking incorrectly.  If we forget the lifetime annotations and try to compile this function, we‚Äôll get this error:  Rust can‚Äôt possibly know which of the two arguments we need, so we need to tell it explicitly. Because contents is the argument that contains all of our text and we want to return the parts of that text that match, we know contents is the argument that should be connected to the return value using the lifetime syntax.  Other programming languages don‚Äôt require you to connect arguments to return values in the signature, but this practice will get easier over time. You might want to compare this example with the ‚ÄúValidating References with Lifetimes‚Äù section in Chapter .  Now let‚Äôs run the test:  Great, the test fails, exactly as we expected. Let‚Äôs get the test to pass!  Writing Code to Pass the Test Currently, our test is failing because we always return an empty vector. To fix that and implement search, our program needs to follow these steps:  Iterate through each line of the contents. Check whether the line contains our query string. If it does, add it to the list of values we‚Äôre returning. If it doesn‚Äôt, do nothing. Return the list of results that match. Let‚Äôs work through each step, starting with iterating through lines.  Iterating Through Lines with the lines Method Rust has a helpful method to handle line-by-line iteration of strings, conveniently named lines, that works as shown in Listing -. Note this won‚Äôt compile yet.  Filename: src/lib.rs  Listing -: Iterating through each line in contents  The lines method returns an iterator. We‚Äôll talk about iterators in depth in Chapter , but recall that you saw this way of using an iterator in Listing -, where we used a for loop with an iterator to run some code on each item in a collection.  Searching Each Line for the Query Next, we‚Äôll check whether the current line contains our query string. Fortunately, strings have a helpful method named contains that does this for us! Add a call to the contains method in the search function, as shown in Listing -. Note this still won‚Äôt compile yet.  Filename: src/lib.rs  Listing -: Adding functionality to see whether the line contains the string in query  At the moment, we‚Äôre building up functionality. To get it to compile, we need to return a value from the body as we indicated we would in the function signature.  Storing Matching Lines To finish this function, we need a way to store the matching lines that we want to return. For that, we can make a mutable vector before the for loop and call the push method to store a line in the vector. After the for loop, we return the vector, as shown in Listing -.  Filename: src/lib.rs  Listing -: Storing the lines that match so we can return them  Now the search function should return only the lines that contain query, and our test should pass. Let‚Äôs run the test:  Our test passed, so we know it works!  At this point, we could consider opportunities for refactoring the implementation of the search function while keeping the tests passing to maintain the same functionality. The code in the search function isn‚Äôt too bad, but it doesn‚Äôt take advantage of some useful features of iterators. We‚Äôll return to this example in Chapter , where we‚Äôll explore iterators in detail, and look at how to improve it.  Using the search Function in the run Function Now that the search function is working and tested, we need to call search from our run function. We need to pass the config.query value and the contents that run reads from the file to the search function. Then run will print each line returned from search:  Filename: src/lib.rs  We‚Äôre still using a for loop to return each line from search and print it.  Now the entire program should work! Let‚Äôs try it out, first with a word that should return exactly one line from the Emily Dickinson poem, ‚Äúfrog‚Äù:  Cool! Now let‚Äôs try a word that will match multiple lines, like ‚Äúbody‚Äù:  And finally, let‚Äôs make sure that we don‚Äôt get any lines when we search for a word that isn‚Äôt anywhere in the poem, such as ‚Äúmonomorphization‚Äù:  Excellent! We‚Äôve built our own mini version of a classic tool and learned a lot about how to structure applications. We‚Äôve also learned a bit about file input and output, lifetimes, testing, and command line parsing.  To round out this project, we‚Äôll briefly demonstrate how to work with environment variables and how to print to standard error, both of which are useful when you‚Äôre writing command line programs.  Working with Environment Variables We‚Äôll improve minigrep by adding an extra feature: an option for case-insensitive searching that the user can turn on via an environment variable. We could make this feature a command line option and require that users enter it each time they want it to apply, but by instead making it an environment variable, we allow our users to set the environment variable once and have all their searches be case insensitive in that terminal session.  Writing a Failing Test for the Case-Insensitive search Function We first add a new search_case_insensitive function that will be called when the environment variable has a value. We‚Äôll continue to follow the TDD process, so the first step is again to write a failing test. We‚Äôll add a new test for the new search_case_insensitive function and rename our old test from one_result to case_sensitive to clarify the differences between the two tests, as shown in Listing -.  Filename: src/lib.rs  Listing -: Adding a new failing test for the case-insensitive function we‚Äôre about to add  Note that we‚Äôve edited the old test‚Äôs contents too. We‚Äôve added a new line with the text "Duct tape." using a capital D that shouldn‚Äôt match the query "duct" when we‚Äôre searching in a case-sensitive manner. Changing the old test in this way helps ensure that we don‚Äôt accidentally break the case-sensitive search functionality that we‚Äôve already implemented. This test should pass now and should continue to pass as we work on the case-insensitive search.  The new test for the case-insensitive search uses "rUsT" as its query. In the search_case_insensitive function we‚Äôre about to add, the query "rUsT" should match the line containing "Rust:" with a capital R and match the line "Trust me." even though both have different casing from the query. This is our failing test, and it will fail to compile because we haven‚Äôt yet defined the search_case_insensitive function. Feel free to add a skeleton implementation that always returns an empty vector, similar to the way we did for the search function in Listing - to see the test compile and fail.  Implementing the search_case_insensitive Function The search_case_insensitive function, shown in Listing -, will be almost the same as the search function. The only difference is that we‚Äôll lowercase the query and each line so whatever the case of the input arguments, they‚Äôll be the same case when we check whether the line contains the query.  Filename: src/lib.rs  Listing -: Defining the search_case_insensitive function to lowercase the query and the line before comparing them  First, we lowercase the query string and store it in a shadowed variable with the same name. Calling to_lowercase on the query is necessary so no matter whether the user‚Äôs query is "rust", "RUST", "Rust", or "rUsT", we‚Äôll treat the query as if it were "rust" and be insensitive to the case. While to_lowercase will handle basic Unicode, it won‚Äôt be % accurate. If we were writing a real application, we‚Äôd want to do a bit more work here, but this section is about environment variables, not Unicode, so we‚Äôll leave it at that here.  Note that query is now a String rather than a string slice, because calling to_lowercase creates new data rather than referencing existing data. Say the query is "rUsT", as an example: that string slice doesn‚Äôt contain a lowercase u or t for us to use, so we have to allocate a new String containing "rust". When we pass query as an argument to the contains method now, we need to add an ampersand because the signature of contains is defined to take a string slice.  Next, we add a call to to_lowercase on each line to lowercase all characters. Now that we‚Äôve converted line and query to lowercase, we‚Äôll find matches no matter what the case of the query is.  Let‚Äôs see if this implementation passes the tests:  Great! They passed. Now, let‚Äôs call the new search_case_insensitive function from the run function. First, we‚Äôll add a configuration option to the Config struct to switch between case-sensitive and case-insensitive search. Adding this field will cause compiler errors because we aren‚Äôt initializing this field anywhere yet:  Filename: src/lib.rs  We added the ignore_case field that holds a Boolean. Next, we need the run function to check the ignore_case field‚Äôs value and use that to decide whether to call the search function or the search_case_insensitive function, as shown in Listing -. This still won‚Äôt compile yet.  Filename: src/lib.rs  Listing -: Calling either search or search_case_insensitive based on the value in config.ignore_case  Finally, we need to check for the environment variable. The functions for working with environment variables are in the env module in the standard library, so we bring that module into scope at the top of src/lib.rs. Then we‚Äôll use the var function from the env module to check if any value has been set for an environment variable named IGNORE_CASE, as shown in Listing -.  Filename: src/lib.rs  Listing -: Checking for any value in an environment variable named IGNORE_CASE  Here, we create a new variable ignore_case. To set its value, we call the env::var function and pass it the name of the IGNORE_CASE environment variable. The env::var function returns a Result that will be the successful Ok variant that contains the value of the environment variable if the environment variable is set to any value. It will return the Err variant if the environment variable is not set.  We‚Äôre using the is_ok method on the Result to check whether the environment variable is set, which means the program should do a case-insensitive search. If the IGNORE_CASE environment variable isn‚Äôt set to anything, is_ok will return false and the program will perform a case-sensitive search. We don‚Äôt care about the value of the environment variable, just whether it‚Äôs set or unset, so we‚Äôre checking is_ok rather than using unwrap, expect, or any of the other methods we‚Äôve seen on Result.  We pass the value in the ignore_case variable to the Config instance so the run function can read that value and decide whether to call search_case_insensitive or search, as we implemented in Listing -.  Let‚Äôs give it a try! First, we‚Äôll run our program without the environment variable set and with the query to, which should match any line that contains the word ‚Äúto‚Äù in all lowercase:  Looks like that still works! Now, let‚Äôs run the program with IGNORE_CASE set to  but with the same query to.  If you‚Äôre using PowerShell, you will need to set the environment variable and run the program as separate commands:  This will make IGNORE_CASE persist for the remainder of your shell session. It can be unset with the Remove-Item cmdlet:  We should get lines that contain ‚Äúto‚Äù that might have uppercase letters:  Excellent, we also got lines containing ‚ÄúTo‚Äù! Our minigrep program can now do case-insensitive searching controlled by an environment variable. Now you know how to manage options set using either command line arguments or environment variables.  Some programs allow arguments and environment variables for the same configuration. In those cases, the programs decide that one or the other takes precedence. For another exercise on your own, try controlling case sensitivity through either a command line argument or an environment variable. Decide whether the command line argument or the environment variable should take precedence if the program is run with one set to case sensitive and one set to ignore case.  The std::env module contains many more useful features for dealing with environment variables: check out its documentation to see what is available.  Writing Error Messages to Standard Error Instead of Standard Output At the moment, we‚Äôre writing all of our output to the terminal using the println! macro. In most terminals, there are two kinds of output: standard output (stdout) for general information and standard error (stderr) for error messages. This distinction enables users to choose to direct the successful output of a program to a file but still print error messages to the screen.  The println! macro is only capable of printing to standard output, so we have to use something else to print to standard error.  Checking Where Errors Are Written First, let‚Äôs observe how the content printed by minigrep is currently being written to standard output, including any error messages we want to write to standard error instead. We‚Äôll do that by redirecting the standard output stream to a file while intentionally causing an error. We won‚Äôt redirect the standard error stream, so any content sent to standard error will continue to display on the screen.  Command line programs are expected to send error messages to the standard error stream so we can still see error messages on the screen even if we redirect the standard output stream to a file. Our program is not currently well-behaved: we‚Äôre about to see that it saves the error message output to a file instead!  To demonstrate this behavior, we‚Äôll run the program with > and the file path, output.txt, that we want to redirect the standard output stream to. We won‚Äôt pass any arguments, which should cause an error:  The > syntax tells the shell to write the contents of standard output to output.txt instead of the screen. We didn‚Äôt see the error message we were expecting printed to the screen, so that means it must have ended up in the file. This is what output.txt contains:  Yup, our error message is being printed to standard output. It‚Äôs much more useful for error messages like this to be printed to standard error so only data from a successful run ends up in the file. We‚Äôll change that.  Printing Errors to Standard Error We‚Äôll use the code in Listing - to change how error messages are printed. Because of the refactoring we did earlier in this chapter, all the code that prints error messages is in one function, main. The standard library provides the eprintln! macro that prints to the standard error stream, so let‚Äôs change the two places we were calling println! to print errors to use eprintln! instead.  Filename: src/main.rs  Listing -: Writing error messages to standard error instead of standard output using eprintln!  Let‚Äôs now run the program again in the same way, without any arguments and redirecting standard output with >:  Now we see the error onscreen and output.txt contains nothing, which is the behavior we expect of command line programs.  Let‚Äôs run the program again with arguments that don‚Äôt cause an error but still redirect standard output to a file, like so:  We won‚Äôt see any output to the terminal, and output.txt will contain our results:  Filename: output.txt  This demonstrates that we‚Äôre now using standard output for successful output and standard error for error output as appropriate.  Summary This chapter recapped some of the major concepts you‚Äôve learned so far and covered how to perform common I/O operations in Rust. By using command line arguments, files, environment variables, and the eprintln! macro for printing errors, you‚Äôre now prepared to write command line applications. Combined with the concepts in previous chapters, your code will be well organized, store data effectively in the appropriate data structures, handle errors nicely, and be well tested.  Next, we‚Äôll explore some Rust features that were influenced by functional languages: closures and iterators.  Functional Language Features: Iterators and Closures Rust‚Äôs design has taken inspiration from many existing languages and techniques, and one significant influence is functional programming. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.  In this chapter, we won‚Äôt debate the issue of what functional programming is or isn‚Äôt but will instead discuss some features of Rust that are similar to features in many languages often referred to as functional.  More specifically, we‚Äôll cover:  Closures, a function-like construct you can store in a variable Iterators, a way of processing a series of elements How to use closures and iterators to improve the I/O project in Chapter  The performance of closures and iterators (Spoiler alert: they‚Äôre faster than you might think!) We‚Äôve already covered some other Rust features, such as pattern matching and enums, that are also influenced by the functional style. Because mastering closures and iterators is an important part of writing idiomatic, fast Rust code, we‚Äôll devote this entire chapter to them.   Closures: Anonymous Functions that Capture Their Environment Rust‚Äôs closures are anonymous functions you can save in a variable or pass as arguments to other functions. You can create the closure in one place and then call the closure elsewhere to evaluate it in a different context. Unlike functions, closures can capture values from the scope in which they‚Äôre defined. We‚Äôll demonstrate how these closure features allow for code reuse and behavior customization.   Capturing the Environment with Closures We‚Äôll first examine how we can use closures to capture values from the environment they‚Äôre defined in for later use. Here‚Äôs the scenario: Every so often, our t-shirt company gives away an exclusive, limited-edition shirt to someone on our mailing list as a promotion. People on the mailing list can optionally add their favorite color to their profile. If the person chosen for a free shirt has their favorite color set, they get that color shirt. If the person hasn‚Äôt specified a favorite color, they get whatever color the company currently has the most of.  There are many ways to implement this. For this example, we‚Äôre going to use an enum called ShirtColor that has the variants Red and Blue (limiting the number of colors available for simplicity). We represent the company‚Äôs inventory with an Inventory struct that has a field named shirts that contains a Vec<ShirtColor> representing the shirt colors currently in stock. The method giveaway defined on Inventory gets the optional shirt color preference of the free shirt winner, and returns the shirt color the person will get. This setup is shown in Listing -:  Filename: src/main.rs  Listing -: Shirt company giveaway situation  The store defined in main has two blue shirts and one red shirt remaining to distribute for this limited-edition promotion. We call the giveaway method for a user with a preference for a red shirt and a user without any preference.  Again, this code could be implemented in many ways, and here, to focus on closures, we‚Äôve stuck to concepts you‚Äôve already learned except for the body of the giveaway method that uses a closure. In the giveaway method, we get the user preference as a parameter of type Option<ShirtColor> and call the unwrap_or_else method on user_preference. The unwrap_or_else method on Option<T> is defined by the standard library. It takes one argument: a closure without any arguments that returns a value T (the same type stored in the Some variant of the Option<T>, in this case ShirtColor). If the Option<T> is the Some variant, unwrap_or_else returns the value from within the Some. If the Option<T> is the None variant, unwrap_or_else calls the closure and returns the value returned by the closure.  We specify the closure expression || self.most_stocked() as the argument to unwrap_or_else. This is a closure that takes no parameters itself (if the closure had parameters, they would appear between the two vertical bars). The body of the closure calls self.most_stocked(). We‚Äôre defining the closure here, and the implementation of unwrap_or_else will evaluate the closure later if the result is needed.  Running this code prints:  One interesting aspect here is that we‚Äôve passed a closure that calls self.most_stocked() on the current Inventory instance. The standard library didn‚Äôt need to know anything about the Inventory or ShirtColor types we defined, or the logic we want to use in this scenario. The closure captures an immutable reference to the self Inventory instance and passes it with the code we specify to the unwrap_or_else method. Functions, on the other hand, are not able to capture their environment in this way.  Closure Type Inference and Annotation There are more differences between functions and closures. Closures don‚Äôt usually require you to annotate the types of the parameters or the return value like fn functions do. Type annotations are required on functions because the types are part of an explicit interface exposed to your users. Defining this interface rigidly is important for ensuring that everyone agrees on what types of values a function uses and returns. Closures, on the other hand, aren‚Äôt used in an exposed interface like this: they‚Äôre stored in variables and used without naming them and exposing them to users of our library.  Closures are typically short and relevant only within a narrow context rather than in any arbitrary scenario. Within these limited contexts, the compiler can infer the types of the parameters and the return type, similar to how it‚Äôs able to infer the types of most variables (there are rare cases where the compiler needs closure type annotations too).  As with variables, we can add type annotations if we want to increase explicitness and clarity at the cost of being more verbose than is strictly necessary. Annotating the types for a closure would look like the definition shown in Listing -. In this example, we‚Äôre defining a closure and storing it in a variable rather than defining the closure in the spot we pass it as an argument as we did in Listing -.  Filename: src/main.rs  Listing -: Adding optional type annotations of the parameter and return value types in the closure  With type annotations added, the syntax of closures looks more similar to the syntax of functions. Here we define a function that adds  to its parameter and a closure that has the same behavior, for comparison. We‚Äôve added some spaces to line up the relevant parts. This illustrates how closure syntax is similar to function syntax except for the use of pipes and the amount of syntax that is optional:  The first line shows a function definition, and the second line shows a fully annotated closure definition. In the third line, we remove the type annotations from the closure definition. In the fourth line, we remove the brackets, which are optional because the closure body has only one expression. These are all valid definitions that will produce the same behavior when they‚Äôre called. The add_one_v and add_one_v lines require the closures to be evaluated to be able to compile because the types will be inferred from their usage. This is similar to let v = Vec::new(); needing either type annotations or values of some type to be inserted into the Vec for Rust to be able to infer the type.  For closure definitions, the compiler will infer one concrete type for each of their parameters and for their return value. For instance, Listing - shows the definition of a short closure that just returns the value it receives as a parameter. This closure isn‚Äôt very useful except for the purposes of this example. Note that we haven‚Äôt added any type annotations to the definition. Because there are no type annotations, we can call the closure with any type, which we‚Äôve done here with String the first time. If we then try to call example_closure with an integer, we‚Äôll get an error.  Filename: src/main.rs  Listing -: Attempting to call a closure whose types are inferred with two different types  The compiler gives us this error:  The first time we call example_closure with the String value, the compiler infers the type of x and the return type of the closure to be String. Those types are then locked into the closure in example_closure, and we get a type error when we next try to use a different type with the same closure.  Capturing References or Moving Ownership Closures can capture values from their environment in three ways, which directly map to the three ways a function can take a parameter: borrowing immutably, borrowing mutably, and taking ownership. The closure will decide which of these to use based on what the body of the function does with the captured values.  In Listing -, we define a closure that captures an immutable reference to the vector named list because it only needs an immutable reference to print the value:  Filename: src/main.rs  Listing -: Defining and calling a closure that captures an immutable reference  This example also illustrates that a variable can bind to a closure definition, and we can later call the closure by using the variable name and parentheses as if the variable name were a function name.  Because we can have multiple immutable references to list at the same time, list is still accessible from the code before the closure definition, after the closure definition but before the closure is called, and after the closure is called. This code compiles, runs, and prints:  Next, in Listing -, we change the closure body so that it adds an element to the list vector. The closure now captures a mutable reference:  Filename: src/main.rs  Listing -: Defining and calling a closure that captures a mutable reference  This code compiles, runs, and prints:  Note that there‚Äôs no longer a println! between the definition and the call of the borrows_mutably closure: when borrows_mutably is defined, it captures a mutable reference to list. We don‚Äôt use the closure again after the closure is called, so the mutable borrow ends. Between the closure definition and the closure call, an immutable borrow to print isn‚Äôt allowed because no other borrows are allowed when there‚Äôs a mutable borrow. Try adding a println! there to see what error message you get!  If you want to force the closure to take ownership of the values it uses in the environment even though the body of the closure doesn‚Äôt strictly need ownership, you can use the move keyword before the parameter list.  This technique is mostly useful when passing a closure to a new thread to move the data so that it‚Äôs owned by the new thread. We‚Äôll discuss threads and why you would want to use them in detail in Chapter  when we talk about concurrency, but for now, let‚Äôs briefly explore spawning a new thread using a closure that needs the move keyword. Listing - shows Listing - modified to print the vector in a new thread rather than in the main thread:  Filename: src/main.rs  Listing -: Using move to force the closure for the thread to take ownership of list  We spawn a new thread, giving the thread a closure to run as an argument. The closure body prints out the list. In Listing -, the closure only captured list using an immutable reference because that's the least amount of access to list needed to print it. In this example, even though the closure body still only needs an immutable reference, we need to specify that list should be moved into the closure by putting the move keyword at the beginning of the closure definition. The new thread might finish before the rest of the main thread finishes, or the main thread might finish first. If the main thread maintained ownership of list but ended before the new thread did and dropped list, the immutable reference in the thread would be invalid. Therefore, the compiler requires that list be moved into the closure given to the new thread so the reference will be valid. Try removing the move keyword or using list in the main thread after the closure is defined to see what compiler errors you get!   Moving Captured Values Out of Closures and the Fn Traits Once a closure has captured a reference or captured ownership of a value from the environment where the closure is defined (thus affecting what, if anything, is moved into the closure), the code in the body of the closure defines what happens to the references or values when the closure is evaluated later (thus affecting what, if anything, is moved out of the closure). A closure body can do any of the following: move a captured value out of the closure, mutate the captured value, neither move nor mutate the value, or capture nothing from the environment to begin with.  The way a closure captures and handles values from the environment affects which traits the closure implements, and traits are how functions and structs can specify what kinds of closures they can use. Closures will automatically implement one, two, or all three of these Fn traits, in an additive fashion, depending on how the closure‚Äôs body handles the values:  FnOnce applies to closures that can be called once. All closures implement at least this trait, because all closures can be called. A closure that moves captured values out of its body will only implement FnOnce and none of the other Fn traits, because it can only be called once. FnMut applies to closures that don‚Äôt move captured values out of their body, but that might mutate the captured values. These closures can be called more than once. Fn applies to closures that don‚Äôt move captured values out of their body and that don‚Äôt mutate captured values, as well as closures that capture nothing from their environment. These closures can be called more than once without mutating their environment, which is important in cases such as calling a closure multiple times concurrently. Let‚Äôs look at the definition of the unwrap_or_else method on Option<T> that we used in Listing -:  Recall that T is the generic type representing the type of the value in the Some variant of an Option. That type T is also the return type of the unwrap_or_else function: code that calls unwrap_or_else on an Option<String>, for example, will get a String.  Next, notice that the unwrap_or_else function has the additional generic type parameter F. The F type is the type of the parameter named f, which is the closure we provide when calling unwrap_or_else.  The trait bound specified on the generic type F is FnOnce() -> T, which means F must be able to be called once, take no arguments, and return a T. Using FnOnce in the trait bound expresses the constraint that unwrap_or_else is only going to call f at most one time. In the body of unwrap_or_else, we can see that if the Option is Some, f won‚Äôt be called. If the Option is None, f will be called once. Because all closures implement FnOnce, unwrap_or_else accepts all three kinds of closures and is as flexible as it can be.  Note: Functions can implement all three of the Fn traits too. If what we want to do doesn‚Äôt require capturing a value from the environment, we can use the name of a function rather than a closure where we need something that implements one of the Fn traits. For example, on an Option<Vec<T>> value, we could call unwrap_or_else(Vec::new) to get a new, empty vector if the value is None.  Now let‚Äôs look at the standard library method sort_by_key defined on slices, to see how that differs from unwrap_or_else and why sort_by_key uses FnMut instead of FnOnce for the trait bound. The closure gets one argument in the form of a reference to the current item in the slice being considered, and returns a value of type K that can be ordered. This function is useful when you want to sort a slice by a particular attribute of each item. In Listing -, we have a list of Rectangle instances and we use sort_by_key to order them by their width attribute from low to high:  Filename: src/main.rs  Listing -: Using sort_by_key to order rectangles by width  This code prints:  The reason sort_by_key is defined to take an FnMut closure is that it calls the closure multiple times: once for each item in the slice. The closure |r| r.width doesn‚Äôt capture, mutate, or move out anything from its environment, so it meets the trait bound requirements.  In contrast, Listing - shows an example of a closure that implements just the FnOnce trait, because it moves a value out of the environment. The compiler won‚Äôt let us use this closure with sort_by_key:  Filename: src/main.rs  Listing -: Attempting to use an FnOnce closure with sort_by_key  This is a contrived, convoluted way (that doesn‚Äôt work) to try and count the number of times sort_by_key calls the closure when sorting list. This code attempts to do this counting by pushing value‚Äîa String from the closure‚Äôs environment‚Äîinto the sort_operations vector. The closure captures value then moves value out of the closure by transferring ownership of value to the sort_operations vector. This closure can be called once; trying to call it a second time wouldn‚Äôt work because value would no longer be in the environment to be pushed into sort_operations again! Therefore, this closure only implements FnOnce. When we try to compile this code, we get this error that value can‚Äôt be moved out of the closure because the closure must implement FnMut:  The error points to the line in the closure body that moves value out of the environment. To fix this, we need to change the closure body so that it doesn‚Äôt move values out of the environment. To count the number of times the closure is called, keeping a counter in the environment and incrementing its value in the closure body is a more straightforward way to calculate that. The closure in Listing - works with sort_by_key because it is only capturing a mutable reference to the num_sort_operations counter and can therefore be called more than once:  Filename: src/main.rs  Listing -: Using an FnMut closure with sort_by_key is allowed  The Fn traits are important when defining or using functions or types that make use of closures. In the next section, we‚Äôll discuss iterators. Many iterator methods take closure arguments, so keep these closure details in mind as we continue!  Processing a Series of Items with Iterators The iterator pattern allows you to perform some task on a sequence of items in turn. An iterator is responsible for the logic of iterating over each item and determining when the sequence has finished. When you use iterators, you don‚Äôt have to reimplement that logic yourself.  In Rust, iterators are lazy, meaning they have no effect until you call methods that consume the iterator to use it up. For example, the code in Listing - creates an iterator over the items in the vector v by calling the iter method defined on Vec<T>. This code by itself doesn‚Äôt do anything useful.  Listing -: Creating an iterator  The iterator is stored in the v_iter variable. Once we‚Äôve created an iterator, we can use it in a variety of ways. In Listing - in Chapter , we iterated over an array using a for loop to execute some code on each of its items. Under the hood this implicitly created and then consumed an iterator, but we glossed over how exactly that works until now.  In the example in Listing -, we separate the creation of the iterator from the use of the iterator in the for loop. When the for loop is called using the iterator in v_iter, each element in the iterator is used in one iteration of the loop, which prints out each value.  Listing -: Using an iterator in a for loop  In languages that don‚Äôt have iterators provided by their standard libraries, you would likely write this same functionality by starting a variable at index , using that variable to index into the vector to get a value, and incrementing the variable value in a loop until it reached the total number of items in the vector.  Iterators handle all that logic for you, cutting down on repetitive code you could potentially mess up. Iterators give you more flexibility to use the same logic with many different kinds of sequences, not just data structures you can index into, like vectors. Let‚Äôs examine how iterators do that.  The Iterator Trait and the next Method All iterators implement a trait named Iterator that is defined in the standard library. The definition of the trait looks like this:  Notice this definition uses some new syntax: type Item and Self::Item, which are defining an associated type with this trait. We‚Äôll talk about associated types in depth in Chapter . For now, all you need to know is that this code says implementing the Iterator trait requires that you also define an Item type, and this Item type is used in the return type of the next method. In other words, the Item type will be the type returned from the iterator.  The Iterator trait only requires implementors to define one method: the next method, which returns one item of the iterator at a time wrapped in Some and, when iteration is over, returns None.  We can call the next method on iterators directly; Listing - demonstrates what values are returned from repeated calls to next on the iterator created from the vector.  Filename: src/lib.rs  Listing -: Calling the next method on an iterator  Note that we needed to make v_iter mutable: calling the next method on an iterator changes internal state that the iterator uses to keep track of where it is in the sequence. In other words, this code consumes, or uses up, the iterator. Each call to next eats up an item from the iterator. We didn‚Äôt need to make v_iter mutable when we used a for loop because the loop took ownership of v_iter and made it mutable behind the scenes.  Also note that the values we get from the calls to next are immutable references to the values in the vector. The iter method produces an iterator over immutable references. If we want to create an iterator that takes ownership of v and returns owned values, we can call into_iter instead of iter. Similarly, if we want to iterate over mutable references, we can call iter_mut instead of iter.  Methods that Consume the Iterator The Iterator trait has a number of different methods with default implementations provided by the standard library; you can find out about these methods by looking in the standard library API documentation for the Iterator trait. Some of these methods call the next method in their definition, which is why you‚Äôre required to implement the next method when implementing the Iterator trait.  Methods that call next are called consuming adaptors, because calling them uses up the iterator. One example is the sum method, which takes ownership of the iterator and iterates through the items by repeatedly calling next, thus consuming the iterator. As it iterates through, it adds each item to a running total and returns the total when iteration is complete. Listing - has a test illustrating a use of the sum method:  Filename: src/lib.rs  Listing -: Calling the sum method to get the total of all items in the iterator  We aren‚Äôt allowed to use v_iter after the call to sum because sum takes ownership of the iterator we call it on.  Methods that Produce Other Iterators Iterator adaptors are methods defined on the Iterator trait that don‚Äôt consume the iterator. Instead, they produce different iterators by changing some aspect of the original iterator.  Listing - shows an example of calling the iterator adaptor method map, which takes a closure to call on each item as the items are iterated through. The map method returns a new iterator that produces the modified items. The closure here creates a new iterator in which each item from the vector will be incremented by :  Filename: src/main.rs  Listing -: Calling the iterator adaptor map to create a new iterator  However, this code produces a warning:  The code in Listing - doesn‚Äôt do anything; the closure we‚Äôve specified never gets called. The warning reminds us why: iterator adaptors are lazy, and we need to consume the iterator here.  To fix this warning and consume the iterator, we‚Äôll use the collect method, which we used in Chapter  with env::args in Listing -. This method consumes the iterator and collects the resulting values into a collection data type.  In Listing -, we collect the results of iterating over the iterator that‚Äôs returned from the call to map into a vector. This vector will end up containing each item from the original vector incremented by .  Filename: src/main.rs  Listing -: Calling the map method to create a new iterator and then calling the collect method to consume the new iterator and create a vector  Because map takes a closure, we can specify any operation we want to perform on each item. This is a great example of how closures let you customize some behavior while reusing the iteration behavior that the Iterator trait provides.  You can chain multiple calls to iterator adaptors to perform complex actions in a readable way. But because all iterators are lazy, you have to call one of the consuming adaptor methods to get results from calls to iterator adaptors.  Using Closures that Capture Their Environment Many iterator adapters take closures as arguments, and commonly the closures we‚Äôll specify as arguments to iterator adapters will be closures that capture their environment.  For this example, we‚Äôll use the filter method that takes a closure. The closure gets an item from the iterator and returns a bool. If the closure returns true, the value will be included in the iteration produced by filter. If the closure returns false, the value won‚Äôt be included.  In Listing -, we use filter with a closure that captures the shoe_size variable from its environment to iterate over a collection of Shoe struct instances. It will return only shoes that are the specified size.  Filename: src/lib.rs  Listing -: Using the filter method with a closure that captures shoe_size  The shoes_in_size function takes ownership of a vector of shoes and a shoe size as parameters. It returns a vector containing only shoes of the specified size.  In the body of shoes_in_size, we call into_iter to create an iterator that takes ownership of the vector. Then we call filter to adapt that iterator into a new iterator that only contains elements for which the closure returns true.  The closure captures the shoe_size parameter from the environment and compares the value with each shoe‚Äôs size, keeping only shoes of the size specified. Finally, calling collect gathers the values returned by the adapted iterator into a vector that‚Äôs returned by the function.  The test shows that when we call shoes_in_size, we get back only shoes that have the same size as the value we specified.  Improving Our I/O Project With this new knowledge about iterators, we can improve the I/O project in Chapter  by using iterators to make places in the code clearer and more concise. Let‚Äôs look at how iterators can improve our implementation of the Config::build function and the search function.  Removing a clone Using an Iterator In Listing -, we added code that took a slice of String values and created an instance of the Config struct by indexing into the slice and cloning the values, allowing the Config struct to own those values. In Listing -, we‚Äôve reproduced the implementation of the Config::build function as it was in Listing -:  Filename: src/lib.rs  Listing -: Reproduction of the Config::build function from Listing -  At the time, we said not to worry about the inefficient clone calls because we would remove them in the future. Well, that time is now!  We needed clone here because we have a slice with String elements in the parameter args, but the build function doesn‚Äôt own args. To return ownership of a Config instance, we had to clone the values from the query and file_path fields of Config so the Config instance can own its values.  With our new knowledge about iterators, we can change the build function to take ownership of an iterator as its argument instead of borrowing a slice. We‚Äôll use the iterator functionality instead of the code that checks the length of the slice and indexes into specific locations. This will clarify what the Config::build function is doing because the iterator will access the values.  Once Config::build takes ownership of the iterator and stops using indexing operations that borrow, we can move the String values from the iterator into Config rather than calling clone and making a new allocation.  Using the Returned Iterator Directly Open your I/O project‚Äôs src/main.rs file, which should look like this:  Filename: src/main.rs  We‚Äôll first change the start of the main function that we had in Listing - to the code in Listing -, which this time uses an iterator. This won‚Äôt compile until we update Config::build as well.  Filename: src/main.rs  Listing -: Passing the return value of env::args to Config::build  The env::args function returns an iterator! Rather than collecting the iterator values into a vector and then passing a slice to Config::build, now we‚Äôre passing ownership of the iterator returned from env::args to Config::build directly.  Next, we need to update the definition of Config::build. In your I/O project‚Äôs src/lib.rs file, let‚Äôs change the signature of Config::build to look like Listing -. This still won‚Äôt compile because we need to update the function body.  Filename: src/lib.rs  Listing -: Updating the signature of Config::build to expect an iterator  The standard library documentation for the env::args function shows that the type of the iterator it returns is std::env::Args, and that type implements the Iterator trait and returns String values.  We‚Äôve updated the signature of the Config::build function so the parameter args has a generic type with the trait bounds impl Iterator<Item = String> instead of &[String]. This usage of the impl Trait syntax we discussed in the ‚ÄúTraits as Parameters‚Äù section of Chapter  means that args can be any type that implements the Iterator trait and returns String items.  Because we‚Äôre taking ownership of args and we‚Äôll be mutating args by iterating over it, we can add the mut keyword into the specification of the args parameter to make it mutable.  Using Iterator Trait Methods Instead of Indexing Next, we‚Äôll fix the body of Config::build. Because args implements the Iterator trait, we know we can call the next method on it! Listing - updates the code from Listing - to use the next method:  Filename: src/lib.rs  Listing -: Changing the body of Config::build to use iterator methods  Remember that the first value in the return value of env::args is the name of the program. We want to ignore that and get to the next value, so first we call next and do nothing with the return value. Second, we call next to get the value we want to put in the query field of Config. If next returns a Some, we use a match to extract the value. If it returns None, it means not enough arguments were given and we return early with an Err value. We do the same thing for the file_path value.  Making Code Clearer with Iterator Adaptors We can also take advantage of iterators in the search function in our I/O project, which is reproduced here in Listing - as it was in Listing -:  Filename: src/lib.rs  Listing -: The implementation of the search function from Listing -  We can write this code in a more concise way using iterator adaptor methods. Doing so also lets us avoid having a mutable intermediate results vector. The functional programming style prefers to minimize the amount of mutable state to make code clearer. Removing the mutable state might enable a future enhancement to make searching happen in parallel, because we wouldn‚Äôt have to manage concurrent access to the results vector. Listing - shows this change:  Filename: src/lib.rs  Listing -: Using iterator adaptor methods in the implementation of the search function  Recall that the purpose of the search function is to return all lines in contents that contain the query. Similar to the filter example in Listing -, this code uses the filter adaptor to keep only the lines that line.contains(query) returns true for. We then collect the matching lines into another vector with collect. Much simpler! Feel free to make the same change to use iterator methods in the search_case_insensitive function as well.  Choosing Between Loops or Iterators The next logical question is which style you should choose in your own code and why: the original implementation in Listing - or the version using iterators in Listing -. Most Rust programmers prefer to use the iterator style. It‚Äôs a bit tougher to get the hang of at first, but once you get a feel for the various iterator adaptors and what they do, iterators can be easier to understand. Instead of fiddling with the various bits of looping and building new vectors, the code focuses on the high-level objective of the loop. This abstracts away some of the commonplace code so it‚Äôs easier to see the concepts that are unique to this code, such as the filtering condition each element in the iterator must pass.  But are the two implementations truly equivalent? The intuitive assumption might be that the more low-level loop will be faster. Let‚Äôs talk about performance.  Comparing Performance: Loops vs. Iterators To determine whether to use loops or iterators, you need to know which implementation is faster: the version of the search function with an explicit for loop or the version with iterators.  We ran a benchmark by loading the entire contents of The Adventures of Sherlock Holmes by Sir Arthur Conan Doyle into a String and looking for the word the in the contents. Here are the results of the benchmark on the version of search using the for loop and the version using iterators:  The iterator version was slightly faster! We won‚Äôt explain the benchmark code here, because the point is not to prove that the two versions are equivalent but to get a general sense of how these two implementations compare performance-wise.  For a more comprehensive benchmark, you should check using various texts of various sizes as the contents, different words and words of different lengths as the query, and all kinds of other variations. The point is this: iterators, although a high-level abstraction, get compiled down to roughly the same code as if you‚Äôd written the lower-level code yourself. Iterators are one of Rust‚Äôs zero-cost abstractions, by which we mean using the abstraction imposes no additional runtime overhead. This is analogous to how Bjarne Stroustrup, the original designer and implementor of C++, defines zero-overhead in ‚ÄúFoundations of C++‚Äù ():  In general, C++ implementations obey the zero-overhead principle: What you don‚Äôt use, you don‚Äôt pay for. And further: What you do use, you couldn‚Äôt hand code any better.  As another example, the following code is taken from an audio decoder. The decoding algorithm uses the linear prediction mathematical operation to estimate future values based on a linear function of the previous samples. This code uses an iterator chain to do some math on three variables in scope: a buffer slice of data, an array of  coefficients, and an amount by which to shift data in qlp_shift. We‚Äôve declared the variables within this example but not given them any values; although this code doesn‚Äôt have much meaning outside of its context, it‚Äôs still a concise, real-world example of how Rust translates high-level ideas to low-level code.  To calculate the value of prediction, this code iterates through each of the  values in coefficients and uses the zip method to pair the coefficient values with the previous  values in buffer. Then, for each pair, we multiply the values together, sum all the results, and shift the bits in the sum qlp_shift bits to the right.  Calculations in applications like audio decoders often prioritize performance most highly. Here, we‚Äôre creating an iterator, using two adaptors, and then consuming the value. What assembly code would this Rust code compile to? Well, as of this writing, it compiles down to the same assembly you‚Äôd write by hand. There‚Äôs no loop at all corresponding to the iteration over the values in coefficients: Rust knows that there are  iterations, so it ‚Äúunrolls‚Äù the loop. Unrolling is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.  All of the coefficients get stored in registers, which means accessing the values is very fast. There are no bounds checks on the array access at runtime. All these optimizations that Rust is able to apply make the resulting code extremely efficient. Now that you know this, you can use iterators and closures without fear! They make code seem like it‚Äôs higher level but don‚Äôt impose a runtime performance penalty for doing so.  Summary Closures and iterators are Rust features inspired by functional programming language ideas. They contribute to Rust‚Äôs capability to clearly express high-level ideas at low-level performance. The implementations of closures and iterators are such that runtime performance is not affected. This is part of Rust‚Äôs goal to strive to provide zero-cost abstractions.  Now that we‚Äôve improved the expressiveness of our I/O project, let‚Äôs look at some more features of cargo that will help us share the project with the world.  More About Cargo and Crates.io So far we‚Äôve used only the most basic features of Cargo to build, run, and test our code, but it can do a lot more. In this chapter, we‚Äôll discuss some of its other, more advanced features to show you how to do the following:  Customize your build through release profiles Publish libraries on crates.io Organize large projects with workspaces Install binaries from crates.io Extend Cargo using custom commands Cargo can do even more than the functionality we cover in this chapter, so for a full explanation of all its features, see its documentation.  Customizing Builds with Release Profiles In Rust, release profiles are predefined and customizable profiles with different configurations that allow a programmer to have more control over various options for compiling code. Each profile is configured independently of the others.  Cargo has two main profiles: the dev profile Cargo uses when you run cargo build and the release profile Cargo uses when you run cargo build --release. The dev profile is defined with good defaults for development, and the release profile has good defaults for release builds.  These profile names might be familiar from the output of your builds:  The dev and release are these different profiles used by the compiler.  Cargo has default settings for each of the profiles that apply when you haven't explicitly added any [profile.*] sections in the project‚Äôs Cargo.toml file. By adding [profile.*] sections for any profile you want to customize, you override any subset of the default settings. For example, here are the default values for the opt-level setting for the dev and release profiles:  Filename: Cargo.toml  The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of  to . Applying more optimizations extends compiling time, so if you‚Äôre in development and compiling your code often, you‚Äôll want fewer optimizations to compile faster even if the resulting code runs slower. The default opt-level for dev is therefore . When you‚Äôre ready to release your code, it‚Äôs best to spend more time compiling. You‚Äôll only compile in release mode once, but you‚Äôll run the compiled program many times, so release mode trades longer compile time for code that runs faster. That is why the default opt-level for the release profile is .  You can override a default setting by adding a different value for it in Cargo.toml. For example, if we want to use optimization level  in the development profile, we can add these two lines to our project‚Äôs Cargo.toml file:  Filename: Cargo.toml  This code overrides the default setting of . Now when we run cargo build, Cargo will use the defaults for the dev profile plus our customization to opt-level. Because we set opt-level to , Cargo will apply more optimizations than the default, but not as many as in a release build.  For the full list of configuration options and defaults for each profile, see Cargo‚Äôs documentation.  Publishing a Crate to Crates.io We‚Äôve used packages from crates.io as dependencies of our project, but you can also share your code with other people by publishing your own packages. The crate registry at crates.io distributes the source code of your packages, so it primarily hosts code that is open source.  Rust and Cargo have features that make your published package easier for people to find and use. We‚Äôll talk about some of these features next and then explain how to publish a package.  Making Useful Documentation Comments Accurately documenting your packages will help other users know how and when to use them, so it‚Äôs worth investing the time to write documentation. In Chapter , we discussed how to comment Rust code using two slashes, //. Rust also has a particular kind of comment for documentation, known conveniently as a documentation comment, that will generate HTML documentation. The HTML displays the contents of documentation comments for public API items intended for programmers interested in knowing how to use your crate as opposed to how your crate is implemented.  Documentation comments use three slashes, ///, instead of two and support Markdown notation for formatting the text. Place documentation comments just before the item they‚Äôre documenting. Listing - shows documentation comments for an add_one function in a crate named my_crate.  Filename: src/lib.rs  Listing -: A documentation comment for a function  Here, we give a description of what the add_one function does, start a section with the heading Examples, and then provide code that demonstrates how to use the add_one function. We can generate the HTML documentation from this documentation comment by running cargo doc. This command runs the rustdoc tool distributed with Rust and puts the generated HTML documentation in the target/doc directory.  For convenience, running cargo doc --open will build the HTML for your current crate‚Äôs documentation (as well as the documentation for all of your crate‚Äôs dependencies) and open the result in a web browser. Navigate to the add_one function and you‚Äôll see how the text in the documentation comments is rendered, as shown in Figure -:  Rendered HTML documentation for the `add_one` function of `my_crate` Figure -: HTML documentation for the add_one function  Commonly Used Sections We used the # Examples Markdown heading in Listing - to create a section in the HTML with the title ‚ÄúExamples.‚Äù Here are some other sections that crate authors commonly use in their documentation:  Panics: The scenarios in which the function being documented could panic. Callers of the function who don‚Äôt want their programs to panic should make sure they don‚Äôt call the function in these situations. Errors: If the function returns a Result, describing the kinds of errors that might occur and what conditions might cause those errors to be returned can be helpful to callers so they can write code to handle the different kinds of errors in different ways. Safety: If the function is unsafe to call (we discuss unsafety in Chapter ), there should be a section explaining why the function is unsafe and covering the invariants that the function expects callers to uphold. Most documentation comments don‚Äôt need all of these sections, but this is a good checklist to remind you of the aspects of your code users will be interested in knowing about.  Documentation Comments as Tests Adding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has an additional bonus: running cargo test will run the code examples in your documentation as tests! Nothing is better than documentation with examples. But nothing is worse than examples that don‚Äôt work because the code has changed since the documentation was written. If we run cargo test with the documentation for the add_one function from Listing -, we will see a section in the test results like this:  Now if we change either the function or the example so the assert_eq! in the example panics and run cargo test again, we‚Äôll see that the doc tests catch that the example and the code are out of sync with each other!  Commenting Contained Items The style of doc comment //! adds documentation to the item that contains the comments rather than to the items following the comments. We typically use these doc comments inside the crate root file (src/lib.rs by convention) or inside a module to document the crate or the module as a whole.  For example, to add documentation that describes the purpose of the my_crate crate that contains the add_one function, we add documentation comments that start with //! to the beginning of the src/lib.rs file, as shown in Listing -:  Filename: src/lib.rs  Listing -: Documentation for the my_crate crate as a whole  Notice there isn‚Äôt any code after the last line that begins with //!. Because we started the comments with //! instead of ///, we‚Äôre documenting the item that contains this comment rather than an item that follows this comment. In this case, that item is the src/lib.rs file, which is the crate root. These comments describe the entire crate.  When we run cargo doc --open, these comments will display on the front page of the documentation for my_crate above the list of public items in the crate, as shown in Figure -:  Rendered HTML documentation with a comment for the crate as a whole Figure -: Rendered documentation for my_crate, including the comment describing the crate as a whole  Documentation comments within items are useful for describing crates and modules especially. Use them to explain the overall purpose of the container to help your users understand the crate‚Äôs organization.  Exporting a Convenient Public API with pub use The structure of your public API is a major consideration when publishing a crate. People who use your crate are less familiar with the structure than you are and might have difficulty finding the pieces they want to use if your crate has a large module hierarchy.  In Chapter , we covered how to make items public using the pub keyword, and bring items into a scope with the use keyword. However, the structure that makes sense to you while you‚Äôre developing a crate might not be very convenient for your users. You might want to organize your structs in a hierarchy containing multiple levels, but then people who want to use a type you‚Äôve defined deep in the hierarchy might have trouble finding out that type exists. They might also be annoyed at having to enter use my_crate::some_module::another_module::UsefulType; rather than use my_crate::UsefulType;.  The good news is that if the structure isn‚Äôt convenient for others to use from another library, you don‚Äôt have to rearrange your internal organization: instead, you can re-export items to make a public structure that‚Äôs different from your private structure by using pub use. Re-exporting takes a public item in one location and makes it public in another location, as if it were defined in the other location instead.  For example, say we made a library named art for modeling artistic concepts. Within this library are two modules: a kinds module containing two enums named PrimaryColor and SecondaryColor and a utils module containing a function named mix, as shown in Listing -:  Filename: src/lib.rs  Listing -: An art library with items organized into kinds and utils modules  Figure - shows what the front page of the documentation for this crate generated by cargo doc would look like:  Rendered documentation for the `art` crate that lists the `kinds` and `utils` modules Figure -: Front page of the documentation for art that lists the kinds and utils modules  Note that the PrimaryColor and SecondaryColor types aren‚Äôt listed on the front page, nor is the mix function. We have to click kinds and utils to see them.  Another crate that depends on this library would need use statements that bring the items from art into scope, specifying the module structure that‚Äôs currently defined. Listing - shows an example of a crate that uses the PrimaryColor and mix items from the art crate:  Filename: src/main.rs  Listing -: A crate using the art crate‚Äôs items with its internal structure exported  The author of the code in Listing -, which uses the art crate, had to figure out that PrimaryColor is in the kinds module and mix is in the utils module. The module structure of the art crate is more relevant to developers working on the art crate than to those using it. The internal structure doesn‚Äôt contain any useful information for someone trying to understand how to use the art crate, but rather causes confusion because developers who use it have to figure out where to look, and must specify the module names in the use statements.  To remove the internal organization from the public API, we can modify the art crate code in Listing - to add pub use statements to re-export the items at the top level, as shown in Listing -:  Filename: src/lib.rs  Listing -: Adding pub use statements to re-export items  The API documentation that cargo doc generates for this crate will now list and link re-exports on the front page, as shown in Figure -, making the PrimaryColor and SecondaryColor types and the mix function easier to find.  Rendered documentation for the `art` crate with the re-exports on the front page Figure -: The front page of the documentation for art that lists the re-exports  The art crate users can still see and use the internal structure from Listing - as demonstrated in Listing -, or they can use the more convenient structure in Listing -, as shown in Listing -:  Filename: src/main.rs  Listing -: A program using the re-exported items from the art crate  In cases where there are many nested modules, re-exporting the types at the top level with pub use can make a significant difference in the experience of people who use the crate. Another common use of pub use is to re-export definitions of a dependency in the current crate to make that crate's definitions part of your crate‚Äôs public API.  Creating a useful public API structure is more of an art than a science, and you can iterate to find the API that works best for your users. Choosing pub use gives you flexibility in how you structure your crate internally and decouples that internal structure from what you present to your users. Look at some of the code of crates you‚Äôve installed to see if their internal structure differs from their public API.  Setting Up a Crates.io Account Before you can publish any crates, you need to create an account on crates.io and get an API token. To do so, visit the home page at crates.io and log in via a GitHub account. (The GitHub account is currently a requirement, but the site might support other ways of creating an account in the future.) Once you‚Äôre logged in, visit your account settings at https://crates.io/me/ and retrieve your API key. Then run the cargo login command and paste your API key when prompted, like this:  This command will inform Cargo of your API token and store it locally in ~/.cargo/credentials. Note that this token is a secret: do not share it with anyone else. If you do share it with anyone for any reason, you should revoke it and generate a new token on crates.io.  Adding Metadata to a New Crate Let‚Äôs say you have a crate you want to publish. Before publishing, you‚Äôll need to add some metadata in the [package] section of the crate‚Äôs Cargo.toml file.  Your crate will need a unique name. While you‚Äôre working on a crate locally, you can name a crate whatever you‚Äôd like. However, crate names on crates.io are allocated on a first-come, first-served basis. Once a crate name is taken, no one else can publish a crate with that name. Before attempting to publish a crate, search for the name you want to use. If the name has been used, you will need to find another name and edit the name field in the Cargo.toml file under the [package] section to use the new name for publishing, like so:  Filename: Cargo.toml  Even if you‚Äôve chosen a unique name, when you run cargo publish to publish the crate at this point, you‚Äôll get a warning and then an error:  This errors because you‚Äôre missing some crucial information: a description and license are required so people will know what your crate does and under what terms they can use it. In Cargo.toml, add a description that's just a sentence or two, because it will appear with your crate in search results. For the license field, you need to give a license identifier value. The Linux Foundation‚Äôs Software Package Data Exchange (SPDX) lists the identifiers you can use for this value. For example, to specify that you‚Äôve licensed your crate using the MIT License, add the MIT identifier:  Filename: Cargo.toml  If you want to use a license that doesn‚Äôt appear in the SPDX, you need to place the text of that license in a file, include the file in your project, and then use license-file to specify the name of that file instead of using the license key.  Guidance on which license is appropriate for your project is beyond the scope of this book. Many people in the Rust community license their projects in the same way as Rust by using a dual license of MIT OR Apache-.. This practice demonstrates that you can also specify multiple license identifiers separated by OR to have multiple licenses for your project.  With a unique name, the version, your description, and a license added, the Cargo.toml file for a project that is ready to publish might look like this:  Filename: Cargo.toml  Cargo‚Äôs documentation describes other metadata you can specify to ensure others can discover and use your crate more easily.  Publishing to Crates.io Now that you‚Äôve created an account, saved your API token, chosen a name for your crate, and specified the required metadata, you‚Äôre ready to publish! Publishing a crate uploads a specific version to crates.io for others to use.  Be careful, because a publish is permanent. The version can never be overwritten, and the code cannot be deleted. One major goal of crates.io is to act as a permanent archive of code so that builds of all projects that depend on crates from crates.io will continue to work. Allowing version deletions would make fulfilling that goal impossible. However, there is no limit to the number of crate versions you can publish.  Run the cargo publish command again. It should succeed now:  Congratulations! You‚Äôve now shared your code with the Rust community, and anyone can easily add your crate as a dependency of their project.  Publishing a New Version of an Existing Crate When you‚Äôve made changes to your crate and are ready to release a new version, you change the version value specified in your Cargo.toml file and republish. Use the Semantic Versioning rules to decide what an appropriate next version number is based on the kinds of changes you‚Äôve made. Then run cargo publish to upload the new version.   Deprecating Versions from Crates.io with cargo yank Although you can‚Äôt remove previous versions of a crate, you can prevent any future projects from adding them as a new dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports yanking a crate version.  Yanking a version prevents new projects from depending on that version while allowing all existing projects that depend on it to continue. Essentially, a yank means that all projects with a Cargo.lock will not break, and any future Cargo.lock files generated will not use the yanked version.  To yank a version of a crate, in the directory of the crate that you‚Äôve previously published, run cargo yank and specify which version you want to yank. For example, if we've published a crate named guessing_game version .. and we want to yank it, in the project directory for guessing_game we'd run:  By adding --undo to the command, you can also undo a yank and allow projects to start depending on a version again:  A yank does not delete any code. It cannot, for example, delete accidentally uploaded secrets. If that happens, you must reset those secrets immediately.  Cargo Workspaces In Chapter , we built a package that included a binary crate and a library crate. As your project develops, you might find that the library crate continues to get bigger and you want to split your package further into multiple library crates. Cargo offers a feature called workspaces that can help manage multiple related packages that are developed in tandem.  Creating a Workspace A workspace is a set of packages that share the same Cargo.lock and output directory. Let‚Äôs make a project using a workspace‚Äîwe‚Äôll use trivial code so we can concentrate on the structure of the workspace. There are multiple ways to structure a workspace, so we'll just show one common way. We‚Äôll have a workspace containing a binary and two libraries. The binary, which will provide the main functionality, will depend on the two libraries. One library will provide an add_one function, and a second library an add_two function. These three crates will be part of the same workspace. We‚Äôll start by creating a new directory for the workspace:  Next, in the add directory, we create the Cargo.toml file that will configure the entire workspace. This file won‚Äôt have a [package] section. Instead, it will start with a [workspace] section that will allow us to add members to the workspace by specifying the path to the package with our binary crate; in this case, that path is adder:  Filename: Cargo.toml  Next, we‚Äôll create the adder binary crate by running cargo new within the add directory:  At this point, we can build the workspace by running cargo build. The files in your add directory should look like this:  The workspace has one target directory at the top level that the compiled artifacts will be placed into; the adder package doesn‚Äôt have its own target directory. Even if we were to run cargo build from inside the adder directory, the compiled artifacts would still end up in add/target rather than add/adder/target. Cargo structures the target directory in a workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own target directory, each crate would have to recompile each of the other crates in the workspace to place the artifacts in its own target directory. By sharing one target directory, the crates can avoid unnecessary rebuilding.  Creating the Second Package in the Workspace Next, let‚Äôs create another member package in the workspace and call it add_one. Change the top-level Cargo.toml to specify the add_one path in the members list:  Filename: Cargo.toml  Then generate a new library crate named add_one:  Your add directory should now have these directories and files:  In the add_one/src/lib.rs file, let‚Äôs add an add_one function:  Filename: add_one/src/lib.rs  Now we can have the adder package with our binary depend on the add_one package that has our library. First, we‚Äôll need to add a path dependency on add_one to adder/Cargo.toml.  Filename: adder/Cargo.toml  Cargo doesn‚Äôt assume that crates in a workspace will depend on each other, so we need to be explicit about the dependency relationships.  Next, let‚Äôs use the add_one function (from the add_one crate) in the adder crate. Open the adder/src/main.rs file and add a use line at the top to bring the new add_one library crate into scope. Then change the main function to call the add_one function, as in Listing -.  Filename: adder/src/main.rs  Listing -: Using the add_one library crate from the adder crate  Let‚Äôs build the workspace by running cargo build in the top-level add directory!  To run the binary crate from the add directory, we can specify which package in the workspace we want to run by using the -p argument and the package name with cargo run:  This runs the code in adder/src/main.rs, which depends on the add_one crate.  Depending on an External Package in a Workspace Notice that the workspace has only one Cargo.lock file at the top level, rather than having a Cargo.lock in each crate‚Äôs directory. This ensures that all crates are using the same version of all dependencies. If we add the rand package to the adder/Cargo.toml and add_one/Cargo.toml files, Cargo will resolve both of those to one version of rand and record that in the one Cargo.lock. Making all crates in the workspace use the same dependencies means the crates will always be compatible with each other. Let‚Äôs add the rand crate to the [dependencies] section in the add_one/Cargo.toml file so we can use the rand crate in the add_one crate:  Filename: add_one/Cargo.toml  We can now add use rand; to the add_one/src/lib.rs file, and building the whole workspace by running cargo build in the add directory will bring in and compile the rand crate. We will get one warning because we aren‚Äôt referring to the rand we brought into scope:  The top-level Cargo.lock now contains information about the dependency of add_one on rand. However, even though rand is used somewhere in the workspace, we can‚Äôt use it in other crates in the workspace unless we add rand to their Cargo.toml files as well. For example, if we add use rand; to the adder/src/main.rs file for the adder package, we‚Äôll get an error:  To fix this, edit the Cargo.toml file for the adder package and indicate that rand is a dependency for it as well. Building the adder package will add rand to the list of dependencies for adder in Cargo.lock, but no additional copies of rand will be downloaded. Cargo will ensure that every crate in every package in the workspace using the rand package will be using the same version as long as they specify compatible versions of rand, saving us space and ensuring that the crates in the workspace will be compatible with each other.  If crates in the workspace specify incompatible versions of the same dependency, Cargo will resolve each of them, but will still try to resolve as few versions as possible.  Adding a Test to a Workspace For another enhancement, let‚Äôs add a test of the add_one::add_one function within the add_one crate:  Filename: add_one/src/lib.rs  Now run cargo test in the top-level add directory. Running cargo test in a workspace structured like this one will run the tests for all the crates in the workspace:  The first section of the output shows that the it_works test in the add_one crate passed. The next section shows that zero tests were found in the adder crate, and then the last section shows zero documentation tests were found in the add_one crate.  We can also run tests for one particular crate in a workspace from the top-level directory by using the -p flag and specifying the name of the crate we want to test:  This output shows cargo test only ran the tests for the add_one crate and didn‚Äôt run the adder crate tests.  If you publish the crates in the workspace to crates.io, each crate in the workspace will need to be published separately. Like cargo test, we can publish a particular crate in our workspace by using the -p flag and specifying the name of the crate we want to publish.  For additional practice, add an add_two crate to this workspace in a similar way as the add_one crate!  As your project grows, consider using a workspace: it‚Äôs easier to understand smaller, individual components than one big blob of code. Furthermore, keeping the crates in a workspace can make coordination between crates easier if they are often changed at the same time.   Installing Binaries with cargo install The cargo install command allows you to install and use binary crates locally. This isn‚Äôt intended to replace system packages; it‚Äôs meant to be a convenient way for Rust developers to install tools that others have shared on crates.io. Note that you can only install packages that have binary targets. A binary target is the runnable program that is created if the crate has a src/main.rs file or another file specified as a binary, as opposed to a library target that isn‚Äôt runnable on its own but is suitable for including within other programs. Usually, crates have information in the README file about whether a crate is a library, has a binary target, or both.  All binaries installed with cargo install are stored in the installation root‚Äôs bin folder. If you installed Rust using rustup.rs and don‚Äôt have any custom configurations, this directory will be $HOME/.cargo/bin. Ensure that directory is in your $PATH to be able to run programs you‚Äôve installed with cargo install.  For example, in Chapter  we mentioned that there‚Äôs a Rust implementation of the grep tool called ripgrep for searching files. To install ripgrep, we can run the following:  The second-to-last line of the output shows the location and the name of the installed binary, which in the case of ripgrep is rg. As long as the installation directory is in your $PATH, as mentioned previously, you can then run rg --help and start using a faster, rustier tool for searching files!  Extending Cargo with Custom Commands Cargo is designed so you can extend it with new subcommands without having to modify Cargo. If a binary in your $PATH is named cargo-something, you can run it as if it was a Cargo subcommand by running cargo something. Custom commands like this are also listed when you run cargo --list. Being able to use cargo install to install extensions and then run them just like the built-in Cargo tools is a super convenient benefit of Cargo‚Äôs design!  Summary Sharing code with Cargo and crates.io is part of what makes the Rust ecosystem useful for many different tasks. Rust‚Äôs standard library is small and stable, but crates are easy to share, use, and improve on a timeline different from that of the language. Don‚Äôt be shy about sharing code that‚Äôs useful to you on crates.io; it‚Äôs likely that it will be useful to someone else as well!  Smart Pointers A pointer is a general concept for a variable that contains an address in memory. This address refers to, or ‚Äúpoints at,‚Äù some other data. The most common kind of pointer in Rust is a reference, which you learned about in Chapter . References are indicated by the & symbol and borrow the value they point to. They don‚Äôt have any special capabilities other than referring to data, and have no overhead.  Smart pointers, on the other hand, are data structures that act like a pointer but also have additional metadata and capabilities. The concept of smart pointers isn‚Äôt unique to Rust: smart pointers originated in C++ and exist in other languages as well. Rust has a variety of smart pointers defined in the standard library that provide functionality beyond that provided by references. To explore the general concept, we‚Äôll look at a couple of different examples of smart pointers, including a reference counting smart pointer type. This pointer enables you to allow data to have multiple owners by keeping track of the number of owners and, when no owners remain, cleaning up the data.  Rust, with its concept of ownership and borrowing, has an additional difference between references and smart pointers: while references only borrow data, in many cases, smart pointers own the data they point to.  Though we didn‚Äôt call them as such at the time, we‚Äôve already encountered a few smart pointers in this book, including String and Vec<T> in Chapter . Both these types count as smart pointers because they own some memory and allow you to manipulate it. They also have metadata and extra capabilities or guarantees. String, for example, stores its capacity as metadata and has the extra ability to ensure its data will always be valid UTF-.  Smart pointers are usually implemented using structs. Unlike an ordinary struct, smart pointers implement the Deref and Drop traits. The Deref trait allows an instance of the smart pointer struct to behave like a reference so you can write your code to work with either references or smart pointers. The Drop trait allows you to customize the code that‚Äôs run when an instance of the smart pointer goes out of scope. In this chapter, we‚Äôll discuss both traits and demonstrate why they‚Äôre important to smart pointers.  Given that the smart pointer pattern is a general design pattern used frequently in Rust, this chapter won‚Äôt cover every existing smart pointer. Many libraries have their own smart pointers, and you can even write your own. We‚Äôll cover the most common smart pointers in the standard library:  Box<T> for allocating values on the heap Rc<T>, a reference counting type that enables multiple ownership Ref<T> and RefMut<T>, accessed through RefCell<T>, a type that enforces the borrowing rules at runtime instead of compile time In addition, we‚Äôll cover the interior mutability pattern where an immutable type exposes an API for mutating an interior value. We‚Äôll also discuss reference cycles: how they can leak memory and how to prevent them.  Let‚Äôs dive in!  Using Box<T> to Point to Data on the Heap The most straightforward smart pointer is a box, whose type is written Box<T>. Boxes allow you to store data on the heap rather than the stack. What remains on the stack is the pointer to the heap data. Refer to Chapter  to review the difference between the stack and the heap.  Boxes don‚Äôt have performance overhead, other than storing their data on the heap instead of on the stack. But they don‚Äôt have many extra capabilities either. You‚Äôll use them most often in these situations:  When you have a type whose size can‚Äôt be known at compile time and you want to use a value of that type in a context that requires an exact size When you have a large amount of data and you want to transfer ownership but ensure the data won‚Äôt be copied when you do so When you want to own a value and you care only that it‚Äôs a type that implements a particular trait rather than being of a specific type We‚Äôll demonstrate the first situation in the ‚ÄúEnabling Recursive Types with Boxes‚Äù section. In the second case, transferring ownership of a large amount of data can take a long time because the data is copied around on the stack. To improve performance in this situation, we can store the large amount of data on the heap in a box. Then, only the small amount of pointer data is copied around on the stack, while the data it references stays in one place on the heap. The third case is known as a trait object, and Chapter  devotes an entire section, ‚ÄúUsing Trait Objects That Allow for Values of Different Types,‚Äù just to that topic. So what you learn here you‚Äôll apply again in Chapter !  Using a Box<T> to Store Data on the Heap Before we discuss the heap storage use case for Box<T>, we‚Äôll cover the syntax and how to interact with values stored within a Box<T>.  Listing - shows how to use a box to store an i value on the heap:  Filename: src/main.rs  Listing -: Storing an i value on the heap using a box  We define the variable b to have the value of a Box that points to the value , which is allocated on the heap. This program will print b = ; in this case, we can access the data in the box similar to how we would if this data were on the stack. Just like any owned value, when a box goes out of scope, as b does at the end of main, it will be deallocated. The deallocation happens both for the box (stored on the stack) and the data it points to (stored on the heap).  Putting a single value on the heap isn‚Äôt very useful, so you won‚Äôt use boxes by themselves in this way very often. Having values like a single i on the stack, where they‚Äôre stored by default, is more appropriate in the majority of situations. Let‚Äôs look at a case where boxes allow us to define types that we wouldn‚Äôt be allowed to if we didn‚Äôt have boxes.  Enabling Recursive Types with Boxes A value of recursive type can have another value of the same type as part of itself. Recursive types pose an issue because at compile time Rust needs to know how much space a type takes up. However, the nesting of values of recursive types could theoretically continue infinitely, so Rust can‚Äôt know how much space the value needs. Because boxes have a known size, we can enable recursive types by inserting a box in the recursive type definition.  As an example of a recursive type, let‚Äôs explore the cons list. This is a data type commonly found in functional programming languages. The cons list type we‚Äôll define is straightforward except for the recursion; therefore, the concepts in the example we‚Äôll work with will be useful any time you get into more complex situations involving recursive types.  More Information About the Cons List A cons list is a data structure that comes from the Lisp programming language and its dialects and is made up of nested pairs, and is the Lisp version of a linked list. Its name comes from the cons function (short for ‚Äúconstruct function‚Äù) in Lisp that constructs a new pair from its two arguments. By calling cons on a pair consisting of a value and another pair, we can construct cons lists made up of recursive pairs.  For example, here‚Äôs a pseudocode representation of a cons list containing the list , ,  with each pair in parentheses:  Each item in a cons list contains two elements: the value of the current item and the next item. The last item in the list contains only a value called Nil without a next item. A cons list is produced by recursively calling the cons function. The canonical name to denote the base case of the recursion is Nil. Note that this is not the same as the ‚Äúnull‚Äù or ‚Äúnil‚Äù concept in Chapter , which is an invalid or absent value.  The cons list isn‚Äôt a commonly used data structure in Rust. Most of the time when you have a list of items in Rust, Vec<T> is a better choice to use. Other, more complex recursive data types are useful in various situations, but by starting with the cons list in this chapter, we can explore how boxes let us define a recursive data type without much distraction.  Listing - contains an enum definition for a cons list. Note that this code won‚Äôt compile yet because the List type doesn‚Äôt have a known size, which we‚Äôll demonstrate.  Filename: src/main.rs  Listing -: The first attempt at defining an enum to represent a cons list data structure of i values  Note: We‚Äôre implementing a cons list that holds only i values for the purposes of this example. We could have implemented it using generics, as we discussed in Chapter , to define a cons list type that could store values of any type.  Using the List type to store the list , ,  would look like the code in Listing -:  Filename: src/main.rs  Listing -: Using the List enum to store the list , ,   The first Cons value holds  and another List value. This List value is another Cons value that holds  and another List value. This List value is one more Cons value that holds  and a List value, which is finally Nil, the non-recursive variant that signals the end of the list.  If we try to compile the code in Listing -, we get the error shown in Listing -:  Listing -: The error we get when attempting to define a recursive enum  The error shows this type ‚Äúhas infinite size.‚Äù The reason is that we‚Äôve defined List with a variant that is recursive: it holds another value of itself directly. As a result, Rust can‚Äôt figure out how much space it needs to store a List value. Let‚Äôs break down why we get this error. First, we‚Äôll look at how Rust decides how much space it needs to store a value of a non-recursive type.  Computing the Size of a Non-Recursive Type Recall the Message enum we defined in Listing - when we discussed enum definitions in Chapter :  To determine how much space to allocate for a Message value, Rust goes through each of the variants to see which variant needs the most space. Rust sees that Message::Quit doesn‚Äôt need any space, Message::Move needs enough space to store two i values, and so forth. Because only one variant will be used, the most space a Message value will need is the space it would take to store the largest of its variants.  Contrast this with what happens when Rust tries to determine how much space a recursive type like the List enum in Listing - needs. The compiler starts by looking at the Cons variant, which holds a value of type i and a value of type List. Therefore, Cons needs an amount of space equal to the size of an i plus the size of a List. To figure out how much memory the List type needs, the compiler looks at the variants, starting with the Cons variant. The Cons variant holds a value of type i and a value of type List, and this process continues infinitely, as shown in Figure -.  An infinite Cons list Figure -: An infinite List consisting of infinite Cons variants  Using Box<T> to Get a Recursive Type with a Known Size Because Rust can‚Äôt figure out how much space to allocate for recursively defined types, the compiler gives an error with this helpful suggestion:  In this suggestion, ‚Äúindirection‚Äù means that instead of storing a value directly, we should change the data structure to store the value indirectly by storing a pointer to the value instead.  Because a Box<T> is a pointer, Rust always knows how much space a Box<T> needs: a pointer‚Äôs size doesn‚Äôt change based on the amount of data it‚Äôs pointing to. This means we can put a Box<T> inside the Cons variant instead of another List value directly. The Box<T> will point to the next List value that will be on the heap rather than inside the Cons variant. Conceptually, we still have a list, created with lists holding other lists, but this implementation is now more like placing the items next to one another rather than inside one another.  We can change the definition of the List enum in Listing - and the usage of the List in Listing - to the code in Listing -, which will compile:  Filename: src/main.rs  Listing -: Definition of List that uses Box<T> in order to have a known size  The Cons variant needs the size of an i plus the space to store the box‚Äôs pointer data. The Nil variant stores no values, so it needs less space than the Cons variant. We now know that any List value will take up the size of an i plus the size of a box‚Äôs pointer data. By using a box, we‚Äôve broken the infinite, recursive chain, so the compiler can figure out the size it needs to store a List value. Figure - shows what the Cons variant looks like now.  A finite Cons list Figure -: A List that is not infinitely sized because Cons holds a Box  Boxes provide only the indirection and heap allocation; they don‚Äôt have any other special capabilities, like those we‚Äôll see with the other smart pointer types. They also don‚Äôt have the performance overhead that these special capabilities incur, so they can be useful in cases like the cons list where the indirection is the only feature we need. We‚Äôll look at more use cases for boxes in Chapter , too.  The Box<T> type is a smart pointer because it implements the Deref trait, which allows Box<T> values to be treated like references. When a Box<T> value goes out of scope, the heap data that the box is pointing to is cleaned up as well because of the Drop trait implementation. These two traits will be even more important to the functionality provided by the other smart pointer types we‚Äôll discuss in the rest of this chapter. Let‚Äôs explore these two traits in more detail.  Treating Smart Pointers Like Regular References with the Deref Trait Implementing the Deref trait allows you to customize the behavior of the dereference operator * (not to be confused with the multiplication or glob operator). By implementing Deref in such a way that a smart pointer can be treated like a regular reference, you can write code that operates on references and use that code with smart pointers too.  Let‚Äôs first look at how the dereference operator works with regular references. Then we‚Äôll try to define a custom type that behaves like Box<T>, and see why the dereference operator doesn‚Äôt work like a reference on our newly defined type. We‚Äôll explore how implementing the Deref trait makes it possible for smart pointers to work in ways similar to references. Then we‚Äôll look at Rust‚Äôs deref coercion feature and how it lets us work with either references or smart pointers.  Note: There‚Äôs one big difference between the MyBox<T> type we‚Äôre about to build and the real Box<T>: our version will not store its data on the heap. We are focusing this example on Deref, so where the data is actually stored is less important than the pointer-like behavior.   Following the Pointer to the Value A regular reference is a type of pointer, and one way to think of a pointer is as an arrow to a value stored somewhere else. In Listing -, we create a reference to an i value and then use the dereference operator to follow the reference to the value:  Filename: src/main.rs  Listing -: Using the dereference operator to follow a reference to an i value  The variable x holds an i value . We set y equal to a reference to x. We can assert that x is equal to . However, if we want to make an assertion about the value in y, we have to use *y to follow the reference to the value it‚Äôs pointing to (hence dereference) so the compiler can compare the actual value. Once we dereference y, we have access to the integer value y is pointing to that we can compare with .  If we tried to write assert_eq!(, y); instead, we would get this compilation error:  Comparing a number and a reference to a number isn‚Äôt allowed because they‚Äôre different types. We must use the dereference operator to follow the reference to the value it‚Äôs pointing to.  Using Box<T> Like a Reference We can rewrite the code in Listing - to use a Box<T> instead of a reference; the dereference operator used on the Box<T> in Listing - functions in the same way as the dereference operator used on the reference in Listing -:  Filename: src/main.rs  Listing -: Using the dereference operator on a Box<i>  The main difference between Listing - and Listing - is that here we set y to be an instance of a Box<T> pointing to a copied value of x rather than a reference pointing to the value of x. In the last assertion, we can use the dereference operator to follow the pointer of the Box<T> in the same way that we did when y was a reference. Next, we‚Äôll explore what is special about Box<T> that enables us to use the dereference operator by defining our own type.  Defining Our Own Smart Pointer Let‚Äôs build a smart pointer similar to the Box<T> type provided by the standard library to experience how smart pointers behave differently from references by default. Then we‚Äôll look at how to add the ability to use the dereference operator.  The Box<T> type is ultimately defined as a tuple struct with one element, so Listing - defines a MyBox<T> type in the same way. We‚Äôll also define a new function to match the new function defined on Box<T>.  Filename: src/main.rs  Listing -: Defining a MyBox<T> type  We define a struct named MyBox and declare a generic parameter T, because we want our type to hold values of any type. The MyBox type is a tuple struct with one element of type T. The MyBox::new function takes one parameter of type T and returns a MyBox instance that holds the value passed in.  Let‚Äôs try adding the main function in Listing - to Listing - and changing it to use the MyBox<T> type we‚Äôve defined instead of Box<T>. The code in Listing - won‚Äôt compile because Rust doesn‚Äôt know how to dereference MyBox.  Filename: src/main.rs  Listing -: Attempting to use MyBox<T> in the same way we used references and Box<T>  Here‚Äôs the resulting compilation error:  Our MyBox<T> type can‚Äôt be dereferenced because we haven‚Äôt implemented that ability on our type. To enable dereferencing with the * operator, we implement the Deref trait.  Treating a Type Like a Reference by Implementing the Deref Trait As discussed in the ‚ÄúImplementing a Trait on a Type‚Äù section of Chapter , to implement a trait, we need to provide implementations for the trait‚Äôs required methods. The Deref trait, provided by the standard library, requires us to implement one method named deref that borrows self and returns a reference to the inner data. Listing - contains an implementation of Deref to add to the definition of MyBox:  Filename: src/main.rs  Listing -: Implementing Deref on MyBox<T>  The type Target = T; syntax defines an associated type for the Deref trait to use. Associated types are a slightly different way of declaring a generic parameter, but you don‚Äôt need to worry about them for now; we‚Äôll cover them in more detail in Chapter .  We fill in the body of the deref method with &self. so deref returns a reference to the value we want to access with the * operator; recall from the ‚ÄúUsing Tuple Structs without Named Fields to Create Different Types‚Äù section of Chapter  that . accesses the first value in a tuple struct. The main function in Listing - that calls * on the MyBox<T> value now compiles, and the assertions pass!  Without the Deref trait, the compiler can only dereference & references. The deref method gives the compiler the ability to take a value of any type that implements Deref and call the deref method to get a & reference that it knows how to dereference.  When we entered *y in Listing -, behind the scenes Rust actually ran this code:  Rust substitutes the * operator with a call to the deref method and then a plain dereference so we don‚Äôt have to think about whether or not we need to call the deref method. This Rust feature lets us write code that functions identically whether we have a regular reference or a type that implements Deref.  The reason the deref method returns a reference to a value, and that the plain dereference outside the parentheses in *(y.deref()) is still necessary, is to do with the ownership system. If the deref method returned the value directly instead of a reference to the value, the value would be moved out of self. We don‚Äôt want to take ownership of the inner value inside MyBox<T> in this case or in most cases where we use the dereference operator.  Note that the * operator is replaced with a call to the deref method and then a call to the * operator just once, each time we use a * in our code. Because the substitution of the * operator does not recurse infinitely, we end up with data of type i, which matches the  in assert_eq! in Listing -.  Implicit Deref Coercions with Functions and Methods Deref coercion converts a reference to a type that implements the Deref trait into a reference to another type. For example, deref coercion can convert &String to &str because String implements the Deref trait such that it returns &str. Deref coercion is a convenience Rust performs on arguments to functions and methods, and works only on types that implement the Deref trait. It happens automatically when we pass a reference to a particular type‚Äôs value as an argument to a function or method that doesn‚Äôt match the parameter type in the function or method definition. A sequence of calls to the deref method converts the type we provided into the type the parameter needs.  Deref coercion was added to Rust so that programmers writing function and method calls don‚Äôt need to add as many explicit references and dereferences with & and *. The deref coercion feature also lets us write more code that can work for either references or smart pointers.  To see deref coercion in action, let‚Äôs use the MyBox<T> type we defined in Listing - as well as the implementation of Deref that we added in Listing -. Listing - shows the definition of a function that has a string slice parameter:  Filename: src/main.rs  Listing -: A hello function that has the parameter name of type &str  We can call the hello function with a string slice as an argument, such as hello("Rust"); for example. Deref coercion makes it possible to call hello with a reference to a value of type MyBox<String>, as shown in Listing -:  Filename: src/main.rs  Listing -: Calling hello with a reference to a MyBox<String> value, which works because of deref coercion  Here we‚Äôre calling the hello function with the argument &m, which is a reference to a MyBox<String> value. Because we implemented the Deref trait on MyBox<T> in Listing -, Rust can turn &MyBox<String> into &String by calling deref. The standard library provides an implementation of Deref on String that returns a string slice, and this is in the API documentation for Deref. Rust calls deref again to turn the &String into &str, which matches the hello function‚Äôs definition.  If Rust didn‚Äôt implement deref coercion, we would have to write the code in Listing - instead of the code in Listing - to call hello with a value of type &MyBox<String>.  Filename: src/main.rs  Listing -: The code we would have to write if Rust didn‚Äôt have deref coercion  The (*m) dereferences the MyBox<String> into a String. Then the & and [..] take a string slice of the String that is equal to the whole string to match the signature of hello. This code without deref coercions is harder to read, write, and understand with all of these symbols involved. Deref coercion allows Rust to handle these conversions for us automatically.  When the Deref trait is defined for the types involved, Rust will analyze the types and use Deref::deref as many times as necessary to get a reference to match the parameter‚Äôs type. The number of times that Deref::deref needs to be inserted is resolved at compile time, so there is no runtime penalty for taking advantage of deref coercion!  How Deref Coercion Interacts with Mutability Similar to how you use the Deref trait to override the * operator on immutable references, you can use the DerefMut trait to override the * operator on mutable references.  Rust does deref coercion when it finds types and trait implementations in three cases:  From &T to &U when T: Deref<Target=U> From &mut T to &mut U when T: DerefMut<Target=U> From &mut T to &U when T: Deref<Target=U> The first two cases are the same as each other except that the second implements mutability. The first case states that if you have a &T, and T implements Deref to some type U, you can get a &U transparently. The second case states that the same deref coercion happens for mutable references.  The third case is trickier: Rust will also coerce a mutable reference to an immutable one. But the reverse is not possible: immutable references will never coerce to mutable references. Because of the borrowing rules, if you have a mutable reference, that mutable reference must be the only reference to that data (otherwise, the program wouldn‚Äôt compile). Converting one mutable reference to one immutable reference will never break the borrowing rules. Converting an immutable reference to a mutable reference would require that the initial immutable reference is the only immutable reference to that data, but the borrowing rules don‚Äôt guarantee that. Therefore, Rust can‚Äôt make the assumption that converting an immutable reference to a mutable reference is possible.  Running Code on Cleanup with the Drop Trait The second trait important to the smart pointer pattern is Drop, which lets you customize what happens when a value is about to go out of scope. You can provide an implementation for the Drop trait on any type, and that code can be used to release resources like files or network connections.  We‚Äôre introducing Drop in the context of smart pointers because the functionality of the Drop trait is almost always used when implementing a smart pointer. For example, when a Box<T> is dropped it will deallocate the space on the heap that the box points to.  In some languages, for some types, the programmer must call code to free memory or resources every time they finish using an instance of those types. Examples include file handles, sockets, or locks. If they forget, the system might become overloaded and crash. In Rust, you can specify that a particular bit of code be run whenever a value goes out of scope, and the compiler will insert this code automatically. As a result, you don‚Äôt need to be careful about placing cleanup code everywhere in a program that an instance of a particular type is finished with‚Äîyou still won‚Äôt leak resources!  You specify the code to run when a value goes out of scope by implementing the Drop trait. The Drop trait requires you to implement one method named drop that takes a mutable reference to self. To see when Rust calls drop, let‚Äôs implement drop with println! statements for now.  Listing - shows a CustomSmartPointer struct whose only custom functionality is that it will print Dropping CustomSmartPointer! when the instance goes out of scope, to show when Rust runs the drop function.  Filename: src/main.rs  Listing -: A CustomSmartPointer struct that implements the Drop trait where we would put our cleanup code  The Drop trait is included in the prelude, so we don‚Äôt need to bring it into scope. We implement the Drop trait on CustomSmartPointer and provide an implementation for the drop method that calls println!. The body of the drop function is where you would place any logic that you wanted to run when an instance of your type goes out of scope. We‚Äôre printing some text here to demonstrate visually when Rust will call drop.  In main, we create two instances of CustomSmartPointer and then print CustomSmartPointers created. At the end of main, our instances of CustomSmartPointer will go out of scope, and Rust will call the code we put in the drop method, printing our final message. Note that we didn‚Äôt need to call the drop method explicitly.  When we run this program, we‚Äôll see the following output:  Rust automatically called drop for us when our instances went out of scope, calling the code we specified. Variables are dropped in the reverse order of their creation, so d was dropped before c. This example‚Äôs purpose is to give you a visual guide to how the drop method works; usually you would specify the cleanup code that your type needs to run rather than a print message.  Dropping a Value Early with std::mem::drop Unfortunately, it‚Äôs not straightforward to disable the automatic drop functionality. Disabling drop isn‚Äôt usually necessary; the whole point of the Drop trait is that it‚Äôs taken care of automatically. Occasionally, however, you might want to clean up a value early. One example is when using smart pointers that manage locks: you might want to force the drop method that releases the lock so that other code in the same scope can acquire the lock. Rust doesn‚Äôt let you call the Drop trait‚Äôs drop method manually; instead you have to call the std::mem::drop function provided by the standard library if you want to force a value to be dropped before the end of its scope.  If we try to call the Drop trait‚Äôs drop method manually by modifying the main function from Listing -, as shown in Listing -, we‚Äôll get a compiler error:  Filename: src/main.rs  Listing -: Attempting to call the drop method from the Drop trait manually to clean up early  When we try to compile this code, we‚Äôll get this error:  This error message states that we‚Äôre not allowed to explicitly call drop. The error message uses the term destructor, which is the general programming term for a function that cleans up an instance. A destructor is analogous to a constructor, which creates an instance. The drop function in Rust is one particular destructor.  Rust doesn‚Äôt let us call drop explicitly because Rust would still automatically call drop on the value at the end of main. This would cause a double free error because Rust would be trying to clean up the same value twice.  We can‚Äôt disable the automatic insertion of drop when a value goes out of scope, and we can‚Äôt call the drop method explicitly. So, if we need to force a value to be cleaned up early, we use the std::mem::drop function.  The std::mem::drop function is different from the drop method in the Drop trait. We call it by passing as an argument the value we want to force drop. The function is in the prelude, so we can modify main in Listing - to call the drop function, as shown in Listing -:  Filename: src/main.rs  Listing -: Calling std::mem::drop to explicitly drop a value before it goes out of scope  Running this code will print the following:  The text Dropping CustomSmartPointer with data `some data`! is printed between the CustomSmartPointer created. and CustomSmartPointer dropped before the end of main. text, showing that the drop method code is called to drop c at that point.  You can use code specified in a Drop trait implementation in many ways to make cleanup convenient and safe: for instance, you could use it to create your own memory allocator! With the Drop trait and Rust‚Äôs ownership system, you don‚Äôt have to remember to clean up because Rust does it automatically.  You also don‚Äôt have to worry about problems resulting from accidentally cleaning up values still in use: the ownership system that makes sure references are always valid also ensures that drop gets called only once when the value is no longer being used.  Now that we‚Äôve examined Box<T> and some of the characteristics of smart pointers, let‚Äôs look at a few other smart pointers defined in the standard library.  Rc<T>, the Reference Counted Smart Pointer In the majority of cases, ownership is clear: you know exactly which variable owns a given value. However, there are cases when a single value might have multiple owners. For example, in graph data structures, multiple edges might point to the same node, and that node is conceptually owned by all of the edges that point to it. A node shouldn‚Äôt be cleaned up unless it doesn‚Äôt have any edges pointing to it and so has no owners.  You have to enable multiple ownership explicitly by using the Rust type Rc<T>, which is an abbreviation for reference counting. The Rc<T> type keeps track of the number of references to a value to determine whether or not the value is still in use. If there are zero references to a value, the value can be cleaned up without any references becoming invalid.  Imagine Rc<T> as a TV in a family room. When one person enters to watch TV, they turn it on. Others can come into the room and watch the TV. When the last person leaves the room, they turn off the TV because it‚Äôs no longer being used. If someone turns off the TV while others are still watching it, there would be uproar from the remaining TV watchers!  We use the Rc<T> type when we want to allocate some data on the heap for multiple parts of our program to read and we can‚Äôt determine at compile time which part will finish using the data last. If we knew which part would finish last, we could just make that part the data‚Äôs owner, and the normal ownership rules enforced at compile time would take effect.  Note that Rc<T> is only for use in single-threaded scenarios. When we discuss concurrency in Chapter , we‚Äôll cover how to do reference counting in multithreaded programs.  Using Rc<T> to Share Data Let‚Äôs return to our cons list example in Listing -. Recall that we defined it using Box<T>. This time, we‚Äôll create two lists that both share ownership of a third list. Conceptually, this looks similar to Figure -:  Two lists that share ownership of a third list Figure -: Two lists, b and c, sharing ownership of a third list, a  We‚Äôll create list a that contains  and then . Then we‚Äôll make two more lists: b that starts with  and c that starts with . Both b and c lists will then continue on to the first a list containing  and . In other words, both lists will share the first list containing  and .  Trying to implement this scenario using our definition of List with Box<T> won‚Äôt work, as shown in Listing -:  Filename: src/main.rs  Listing -: Demonstrating we‚Äôre not allowed to have two lists using Box<T> that try to share ownership of a third list  When we compile this code, we get this error:  The Cons variants own the data they hold, so when we create the b list, a is moved into b and b owns a. Then, when we try to use a again when creating c, we‚Äôre not allowed to because a has been moved.  We could change the definition of Cons to hold references instead, but then we would have to specify lifetime parameters. By specifying lifetime parameters, we would be specifying that every element in the list will live at least as long as the entire list. This is the case for the elements and lists in Listing -, but not in every scenario.  Instead, we‚Äôll change our definition of List to use Rc<T> in place of Box<T>, as shown in Listing -. Each Cons variant will now hold a value and an Rc<T> pointing to a List. When we create b, instead of taking ownership of a, we‚Äôll clone the Rc<List> that a is holding, thereby increasing the number of references from one to two and letting a and b share ownership of the data in that Rc<List>. We‚Äôll also clone a when creating c, increasing the number of references from two to three. Every time we call Rc::clone, the reference count to the data within the Rc<List> will increase, and the data won‚Äôt be cleaned up unless there are zero references to it.  Filename: src/main.rs  Listing -: A definition of List that uses Rc<T>  We need to add a use statement to bring Rc<T> into scope because it‚Äôs not in the prelude. In main, we create the list holding  and  and store it in a new Rc<List> in a. Then when we create b and c, we call the Rc::clone function and pass a reference to the Rc<List> in a as an argument.  We could have called a.clone() rather than Rc::clone(&a), but Rust‚Äôs convention is to use Rc::clone in this case. The implementation of Rc::clone doesn‚Äôt make a deep copy of all the data like most types‚Äô implementations of clone do. The call to Rc::clone only increments the reference count, which doesn‚Äôt take much time. Deep copies of data can take a lot of time. By using Rc::clone for reference counting, we can visually distinguish between the deep-copy kinds of clones and the kinds of clones that increase the reference count. When looking for performance problems in the code, we only need to consider the deep-copy clones and can disregard calls to Rc::clone.  Cloning an Rc<T> Increases the Reference Count Let‚Äôs change our working example in Listing - so we can see the reference counts changing as we create and drop references to the Rc<List> in a.  In Listing -, we‚Äôll change main so it has an inner scope around list c; then we can see how the reference count changes when c goes out of scope.  Filename: src/main.rs  Listing -: Printing the reference count  At each point in the program where the reference count changes, we print the reference count, which we get by calling the Rc::strong_count function. This function is named strong_count rather than count because the Rc<T> type also has a weak_count; we‚Äôll see what weak_count is used for in the ‚ÄúPreventing Reference Cycles: Turning an Rc<T> into a Weak<T>‚Äù section.  This code prints the following:  We can see that the Rc<List> in a has an initial reference count of ; then each time we call clone, the count goes up by . When c goes out of scope, the count goes down by . We don‚Äôt have to call a function to decrease the reference count like we have to call Rc::clone to increase the reference count: the implementation of the Drop trait decreases the reference count automatically when an Rc<T> value goes out of scope.  What we can‚Äôt see in this example is that when b and then a go out of scope at the end of main, the count is then , and the Rc<List> is cleaned up completely. Using Rc<T> allows a single value to have multiple owners, and the count ensures that the value remains valid as long as any of the owners still exist.  Via immutable references, Rc<T> allows you to share data between multiple parts of your program for reading only. If Rc<T> allowed you to have multiple mutable references too, you might violate one of the borrowing rules discussed in Chapter : multiple mutable borrows to the same place can cause data races and inconsistencies. But being able to mutate data is very useful! In the next section, we‚Äôll discuss the interior mutability pattern and the RefCell<T> type that you can use in conjunction with an Rc<T> to work with this immutability restriction.  RefCell<T> and the Interior Mutability Pattern Interior mutability is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses unsafe code inside a data structure to bend Rust‚Äôs usual rules that govern mutation and borrowing. Unsafe code indicates to the compiler that we‚Äôre checking the rules manually instead of relying on the compiler to check them for us; we will discuss unsafe code more in Chapter .  We can use types that use the interior mutability pattern only when we can ensure that the borrowing rules will be followed at runtime, even though the compiler can‚Äôt guarantee that. The unsafe code involved is then wrapped in a safe API, and the outer type is still immutable.  Let‚Äôs explore this concept by looking at the RefCell<T> type that follows the interior mutability pattern.  Enforcing Borrowing Rules at Runtime with RefCell<T> Unlike Rc<T>, the RefCell<T> type represents single ownership over the data it holds. So, what makes RefCell<T> different from a type like Box<T>? Recall the borrowing rules you learned in Chapter :  At any given time, you can have either (but not both) one mutable reference or any number of immutable references. References must always be valid. With references and Box<T>, the borrowing rules‚Äô invariants are enforced at compile time. With RefCell<T>, these invariants are enforced at runtime. With references, if you break these rules, you‚Äôll get a compiler error. With RefCell<T>, if you break these rules, your program will panic and exit.  The advantages of checking the borrowing rules at compile time are that errors will be caught sooner in the development process, and there is no impact on runtime performance because all the analysis is completed beforehand. For those reasons, checking the borrowing rules at compile time is the best choice in the majority of cases, which is why this is Rust‚Äôs default.  The advantage of checking the borrowing rules at runtime instead is that certain memory-safe scenarios are then allowed, where they would‚Äôve been disallowed by the compile-time checks. Static analysis, like the Rust compiler, is inherently conservative. Some properties of code are impossible to detect by analyzing the code: the most famous example is the Halting Problem, which is beyond the scope of this book but is an interesting topic to research.  Because some analysis is impossible, if the Rust compiler can‚Äôt be sure the code complies with the ownership rules, it might reject a correct program; in this way, it‚Äôs conservative. If Rust accepted an incorrect program, users wouldn‚Äôt be able to trust in the guarantees Rust makes. However, if Rust rejects a correct program, the programmer will be inconvenienced, but nothing catastrophic can occur. The RefCell<T> type is useful when you‚Äôre sure your code follows the borrowing rules but the compiler is unable to understand and guarantee that.  Similar to Rc<T>, RefCell<T> is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. We‚Äôll talk about how to get the functionality of RefCell<T> in a multithreaded program in Chapter .  Here is a recap of the reasons to choose Box<T>, Rc<T>, or RefCell<T>:  Rc<T> enables multiple owners of the same data; Box<T> and RefCell<T> have single owners. Box<T> allows immutable or mutable borrows checked at compile time; Rc<T> allows only immutable borrows checked at compile time; RefCell<T> allows immutable or mutable borrows checked at runtime. Because RefCell<T> allows mutable borrows checked at runtime, you can mutate the value inside the RefCell<T> even when the RefCell<T> is immutable. Mutating the value inside an immutable value is the interior mutability pattern. Let‚Äôs look at a situation in which interior mutability is useful and examine how it‚Äôs possible.  Interior Mutability: A Mutable Borrow to an Immutable Value A consequence of the borrowing rules is that when you have an immutable value, you can‚Äôt borrow it mutably. For example, this code won‚Äôt compile:  If you tried to compile this code, you‚Äôd get the following error:  However, there are situations in which it would be useful for a value to mutate itself in its methods but appear immutable to other code. Code outside the value‚Äôs methods would not be able to mutate the value. Using RefCell<T> is one way to get the ability to have interior mutability, but RefCell<T> doesn‚Äôt get around the borrowing rules completely: the borrow checker in the compiler allows this interior mutability, and the borrowing rules are checked at runtime instead. If you violate the rules, you‚Äôll get a panic! instead of a compiler error.  Let‚Äôs work through a practical example where we can use RefCell<T> to mutate an immutable value and see why that is useful.  A Use Case for Interior Mutability: Mock Objects Sometimes during testing a programmer will use a type in place of another type, in order to observe particular behavior and assert it‚Äôs implemented correctly. This placeholder type is called a test double. Think of it in the sense of a ‚Äústunt double‚Äù in filmmaking, where a person steps in and substitutes for an actor to do a particular tricky scene. Test doubles stand in for other types when we‚Äôre running tests. Mock objects are specific types of test doubles that record what happens during a test so you can assert that the correct actions took place.  Rust doesn‚Äôt have objects in the same sense as other languages have objects, and Rust doesn‚Äôt have mock object functionality built into the standard library as some other languages do. However, you can definitely create a struct that will serve the same purposes as a mock object.  Here‚Äôs the scenario we‚Äôll test: we‚Äôll create a library that tracks a value against a maximum value and sends messages based on how close to the maximum value the current value is. This library could be used to keep track of a user‚Äôs quota for the number of API calls they‚Äôre allowed to make, for example.  Our library will only provide the functionality of tracking how close to the maximum a value is and what the messages should be at what times. Applications that use our library will be expected to provide the mechanism for sending the messages: the application could put a message in the application, send an email, send a text message, or something else. The library doesn‚Äôt need to know that detail. All it needs is something that implements a trait we‚Äôll provide called Messenger. Listing - shows the library code:  Filename: src/lib.rs  Listing -: A library to keep track of how close a value is to a maximum value and warn when the value is at certain levels  One important part of this code is that the Messenger trait has one method called send that takes an immutable reference to self and the text of the message. This trait is the interface our mock object needs to implement so that the mock can be used in the same way a real object is. The other important part is that we want to test the behavior of the set_value method on the LimitTracker. We can change what we pass in for the value parameter, but set_value doesn‚Äôt return anything for us to make assertions on. We want to be able to say that if we create a LimitTracker with something that implements the Messenger trait and a particular value for max, when we pass different numbers for value, the messenger is told to send the appropriate messages.  We need a mock object that, instead of sending an email or text message when we call send, will only keep track of the messages it‚Äôs told to send. We can create a new instance of the mock object, create a LimitTracker that uses the mock object, call the set_value method on LimitTracker, and then check that the mock object has the messages we expect. Listing - shows an attempt to implement a mock object to do just that, but the borrow checker won‚Äôt allow it:  Filename: src/lib.rs  Listing -: An attempt to implement a MockMessenger that isn‚Äôt allowed by the borrow checker  This test code defines a MockMessenger struct that has a sent_messages field with a Vec of String values to keep track of the messages it‚Äôs told to send. We also define an associated function new to make it convenient to create new MockMessenger values that start with an empty list of messages. We then implement the Messenger trait for MockMessenger so we can give a MockMessenger to a LimitTracker. In the definition of the send method, we take the message passed in as a parameter and store it in the MockMessenger list of sent_messages.  In the test, we‚Äôre testing what happens when the LimitTracker is told to set value to something that is more than  percent of the max value. First, we create a new MockMessenger, which will start with an empty list of messages. Then we create a new LimitTracker and give it a reference to the new MockMessenger and a max value of . We call the set_value method on the LimitTracker with a value of , which is more than  percent of . Then we assert that the list of messages that the MockMessenger is keeping track of should now have one message in it.  However, there‚Äôs one problem with this test, as shown here:  We can‚Äôt modify the MockMessenger to keep track of the messages, because the send method takes an immutable reference to self. We also can‚Äôt take the suggestion from the error text to use &mut self instead, because then the signature of send wouldn‚Äôt match the signature in the Messenger trait definition (feel free to try and see what error message you get).  This is a situation in which interior mutability can help! We‚Äôll store the sent_messages within a RefCell<T>, and then the send method will be able to modify sent_messages to store the messages we‚Äôve seen. Listing - shows what that looks like:  Filename: src/lib.rs  Listing -: Using RefCell<T> to mutate an inner value while the outer value is considered immutable  The sent_messages field is now of type RefCell<Vec<String>> instead of Vec<String>. In the new function, we create a new RefCell<Vec<String>> instance around the empty vector.  For the implementation of the send method, the first parameter is still an immutable borrow of self, which matches the trait definition. We call borrow_mut on the RefCell<Vec<String>> in self.sent_messages to get a mutable reference to the value inside the RefCell<Vec<String>>, which is the vector. Then we can call push on the mutable reference to the vector to keep track of the messages sent during the test.  The last change we have to make is in the assertion: to see how many items are in the inner vector, we call borrow on the RefCell<Vec<String>> to get an immutable reference to the vector.  Now that you‚Äôve seen how to use RefCell<T>, let‚Äôs dig into how it works!  Keeping Track of Borrows at Runtime with RefCell<T> When creating immutable and mutable references, we use the & and &mut syntax, respectively. With RefCell<T>, we use the borrow and borrow_mut methods, which are part of the safe API that belongs to RefCell<T>. The borrow method returns the smart pointer type Ref<T>, and borrow_mut returns the smart pointer type RefMut<T>. Both types implement Deref, so we can treat them like regular references.  The RefCell<T> keeps track of how many Ref<T> and RefMut<T> smart pointers are currently active. Every time we call borrow, the RefCell<T> increases its count of how many immutable borrows are active. When a Ref<T> value goes out of scope, the count of immutable borrows goes down by one. Just like the compile-time borrowing rules, RefCell<T> lets us have many immutable borrows or one mutable borrow at any point in time.  If we try to violate these rules, rather than getting a compiler error as we would with references, the implementation of RefCell<T> will panic at runtime. Listing - shows a modification of the implementation of send in Listing -. We‚Äôre deliberately trying to create two mutable borrows active for the same scope to illustrate that RefCell<T> prevents us from doing this at runtime.  Filename: src/lib.rs  Listing -: Creating two mutable references in the same scope to see that RefCell<T> will panic  We create a variable one_borrow for the RefMut<T> smart pointer returned from borrow_mut. Then we create another mutable borrow in the same way in the variable two_borrow. This makes two mutable references in the same scope, which isn‚Äôt allowed. When we run the tests for our library, the code in Listing - will compile without any errors, but the test will fail:  Notice that the code panicked with the message already borrowed: BorrowMutError. This is how RefCell<T> handles violations of the borrowing rules at runtime.  Choosing to catch borrowing errors at runtime rather than compile time, as we‚Äôve done here, means you‚Äôd potentially be finding mistakes in your code later in the development process: possibly not until your code was deployed to production. Also, your code would incur a small runtime performance penalty as a result of keeping track of the borrows at runtime rather than compile time. However, using RefCell<T> makes it possible to write a mock object that can modify itself to keep track of the messages it has seen while you‚Äôre using it in a context where only immutable values are allowed. You can use RefCell<T> despite its trade-offs to get more functionality than regular references provide.  Having Multiple Owners of Mutable Data by Combining Rc<T> and RefCell<T> A common way to use RefCell<T> is in combination with Rc<T>. Recall that Rc<T> lets you have multiple owners of some data, but it only gives immutable access to that data. If you have an Rc<T> that holds a RefCell<T>, you can get a value that can have multiple owners and that you can mutate!  For example, recall the cons list example in Listing - where we used Rc<T> to allow multiple lists to share ownership of another list. Because Rc<T> holds only immutable values, we can‚Äôt change any of the values in the list once we‚Äôve created them. Let‚Äôs add in RefCell<T> to gain the ability to change the values in the lists. Listing - shows that by using a RefCell<T> in the Cons definition, we can modify the value stored in all the lists:  Filename: src/main.rs  Listing -: Using Rc<RefCell<i>> to create a List that we can mutate  We create a value that is an instance of Rc<RefCell<i>> and store it in a variable named value so we can access it directly later. Then we create a List in a with a Cons variant that holds value. We need to clone value so both a and value have ownership of the inner  value rather than transferring ownership from value to a or having a borrow from value.  We wrap the list a in an Rc<T> so when we create lists b and c, they can both refer to a, which is what we did in Listing -.  After we‚Äôve created the lists in a, b, and c, we want to add  to the value in value. We do this by calling borrow_mut on value, which uses the automatic dereferencing feature we discussed in Chapter  (see the section ‚ÄúWhere‚Äôs the -> Operator?‚Äù) to dereference the Rc<T> to the inner RefCell<T> value. The borrow_mut method returns a RefMut<T> smart pointer, and we use the dereference operator on it and change the inner value.  When we print a, b, and c, we can see that they all have the modified value of  rather than :  This technique is pretty neat! By using RefCell<T>, we have an outwardly immutable List value. But we can use the methods on RefCell<T> that provide access to its interior mutability so we can modify our data when we need to. The runtime checks of the borrowing rules protect us from data races, and it‚Äôs sometimes worth trading a bit of speed for this flexibility in our data structures. Note that RefCell<T> does not work for multithreaded code! Mutex<T> is the thread-safe version of RefCell<T> and we‚Äôll discuss Mutex<T> in Chapter .  Reference Cycles Can Leak Memory Rust‚Äôs memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a memory leak). Preventing memory leaks entirely is not one of Rust‚Äôs guarantees, meaning memory leaks are memory safe in Rust. We can see that Rust allows memory leaks by using Rc<T> and RefCell<T>: it‚Äôs possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach , and the values will never be dropped.  Creating a Reference Cycle Let‚Äôs look at how a reference cycle might happen and how to prevent it, starting with the definition of the List enum and a tail method in Listing -:  Filename: src/main.rs  Listing -: A cons list definition that holds a RefCell<T> so we can modify what a Cons variant is referring to  We‚Äôre using another variation of the List definition from Listing -. The second element in the Cons variant is now RefCell<Rc<List>>, meaning that instead of having the ability to modify the i value as we did in Listing -, we want to modify the List value a Cons variant is pointing to. We‚Äôre also adding a tail method to make it convenient for us to access the second item if we have a Cons variant.  In Listing -, we‚Äôre adding a main function that uses the definitions in Listing -. This code creates a list in a and a list in b that points to the list in a. Then it modifies the list in a to point to b, creating a reference cycle. There are println! statements along the way to show what the reference counts are at various points in this process.  Filename: src/main.rs  Listing -: Creating a reference cycle of two List values pointing to each other  We create an Rc<List> instance holding a List value in the variable a with an initial list of , Nil. We then create an Rc<List> instance holding another List value in the variable b that contains the value  and points to the list in a.  We modify a so it points to b instead of Nil, creating a cycle. We do that by using the tail method to get a reference to the RefCell<Rc<List>> in a, which we put in the variable link. Then we use the borrow_mut method on the RefCell<Rc<List>> to change the value inside from an Rc<List> that holds a Nil value to the Rc<List> in b.  When we run this code, keeping the last println! commented out for the moment, we‚Äôll get this output:  The reference count of the Rc<List> instances in both a and b are  after we change the list in a to point to b. At the end of main, Rust drops the variable b, which decreases the reference count of the b Rc<List> instance from  to . The memory that Rc<List> has on the heap won‚Äôt be dropped at this point, because its reference count is , not . Then Rust drops a, which decreases the reference count of the a Rc<List> instance from  to  as well. This instance‚Äôs memory can‚Äôt be dropped either, because the other Rc<List> instance still refers to it. The memory allocated to the list will remain uncollected forever. To visualize this reference cycle, we‚Äôve created a diagram in Figure -.  Reference cycle of lists Figure -: A reference cycle of lists a and b pointing to each other  If you uncomment the last println! and run the program, Rust will try to print this cycle with a pointing to b pointing to a and so forth until it overflows the stack.  Compared to a real-world program, the consequences of creating a reference cycle in this example aren‚Äôt very dire: right after we create the reference cycle, the program ends. However, if a more complex program allocated lots of memory in a cycle and held onto it for a long time, the program would use more memory than it needed and might overwhelm the system, causing it to run out of available memory.  Creating reference cycles is not easily done, but it‚Äôs not impossible either. If you have RefCell<T> values that contain Rc<T> values or similar nested combinations of types with interior mutability and reference counting, you must ensure that you don‚Äôt create cycles; you can‚Äôt rely on Rust to catch them. Creating a reference cycle would be a logic bug in your program that you should use automated tests, code reviews, and other software development practices to minimize.  Another solution for avoiding reference cycles is reorganizing your data structures so that some references express ownership and some references don‚Äôt. As a result, you can have cycles made up of some ownership relationships and some non-ownership relationships, and only the ownership relationships affect whether or not a value can be dropped. In Listing -, we always want Cons variants to own their list, so reorganizing the data structure isn‚Äôt possible. Let‚Äôs look at an example using graphs made up of parent nodes and child nodes to see when non-ownership relationships are an appropriate way to prevent reference cycles.  Preventing Reference Cycles: Turning an Rc<T> into a Weak<T> So far, we‚Äôve demonstrated that calling Rc::clone increases the strong_count of an Rc<T> instance, and an Rc<T> instance is only cleaned up if its strong_count is . You can also create a weak reference to the value within an Rc<T> instance by calling Rc::downgrade and passing a reference to the Rc<T>. Strong references are how you can share ownership of an Rc<T> instance. Weak references don‚Äôt express an ownership relationship, and their count doesn‚Äôt affect when an Rc<T> instance is cleaned up. They won‚Äôt cause a reference cycle because any cycle involving some weak references will be broken once the strong reference count of values involved is .  When you call Rc::downgrade, you get a smart pointer of type Weak<T>. Instead of increasing the strong_count in the Rc<T> instance by , calling Rc::downgrade increases the weak_count by . The Rc<T> type uses weak_count to keep track of how many Weak<T> references exist, similar to strong_count. The difference is the weak_count doesn‚Äôt need to be  for the Rc<T> instance to be cleaned up.  Because the value that Weak<T> references might have been dropped, to do anything with the value that a Weak<T> is pointing to, you must make sure the value still exists. Do this by calling the upgrade method on a Weak<T> instance, which will return an Option<Rc<T>>. You‚Äôll get a result of Some if the Rc<T> value has not been dropped yet and a result of None if the Rc<T> value has been dropped. Because upgrade returns an Option<Rc<T>>, Rust will ensure that the Some case and the None case are handled, and there won‚Äôt be an invalid pointer.  As an example, rather than using a list whose items know only about the next item, we‚Äôll create a tree whose items know about their children items and their parent items.  Creating a Tree Data Structure: a Node with Child Nodes To start, we‚Äôll build a tree with nodes that know about their child nodes. We‚Äôll create a struct named Node that holds its own i value as well as references to its children Node values:  Filename: src/main.rs  We want a Node to own its children, and we want to share that ownership with variables so we can access each Node in the tree directly. To do this, we define the Vec<T> items to be values of type Rc<Node>. We also want to modify which nodes are children of another node, so we have a RefCell<T> in children around the Vec<Rc<Node>>.  Next, we‚Äôll use our struct definition and create one Node instance named leaf with the value  and no children, and another instance named branch with the value  and leaf as one of its children, as shown in Listing -:  Filename: src/main.rs  Listing -: Creating a leaf node with no children and a branch node with leaf as one of its children  We clone the Rc<Node> in leaf and store that in branch, meaning the Node in leaf now has two owners: leaf and branch. We can get from branch to leaf through branch.children, but there‚Äôs no way to get from leaf to branch. The reason is that leaf has no reference to branch and doesn‚Äôt know they‚Äôre related. We want leaf to know that branch is its parent. We‚Äôll do that next.  Adding a Reference from a Child to Its Parent To make the child node aware of its parent, we need to add a parent field to our Node struct definition. The trouble is in deciding what the type of parent should be. We know it can‚Äôt contain an Rc<T>, because that would create a reference cycle with leaf.parent pointing to branch and branch.children pointing to leaf, which would cause their strong_count values to never be .  Thinking about the relationships another way, a parent node should own its children: if a parent node is dropped, its child nodes should be dropped as well. However, a child should not own its parent: if we drop a child node, the parent should still exist. This is a case for weak references!  So instead of Rc<T>, we‚Äôll make the type of parent use Weak<T>, specifically a RefCell<Weak<Node>>. Now our Node struct definition looks like this:  Filename: src/main.rs  A node will be able to refer to its parent node but doesn‚Äôt own its parent. In Listing -, we update main to use this new definition so the leaf node will have a way to refer to its parent, branch:  Filename: src/main.rs  Listing -: A leaf node with a weak reference to its parent node branch  Creating the leaf node looks similar to Listing - with the exception of the parent field: leaf starts out without a parent, so we create a new, empty Weak<Node> reference instance.  At this point, when we try to get a reference to the parent of leaf by using the upgrade method, we get a None value. We see this in the output from the first println! statement:  When we create the branch node, it will also have a new Weak<Node> reference in the parent field, because branch doesn‚Äôt have a parent node. We still have leaf as one of the children of branch. Once we have the Node instance in branch, we can modify leaf to give it a Weak<Node> reference to its parent. We use the borrow_mut method on the RefCell<Weak<Node>> in the parent field of leaf, and then we use the Rc::downgrade function to create a Weak<Node> reference to branch from the Rc<Node> in branch.  When we print the parent of leaf again, this time we‚Äôll get a Some variant holding branch: now leaf can access its parent! When we print leaf, we also avoid the cycle that eventually ended in a stack overflow like we had in Listing -; the Weak<Node> references are printed as (Weak):  The lack of infinite output indicates that this code didn‚Äôt create a reference cycle. We can also tell this by looking at the values we get from calling Rc::strong_count and Rc::weak_count.  Visualizing Changes to strong_count and weak_count Let‚Äôs look at how the strong_count and weak_count values of the Rc<Node> instances change by creating a new inner scope and moving the creation of branch into that scope. By doing so, we can see what happens when branch is created and then dropped when it goes out of scope. The modifications are shown in Listing -:  Filename: src/main.rs  Listing -: Creating branch in an inner scope and examining strong and weak reference counts  After leaf is created, its Rc<Node> has a strong count of  and a weak count of . In the inner scope, we create branch and associate it with leaf, at which point when we print the counts, the Rc<Node> in branch will have a strong count of  and a weak count of  (for leaf.parent pointing to branch with a Weak<Node>). When we print the counts in leaf, we‚Äôll see it will have a strong count of , because branch now has a clone of the Rc<Node> of leaf stored in branch.children, but will still have a weak count of .  When the inner scope ends, branch goes out of scope and the strong count of the Rc<Node> decreases to , so its Node is dropped. The weak count of  from leaf.parent has no bearing on whether or not Node is dropped, so we don‚Äôt get any memory leaks!  If we try to access the parent of leaf after the end of the scope, we‚Äôll get None again. At the end of the program, the Rc<Node> in leaf has a strong count of  and a weak count of , because the variable leaf is now the only reference to the Rc<Node> again.  All of the logic that manages the counts and value dropping is built into Rc<T> and Weak<T> and their implementations of the Drop trait. By specifying that the relationship from a child to its parent should be a Weak<T> reference in the definition of Node, you‚Äôre able to have parent nodes point to child nodes and vice versa without creating a reference cycle and memory leaks.  Summary This chapter covered how to use smart pointers to make different guarantees and trade-offs from those Rust makes by default with regular references. The Box<T> type has a known size and points to data allocated on the heap. The Rc<T> type keeps track of the number of references to data on the heap so that data can have multiple owners. The RefCell<T> type with its interior mutability gives us a type that we can use when we need an immutable type but need to change an inner value of that type; it also enforces the borrowing rules at runtime instead of at compile time.  Also discussed were the Deref and Drop traits, which enable a lot of the functionality of smart pointers. We explored reference cycles that can cause memory leaks and how to prevent them using Weak<T>.  If this chapter has piqued your interest and you want to implement your own smart pointers, check out ‚ÄúThe Rustonomicon‚Äù for more useful information.  Next, we‚Äôll talk about concurrency in Rust. You‚Äôll even learn about a few new smart pointers.  Fearless Concurrency Handling concurrent programming safely and efficiently is another of Rust‚Äôs major goals. Concurrent programming, where different parts of a program execute independently, and parallel programming, where different parts of a program execute at the same time, are becoming increasingly important as more computers take advantage of their multiple processors. Historically, programming in these contexts has been difficult and error prone: Rust hopes to change that.  Initially, the Rust team thought that ensuring memory safety and preventing concurrency problems were two separate challenges to be solved with different methods. Over time, the team discovered that the ownership and type systems are a powerful set of tools to help manage memory safety and concurrency problems! By leveraging ownership and type checking, many concurrency errors are compile-time errors in Rust rather than runtime errors. Therefore, rather than making you spend lots of time trying to reproduce the exact circumstances under which a runtime concurrency bug occurs, incorrect code will refuse to compile and present an error explaining the problem. As a result, you can fix your code while you‚Äôre working on it rather than potentially after it has been shipped to production. We‚Äôve nicknamed this aspect of Rust fearless concurrency. Fearless concurrency allows you to write code that is free of subtle bugs and is easy to refactor without introducing new bugs.  Note: For simplicity‚Äôs sake, we‚Äôll refer to many of the problems as concurrent rather than being more precise by saying concurrent and/or parallel. If this book were about concurrency and/or parallelism, we‚Äôd be more specific. For this chapter, please mentally substitute concurrent and/or parallel whenever we use concurrent.  Many languages are dogmatic about the solutions they offer for handling concurrent problems. For example, Erlang has elegant functionality for message-passing concurrency but has only obscure ways to share state between threads. Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages, because a higher-level language promises benefits from giving up some control to gain abstractions. However, lower-level languages are expected to provide the solution with the best performance in any given situation and have fewer abstractions over the hardware. Therefore, Rust offers a variety of tools for modeling problems in whatever way is appropriate for your situation and requirements.  Here are the topics we‚Äôll cover in this chapter:  How to create threads to run multiple pieces of code at the same time Message-passing concurrency, where channels send messages between threads Shared-state concurrency, where multiple threads have access to some piece of data The Sync and Send traits, which extend Rust‚Äôs concurrency guarantees to user-defined types as well as types provided by the standard library Using Threads to Run Code Simultaneously In most current operating systems, an executed program‚Äôs code is run in a process, and the operating system will manage multiple processes at once. Within a program, you can also have independent parts that run simultaneously. The features that run these independent parts are called threads. For example, a web server could have multiple threads so that it could respond to more than one request at the same time.  Splitting the computation in your program into multiple threads to run multiple tasks at the same time can improve performance, but it also adds complexity. Because threads can run simultaneously, there‚Äôs no inherent guarantee about the order in which parts of your code on different threads will run. This can lead to problems, such as:  Race conditions, where threads are accessing data or resources in an inconsistent order Deadlocks, where two threads are waiting for each other, preventing both threads from continuing Bugs that happen only in certain situations and are hard to reproduce and fix reliably Rust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.  Programming languages implement threads in a few different ways, and many operating systems provide an API the language can call for creating new threads. The Rust standard library uses a : model of thread implementation, whereby a program uses one operating system thread per one language thread. There are crates that implement other models of threading that make different tradeoffs to the : model.  Creating a New Thread with spawn To create a new thread, we call the thread::spawn function and pass it a closure (we talked about closures in Chapter ) containing the code we want to run in the new thread. The example in Listing - prints some text from a main thread and other text from a new thread:  Filename: src/main.rs  Listing -: Creating a new thread to print one thing while the main thread prints something else  Note that when the main thread of a Rust program completes, all spawned threads are shut down, whether or not they have finished running. The output from this program might be a little different every time, but it will look similar to the following:  The calls to thread::sleep force a thread to stop its execution for a short duration, allowing a different thread to run. The threads will probably take turns, but that isn‚Äôt guaranteed: it depends on how your operating system schedules the threads. In this run, the main thread printed first, even though the print statement from the spawned thread appears first in the code. And even though we told the spawned thread to print until i is , it only got to  before the main thread shut down.  If you run this code and only see output from the main thread, or don‚Äôt see any overlap, try increasing the numbers in the ranges to create more opportunities for the operating system to switch between the threads.  Waiting for All Threads to Finish Using join Handles The code in Listing - not only stops the spawned thread prematurely most of the time due to the main thread ending, but because there is no guarantee on the order in which threads run, we also can‚Äôt guarantee that the spawned thread will get to run at all!  We can fix the problem of the spawned thread not running or ending prematurely by saving the return value of thread::spawn in a variable. The return type of thread::spawn is JoinHandle. A JoinHandle is an owned value that, when we call the join method on it, will wait for its thread to finish. Listing - shows how to use the JoinHandle of the thread we created in Listing - and call join to make sure the spawned thread finishes before main exits:  Filename: src/main.rs  Listing -: Saving a JoinHandle from thread::spawn to guarantee the thread is run to completion  Calling join on the handle blocks the thread currently running until the thread represented by the handle terminates. Blocking a thread means that thread is prevented from performing work or exiting. Because we‚Äôve put the call to join after the main thread‚Äôs for loop, running Listing - should produce output similar to this:  The two threads continue alternating, but the main thread waits because of the call to handle.join() and does not end until the spawned thread is finished.  But let‚Äôs see what happens when we instead move handle.join() before the for loop in main, like this:  Filename: src/main.rs  The main thread will wait for the spawned thread to finish and then run its for loop, so the output won‚Äôt be interleaved anymore, as shown here:  Small details, such as where join is called, can affect whether or not your threads run at the same time.  Using move Closures with Threads We'll often use the move keyword with closures passed to thread::spawn because the closure will then take ownership of the values it uses from the environment, thus transferring ownership of those values from one thread to another. In the ‚ÄúCapturing References or Moving Ownership‚Äù section of Chapter , we discussed move in the context of closures. Now, we‚Äôll concentrate more on the interaction between move and thread::spawn.  Notice in Listing - that the closure we pass to thread::spawn takes no arguments: we‚Äôre not using any data from the main thread in the spawned thread‚Äôs code. To use data from the main thread in the spawned thread, the spawned thread‚Äôs closure must capture the values it needs. Listing - shows an attempt to create a vector in the main thread and use it in the spawned thread. However, this won‚Äôt yet work, as you‚Äôll see in a moment.  Filename: src/main.rs  Listing -: Attempting to use a vector created by the main thread in another thread  The closure uses v, so it will capture v and make it part of the closure‚Äôs environment. Because thread::spawn runs this closure in a new thread, we should be able to access v inside that new thread. But when we compile this example, we get the following error:  Rust infers how to capture v, and because println! only needs a reference to v, the closure tries to borrow v. However, there‚Äôs a problem: Rust can‚Äôt tell how long the spawned thread will run, so it doesn‚Äôt know if the reference to v will always be valid.  Listing - provides a scenario that‚Äôs more likely to have a reference to v that won‚Äôt be valid:  Filename: src/main.rs  Listing -: A thread with a closure that attempts to capture a reference to v from a main thread that drops v  If Rust allowed us to run this code, there‚Äôs a possibility the spawned thread would be immediately put in the background without running at all. The spawned thread has a reference to v inside, but the main thread immediately drops v, using the drop function we discussed in Chapter . Then, when the spawned thread starts to execute, v is no longer valid, so a reference to it is also invalid. Oh no!  To fix the compiler error in Listing -, we can use the error message‚Äôs advice:  By adding the move keyword before the closure, we force the closure to take ownership of the values it‚Äôs using rather than allowing Rust to infer that it should borrow the values. The modification to Listing - shown in Listing - will compile and run as we intend:  Filename: src/main.rs  Listing -: Using the move keyword to force a closure to take ownership of the values it uses  We might be tempted to try the same thing to fix the code in Listing - where the main thread called drop by using a move closure. However, this fix will not work because what Listing - is trying to do is disallowed for a different reason. If we added move to the closure, we would move v into the closure‚Äôs environment, and we could no longer call drop on it in the main thread. We would get this compiler error instead:  Rust‚Äôs ownership rules have saved us again! We got an error from the code in Listing - because Rust was being conservative and only borrowing v for the thread, which meant the main thread could theoretically invalidate the spawned thread‚Äôs reference. By telling Rust to move ownership of v to the spawned thread, we‚Äôre guaranteeing Rust that the main thread won‚Äôt use v anymore. If we change Listing - in the same way, we‚Äôre then violating the ownership rules when we try to use v in the main thread. The move keyword overrides Rust‚Äôs conservative default of borrowing; it doesn‚Äôt let us violate the ownership rules.  With a basic understanding of threads and the thread API, let‚Äôs look at what we can do with threads.  Using Message Passing to Transfer Data Between Threads One increasingly popular approach to ensuring safe concurrency is message passing, where threads or actors communicate by sending each other messages containing data. Here‚Äôs the idea in a slogan from the Go language documentation: ‚ÄúDo not communicate by sharing memory; instead, share memory by communicating.‚Äù  To accomplish message-sending concurrency, Rust's standard library provides an implementation of channels. A channel is a general programming concept by which data is sent from one thread to another.  You can imagine a channel in programming as being like a directional channel of water, such as a stream or a river. If you put something like a rubber duck into a river, it will travel downstream to the end of the waterway.  A channel has two halves: a transmitter and a receiver. The transmitter half is the upstream location where you put rubber ducks into the river, and the receiver half is where the rubber duck ends up downstream. One part of your code calls methods on the transmitter with the data you want to send, and another part checks the receiving end for arriving messages. A channel is said to be closed if either the transmitter or receiver half is dropped.  Here, we‚Äôll work up to a program that has one thread to generate values and send them down a channel, and another thread that will receive the values and print them out. We‚Äôll be sending simple values between threads using a channel to illustrate the feature. Once you‚Äôre familiar with the technique, you could use channels for any threads that need to communicate between each other, such as a chat system or a system where many threads perform parts of a calculation and send the parts to one thread that aggregates the results.  First, in Listing -, we‚Äôll create a channel but not do anything with it. Note that this won‚Äôt compile yet because Rust can‚Äôt tell what type of values we want to send over the channel.  Filename: src/main.rs  Listing -: Creating a channel and assigning the two halves to tx and rx  We create a new channel using the mpsc::channel function; mpsc stands for multiple producer, single consumer. In short, the way Rust‚Äôs standard library implements channels means a channel can have multiple sending ends that produce values but only one receiving end that consumes those values. Imagine multiple streams flowing together into one big river: everything sent down any of the streams will end up in one river at the end. We‚Äôll start with a single producer for now, but we‚Äôll add multiple producers when we get this example working.  The mpsc::channel function returns a tuple, the first element of which is the sending end‚Äîthe transmitter‚Äîand the second element is the receiving end‚Äîthe receiver. The abbreviations tx and rx are traditionally used in many fields for transmitter and receiver respectively, so we name our variables as such to indicate each end. We‚Äôre using a let statement with a pattern that destructures the tuples; we‚Äôll discuss the use of patterns in let statements and destructuring in Chapter . For now, know that using a let statement this way is a convenient approach to extract the pieces of the tuple returned by mpsc::channel.  Let‚Äôs move the transmitting end into a spawned thread and have it send one string so the spawned thread is communicating with the main thread, as shown in Listing -. This is like putting a rubber duck in the river upstream or sending a chat message from one thread to another.  Filename: src/main.rs  Listing -: Moving tx to a spawned thread and sending ‚Äúhi‚Äù  Again, we‚Äôre using thread::spawn to create a new thread and then using move to move tx into the closure so the spawned thread owns tx. The spawned thread needs to own the transmitter to be able to send messages through the channel. The transmitter has a send method that takes the value we want to send. The send method returns a Result<T, E> type, so if the receiver has already been dropped and there‚Äôs nowhere to send a value, the send operation will return an error. In this example, we‚Äôre calling unwrap to panic in case of an error. But in a real application, we would handle it properly: return to Chapter  to review strategies for proper error handling.  In Listing -, we‚Äôll get the value from the receiver in the main thread. This is like retrieving the rubber duck from the water at the end of the river or receiving a chat message.  Filename: src/main.rs  Listing -: Receiving the value ‚Äúhi‚Äù in the main thread and printing it  The receiver has two useful methods: recv and try_recv. We‚Äôre using recv, short for receive, which will block the main thread‚Äôs execution and wait until a value is sent down the channel. Once a value is sent, recv will return it in a Result<T, E>. When the transmitter closes, recv will return an error to signal that no more values will be coming.  The try_recv method doesn‚Äôt block, but will instead return a Result<T, E> immediately: an Ok value holding a message if one is available and an Err value if there aren‚Äôt any messages this time. Using try_recv is useful if this thread has other work to do while waiting for messages: we could write a loop that calls try_recv every so often, handles a message if one is available, and otherwise does other work for a little while until checking again.  We‚Äôve used recv in this example for simplicity; we don‚Äôt have any other work for the main thread to do other than wait for messages, so blocking the main thread is appropriate.  When we run the code in Listing -, we‚Äôll see the value printed from the main thread:  Perfect!  Channels and Ownership Transference The ownership rules play a vital role in message sending because they help you write safe, concurrent code. Preventing errors in concurrent programming is the advantage of thinking about ownership throughout your Rust programs. Let‚Äôs do an experiment to show how channels and ownership work together to prevent problems: we‚Äôll try to use a val value in the spawned thread after we‚Äôve sent it down the channel. Try compiling the code in Listing - to see why this code isn‚Äôt allowed:  Filename: src/main.rs  Listing -: Attempting to use val after we‚Äôve sent it down the channel  Here, we try to print val after we‚Äôve sent it down the channel via tx.send. Allowing this would be a bad idea: once the value has been sent to another thread, that thread could modify or drop it before we try to use the value again. Potentially, the other thread‚Äôs modifications could cause errors or unexpected results due to inconsistent or nonexistent data. However, Rust gives us an error if we try to compile the code in Listing -:  Our concurrency mistake has caused a compile time error. The send function takes ownership of its parameter, and when the value is moved, the receiver takes ownership of it. This stops us from accidentally using the value again after sending it; the ownership system checks that everything is okay.  Sending Multiple Values and Seeing the Receiver Waiting The code in Listing - compiled and ran, but it didn‚Äôt clearly show us that two separate threads were talking to each other over the channel. In Listing - we‚Äôve made some modifications that will prove the code in Listing - is running concurrently: the spawned thread will now send multiple messages and pause for a second between each message.  Filename: src/main.rs  Listing -: Sending multiple messages and pausing between each  This time, the spawned thread has a vector of strings that we want to send to the main thread. We iterate over them, sending each individually, and pause between each by calling the thread::sleep function with a Duration value of  second.  In the main thread, we‚Äôre not calling the recv function explicitly anymore: instead, we‚Äôre treating rx as an iterator. For each value received, we‚Äôre printing it. When the channel is closed, iteration will end.  When running the code in Listing -, you should see the following output with a -second pause in between each line:  Because we don‚Äôt have any code that pauses or delays in the for loop in the main thread, we can tell that the main thread is waiting to receive values from the spawned thread.  Creating Multiple Producers by Cloning the Transmitter Earlier we mentioned that mpsc was an acronym for multiple producer, single consumer. Let‚Äôs put mpsc to use and expand the code in Listing - to create multiple threads that all send values to the same receiver. We can do so by cloning the transmitter, as shown in Listing -:  Filename: src/main.rs  Listing -: Sending multiple messages from multiple producers  This time, before we create the first spawned thread, we call clone on the transmitter. This will give us a new transmitter we can pass to the first spawned thread. We pass the original transmitter to a second spawned thread. This gives us two threads, each sending different messages to the one receiver.  When you run the code, your output should look something like this:  You might see the values in another order, depending on your system. This is what makes concurrency interesting as well as difficult. If you experiment with thread::sleep, giving it various values in the different threads, each run will be more nondeterministic and create different output each time.  Now that we‚Äôve looked at how channels work, let‚Äôs look at a different method of concurrency.  Shared-State Concurrency Message passing is a fine way of handling concurrency, but it‚Äôs not the only one. Another method would be for multiple threads to access the same shared data. Consider this part of the slogan from the Go language documentation again: ‚Äúdo not communicate by sharing memory.‚Äù  What would communicating by sharing memory look like? In addition, why would message-passing enthusiasts caution not to use memory sharing?  In a way, channels in any programming language are similar to single ownership, because once you transfer a value down a channel, you should no longer use that value. Shared memory concurrency is like multiple ownership: multiple threads can access the same memory location at the same time. As you saw in Chapter , where smart pointers made multiple ownership possible, multiple ownership can add complexity because these different owners need managing. Rust‚Äôs type system and ownership rules greatly assist in getting this management correct. For an example, let‚Äôs look at mutexes, one of the more common concurrency primitives for shared memory.  Using Mutexes to Allow Access to Data from One Thread at a Time Mutex is an abbreviation for mutual exclusion, as in, a mutex allows only one thread to access some data at any given time. To access the data in a mutex, a thread must first signal that it wants access by asking to acquire the mutex‚Äôs lock. The lock is a data structure that is part of the mutex that keeps track of who currently has exclusive access to the data. Therefore, the mutex is described as guarding the data it holds via the locking system.  Mutexes have a reputation for being difficult to use because you have to remember two rules:  You must attempt to acquire the lock before using the data. When you‚Äôre done with the data that the mutex guards, you must unlock the data so other threads can acquire the lock. For a real-world metaphor for a mutex, imagine a panel discussion at a conference with only one microphone. Before a panelist can speak, they have to ask or signal that they want to use the microphone. When they get the microphone, they can talk for as long as they want to and then hand the microphone to the next panelist who requests to speak. If a panelist forgets to hand the microphone off when they‚Äôre finished with it, no one else is able to speak. If management of the shared microphone goes wrong, the panel won‚Äôt work as planned!  Management of mutexes can be incredibly tricky to get right, which is why so many people are enthusiastic about channels. However, thanks to Rust‚Äôs type system and ownership rules, you can‚Äôt get locking and unlocking wrong.  The API of Mutex<T> As an example of how to use a mutex, let‚Äôs start by using a mutex in a single-threaded context, as shown in Listing -:  Filename: src/main.rs  Listing -: Exploring the API of Mutex<T> in a single-threaded context for simplicity  As with many types, we create a Mutex<T> using the associated function new. To access the data inside the mutex, we use the lock method to acquire the lock. This call will block the current thread so it can‚Äôt do any work until it‚Äôs our turn to have the lock.  The call to lock would fail if another thread holding the lock panicked. In that case, no one would ever be able to get the lock, so we‚Äôve chosen to unwrap and have this thread panic if we‚Äôre in that situation.  After we‚Äôve acquired the lock, we can treat the return value, named num in this case, as a mutable reference to the data inside. The type system ensures that we acquire a lock before using the value in m. The type of m is Mutex<i>, not i, so we must call lock to be able to use the i value. We can‚Äôt forget; the type system won‚Äôt let us access the inner i otherwise.  As you might suspect, Mutex<T> is a smart pointer. More accurately, the call to lock returns a smart pointer called MutexGuard, wrapped in a LockResult that we handled with the call to unwrap. The MutexGuard smart pointer implements Deref to point at our inner data; the smart pointer also has a Drop implementation that releases the lock automatically when a MutexGuard goes out of scope, which happens at the end of the inner scope. As a result, we don‚Äôt risk forgetting to release the lock and blocking the mutex from being used by other threads, because the lock release happens automatically.  After dropping the lock, we can print the mutex value and see that we were able to change the inner i to .  Sharing a Mutex<T> Between Multiple Threads Now, let‚Äôs try to share a value between multiple threads using Mutex<T>. We‚Äôll spin up  threads and have them each increment a counter value by , so the counter goes from  to . The next example in Listing - will have a compiler error, and we‚Äôll use that error to learn more about using Mutex<T> and how Rust helps us use it correctly.  Filename: src/main.rs  Listing -: Ten threads each increment a counter guarded by a Mutex<T>  We create a counter variable to hold an i inside a Mutex<T>, as we did in Listing -. Next, we create  threads by iterating over a range of numbers. We use thread::spawn and give all the threads the same closure: one that moves the counter into the thread, acquires a lock on the Mutex<T> by calling the lock method, and then adds  to the value in the mutex. When a thread finishes running its closure, num will go out of scope and release the lock so another thread can acquire it.  In the main thread, we collect all the join handles. Then, as we did in Listing -, we call join on each handle to make sure all the threads finish. At that point, the main thread will acquire the lock and print the result of this program.  We hinted that this example wouldn‚Äôt compile. Now let‚Äôs find out why!  The error message states that the counter value was moved in the previous iteration of the loop. Rust is telling us that we can‚Äôt move the ownership of counter into multiple threads. Let‚Äôs fix the compiler error with a multiple-ownership method we discussed in Chapter .  Multiple Ownership with Multiple Threads In Chapter , we gave a value multiple owners by using the smart pointer Rc<T> to create a reference counted value. Let‚Äôs do the same here and see what happens. We‚Äôll wrap the Mutex<T> in Rc<T> in Listing - and clone the Rc<T> before moving ownership to the thread.  Filename: src/main.rs  Listing -: Attempting to use Rc<T> to allow multiple threads to own the Mutex<T>  Once again, we compile and get... different errors! The compiler is teaching us a lot.  Wow, that error message is very wordy! Here‚Äôs the important part to focus on: `Rc<Mutex<i>>` cannot be sent between threads safely. The compiler is also telling us the reason why: the trait `Send` is not implemented for `Rc<Mutex<i>>` . We‚Äôll talk about Send in the next section: it‚Äôs one of the traits that ensures the types we use with threads are meant for use in concurrent situations.  Unfortunately, Rc<T> is not safe to share across threads. When Rc<T> manages the reference count, it adds to the count for each call to clone and subtracts from the count when each clone is dropped. But it doesn‚Äôt use any concurrency primitives to make sure that changes to the count can‚Äôt be interrupted by another thread. This could lead to wrong counts‚Äîsubtle bugs that could in turn lead to memory leaks or a value being dropped before we‚Äôre done with it. What we need is a type exactly like Rc<T> but one that makes changes to the reference count in a thread-safe way.  Atomic Reference Counting with Arc<T> Fortunately, Arc<T> is a type like Rc<T> that is safe to use in concurrent situations. The a stands for atomic, meaning it‚Äôs an atomically reference counted type. Atomics are an additional kind of concurrency primitive that we won‚Äôt cover in detail here: see the standard library documentation for std::sync::atomic for more details. At this point, you just need to know that atomics work like primitive types but are safe to share across threads.  You might then wonder why all primitive types aren‚Äôt atomic and why standard library types aren‚Äôt implemented to use Arc<T> by default. The reason is that thread safety comes with a performance penalty that you only want to pay when you really need to. If you‚Äôre just performing operations on values within a single thread, your code can run faster if it doesn‚Äôt have to enforce the guarantees atomics provide.  Let‚Äôs return to our example: Arc<T> and Rc<T> have the same API, so we fix our program by changing the use line, the call to new, and the call to clone. The code in Listing - will finally compile and run:  Filename: src/main.rs  Listing -: Using an Arc<T> to wrap the Mutex<T> to be able to share ownership across multiple threads  This code will print the following:  We did it! We counted from  to , which may not seem very impressive, but it did teach us a lot about Mutex<T> and thread safety. You could also use this program‚Äôs structure to do more complicated operations than just incrementing a counter. Using this strategy, you can divide a calculation into independent parts, split those parts across threads, and then use a Mutex<T> to have each thread update the final result with its part.  Note that if you are doing simple numerical operations, there are types simpler than Mutex<T> types provided by the std::sync::atomic module of the standard library. These types provide safe, concurrent, atomic access to primitive types. We chose to use Mutex<T> with a primitive type for this example so we could concentrate on how Mutex<T> works.  Similarities Between RefCell<T>/Rc<T> and Mutex<T>/Arc<T> You might have noticed that counter is immutable but we could get a mutable reference to the value inside it; this means Mutex<T> provides interior mutability, as the Cell family does. In the same way we used RefCell<T> in Chapter  to allow us to mutate contents inside an Rc<T>, we use Mutex<T> to mutate contents inside an Arc<T>.  Another detail to note is that Rust can‚Äôt protect you from all kinds of logic errors when you use Mutex<T>. Recall in Chapter  that using Rc<T> came with the risk of creating reference cycles, where two Rc<T> values refer to each other, causing memory leaks. Similarly, Mutex<T> comes with the risk of creating deadlocks. These occur when an operation needs to lock two resources and two threads have each acquired one of the locks, causing them to wait for each other forever. If you‚Äôre interested in deadlocks, try creating a Rust program that has a deadlock; then research deadlock mitigation strategies for mutexes in any language and have a go at implementing them in Rust. The standard library API documentation for Mutex<T> and MutexGuard offers useful information.  We‚Äôll round out this chapter by talking about the Send and Sync traits and how we can use them with custom types.  Extensible Concurrency with the Sync and Send Traits Interestingly, the Rust language has very few concurrency features. Almost every concurrency feature we‚Äôve talked about so far in this chapter has been part of the standard library, not the language. Your options for handling concurrency are not limited to the language or the standard library; you can write your own concurrency features or use those written by others.  However, two concurrency concepts are embedded in the language: the std::marker traits Sync and Send.  Allowing Transference of Ownership Between Threads with Send The Send marker trait indicates that ownership of values of the type implementing Send can be transferred between threads. Almost every Rust type is Send, but there are some exceptions, including Rc<T>: this cannot be Send because if you cloned an Rc<T> value and tried to transfer ownership of the clone to another thread, both threads might update the reference count at the same time. For this reason, Rc<T> is implemented for use in single-threaded situations where you don‚Äôt want to pay the thread-safe performance penalty.  Therefore, Rust‚Äôs type system and trait bounds ensure that you can never accidentally send an Rc<T> value across threads unsafely. When we tried to do this in Listing -, we got the error the trait Send is not implemented for Rc<Mutex<i>>. When we switched to Arc<T>, which is Send, the code compiled.  Any type composed entirely of Send types is automatically marked as Send as well. Almost all primitive types are Send, aside from raw pointers, which we‚Äôll discuss in Chapter .  Allowing Access from Multiple Threads with Sync The Sync marker trait indicates that it is safe for the type implementing Sync to be referenced from multiple threads. In other words, any type T is Sync if &T (an immutable reference to T) is Send, meaning the reference can be sent safely to another thread. Similar to Send, primitive types are Sync, and types composed entirely of types that are Sync are also Sync.  The smart pointer Rc<T> is also not Sync for the same reasons that it‚Äôs not Send. The RefCell<T> type (which we talked about in Chapter ) and the family of related Cell<T> types are not Sync. The implementation of borrow checking that RefCell<T> does at runtime is not thread-safe. The smart pointer Mutex<T> is Sync and can be used to share access with multiple threads as you saw in the ‚ÄúSharing a Mutex<T> Between Multiple Threads‚Äù section.  Implementing Send and Sync Manually Is Unsafe Because types that are made up of Send and Sync traits are automatically also Send and Sync, we don‚Äôt have to implement those traits manually. As marker traits, they don‚Äôt even have any methods to implement. They‚Äôre just useful for enforcing invariants related to concurrency.  Manually implementing these traits involves implementing unsafe Rust code. We‚Äôll talk about using unsafe Rust code in Chapter ; for now, the important information is that building new concurrent types not made up of Send and Sync parts requires careful thought to uphold the safety guarantees. ‚ÄúThe Rustonomicon‚Äù has more information about these guarantees and how to uphold them.  Summary This isn‚Äôt the last you‚Äôll see of concurrency in this book: the project in Chapter  will use the concepts in this chapter in a more realistic situation than the smaller examples discussed here.  As mentioned earlier, because very little of how Rust handles concurrency is part of the language, many concurrency solutions are implemented as crates. These evolve more quickly than the standard library, so be sure to search online for the current, state-of-the-art crates to use in multithreaded situations.  The Rust standard library provides channels for message passing and smart pointer types, such as Mutex<T> and Arc<T>, that are safe to use in concurrent contexts. The type system and the borrow checker ensure that the code using these solutions won‚Äôt end up with data races or invalid references. Once you get your code to compile, you can rest assured that it will happily run on multiple threads without the kinds of hard-to-track-down bugs common in other languages. Concurrent programming is no longer a concept to be afraid of: go forth and make your programs concurrent, fearlessly!  Next, we‚Äôll talk about idiomatic ways to model problems and structure solutions as your Rust programs get bigger. In addition, we‚Äôll discuss how Rust‚Äôs idioms relate to those you might be familiar with from object-oriented programming.  Object-Oriented Programming Features of Rust Object-oriented programming (OOP) is a way of modeling programs. Objects as a programmatic concept were introduced in the programming language Simula in the s. Those objects influenced Alan Kay‚Äôs programming architecture in which objects pass messages to each other. To describe this architecture, he coined the term object-oriented programming in . Many competing definitions describe what OOP is, and by some of these definitions Rust is object-oriented, but by others it is not. In this chapter, we‚Äôll explore certain characteristics that are commonly considered object-oriented and how those characteristics translate to idiomatic Rust. We‚Äôll then show you how to implement an object-oriented design pattern in Rust and discuss the trade-offs of doing so versus implementing a solution using some of Rust‚Äôs strengths instead.  Characteristics of Object-Oriented Languages There is no consensus in the programming community about what features a language must have to be considered object-oriented. Rust is influenced by many programming paradigms, including OOP; for example, we explored the features that came from functional programming in Chapter . Arguably, OOP languages share certain common characteristics, namely objects, encapsulation, and inheritance. Let‚Äôs look at what each of those characteristics means and whether Rust supports it.  Objects Contain Data and Behavior The book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison-Wesley Professional, ), colloquially referred to as The Gang of Four book, is a catalog of object-oriented design patterns. It defines OOP this way:  Object-oriented programs are made up of objects. An object packages both data and the procedures that operate on that data. The procedures are typically called methods or operations.  Using this definition, Rust is object-oriented: structs and enums have data, and impl blocks provide methods on structs and enums. Even though structs and enums with methods aren‚Äôt called objects, they provide the same functionality, according to the Gang of Four‚Äôs definition of objects.  Encapsulation that Hides Implementation Details Another aspect commonly associated with OOP is the idea of encapsulation, which means that the implementation details of an object aren‚Äôt accessible to code using that object. Therefore, the only way to interact with an object is through its public API; code using the object shouldn‚Äôt be able to reach into the object‚Äôs internals and change data or behavior directly. This enables the programmer to change and refactor an object‚Äôs internals without needing to change the code that uses the object.  We discussed how to control encapsulation in Chapter : we can use the pub keyword to decide which modules, types, functions, and methods in our code should be public, and by default everything else is private. For example, we can define a struct AveragedCollection that has a field containing a vector of i values. The struct can also have a field that contains the average of the values in the vector, meaning the average doesn‚Äôt have to be computed on demand whenever anyone needs it. In other words, AveragedCollection will cache the calculated average for us. Listing - has the definition of the AveragedCollection struct:  Filename: src/lib.rs  Listing -: An AveragedCollection struct that maintains a list of integers and the average of the items in the collection  The struct is marked pub so that other code can use it, but the fields within the struct remain private. This is important in this case because we want to ensure that whenever a value is added or removed from the list, the average is also updated. We do this by implementing add, remove, and average methods on the struct, as shown in Listing -:  Filename: src/lib.rs  Listing -: Implementations of the public methods add, remove, and average on AveragedCollection  The public methods add, remove, and average are the only ways to access or modify data in an instance of AveragedCollection. When an item is added to list using the add method or removed using the remove method, the implementations of each call the private update_average method that handles updating the average field as well.  We leave the list and average fields private so there is no way for external code to add or remove items to or from the list field directly; otherwise, the average field might become out of sync when the list changes. The average method returns the value in the average field, allowing external code to read the average but not modify it.  Because we‚Äôve encapsulated the implementation details of the struct AveragedCollection, we can easily change aspects, such as the data structure, in the future. For instance, we could use a HashSet<i> instead of a Vec<i> for the list field. As long as the signatures of the add, remove, and average public methods stay the same, code using AveragedCollection wouldn‚Äôt need to change in order to compile. If we made list public instead, this wouldn‚Äôt necessarily be the case: HashSet<i> and Vec<i> have different methods for adding and removing items, so the external code would likely have to change if it were modifying list directly.  If encapsulation is a required aspect for a language to be considered object-oriented, then Rust meets that requirement. The option to use pub or not for different parts of code enables encapsulation of implementation details.  Inheritance as a Type System and as Code Sharing Inheritance is a mechanism whereby an object can inherit elements from another object‚Äôs definition, thus gaining the parent object‚Äôs data and behavior without you having to define them again.  If a language must have inheritance to be an object-oriented language, then Rust is not one. There is no way to define a struct that inherits the parent struct‚Äôs fields and method implementations without using a macro.  However, if you‚Äôre used to having inheritance in your programming toolbox, you can use other solutions in Rust, depending on your reason for reaching for inheritance in the first place.  You would choose inheritance for two main reasons. One is for reuse of code: you can implement particular behavior for one type, and inheritance enables you to reuse that implementation for a different type. You can do this in a limited way in Rust code using default trait method implementations, which you saw in Listing - when we added a default implementation of the summarize method on the Summary trait. Any type implementing the Summary trait would have the summarize method available on it without any further code. This is similar to a parent class having an implementation of a method and an inheriting child class also having the implementation of the method. We can also override the default implementation of the summarize method when we implement the Summary trait, which is similar to a child class overriding the implementation of a method inherited from a parent class.  The other reason to use inheritance relates to the type system: to enable a child type to be used in the same places as the parent type. This is also called polymorphism, which means that you can substitute multiple objects for each other at runtime if they share certain characteristics.  Polymorphism To many people, polymorphism is synonymous with inheritance. But it‚Äôs actually a more general concept that refers to code that can work with data of multiple types. For inheritance, those types are generally subclasses.  Rust instead uses generics to abstract over different possible types and trait bounds to impose constraints on what those types must provide. This is sometimes called bounded parametric polymorphism.  Inheritance has recently fallen out of favor as a programming design solution in many programming languages because it‚Äôs often at risk of sharing more code than necessary. Subclasses shouldn‚Äôt always share all characteristics of their parent class but will do so with inheritance. This can make a program‚Äôs design less flexible. It also introduces the possibility of calling methods on subclasses that don‚Äôt make sense or that cause errors because the methods don‚Äôt apply to the subclass. In addition, some languages will only allow single inheritance (meaning a subclass can only inherit from one class), further restricting the flexibility of a program‚Äôs design.  For these reasons, Rust takes the different approach of using trait objects instead of inheritance. Let‚Äôs look at how trait objects enable polymorphism in Rust.  Using Trait Objects That Allow for Values of Different Types In Chapter , we mentioned that one limitation of vectors is that they can store elements of only one type. We created a workaround in Listing - where we defined a SpreadsheetCell enum that had variants to hold integers, floats, and text. This meant we could store different types of data in each cell and still have a vector that represented a row of cells. This is a perfectly good solution when our interchangeable items are a fixed set of types that we know when our code is compiled.  However, sometimes we want our library user to be able to extend the set of types that are valid in a particular situation. To show how we might achieve this, we‚Äôll create an example graphical user interface (GUI) tool that iterates through a list of items, calling a draw method on each one to draw it to the screen‚Äîa common technique for GUI tools. We‚Äôll create a library crate called gui that contains the structure of a GUI library. This crate might include some types for people to use, such as Button or TextField. In addition, gui users will want to create their own types that can be drawn: for instance, one programmer might add an Image and another might add a SelectBox.  We won‚Äôt implement a fully fledged GUI library for this example but will show how the pieces would fit together. At the time of writing the library, we can‚Äôt know and define all the types other programmers might want to create. But we do know that gui needs to keep track of many values of different types, and it needs to call a draw method on each of these differently typed values. It doesn‚Äôt need to know exactly what will happen when we call the draw method, just that the value will have that method available for us to call.  To do this in a language with inheritance, we might define a class named Component that has a method named draw on it. The other classes, such as Button, Image, and SelectBox, would inherit from Component and thus inherit the draw method. They could each override the draw method to define their custom behavior, but the framework could treat all of the types as if they were Component instances and call draw on them. But because Rust doesn‚Äôt have inheritance, we need another way to structure the gui library to allow users to extend it with new types.  Defining a Trait for Common Behavior To implement the behavior we want gui to have, we‚Äôll define a trait named Draw that will have one method named draw. Then we can define a vector that takes a trait object. A trait object points to both an instance of a type implementing our specified trait and a table used to look up trait methods on that type at runtime. We create a trait object by specifying some sort of pointer, such as a & reference or a Box<T> smart pointer, then the dyn keyword, and then specifying the relevant trait. (We‚Äôll talk about the reason trait objects must use a pointer in Chapter  in the section ‚ÄúDynamically Sized Types and the Sized Trait.‚Äù) We can use trait objects in place of a generic or concrete type. Wherever we use a trait object, Rust‚Äôs type system will ensure at compile time that any value used in that context will implement the trait object‚Äôs trait. Consequently, we don‚Äôt need to know all the possible types at compile time.  We‚Äôve mentioned that, in Rust, we refrain from calling structs and enums ‚Äúobjects‚Äù to distinguish them from other languages‚Äô objects. In a struct or enum, the data in the struct fields and the behavior in impl blocks are separated, whereas in other languages, the data and behavior combined into one concept is often labeled an object. However, trait objects are more like objects in other languages in the sense that they combine data and behavior. But trait objects differ from traditional objects in that we can‚Äôt add data to a trait object. Trait objects aren‚Äôt as generally useful as objects in other languages: their specific purpose is to allow abstraction across common behavior.  Listing - shows how to define a trait named Draw with one method named draw:  Filename: src/lib.rs  Listing -: Definition of the Draw trait  This syntax should look familiar from our discussions on how to define traits in Chapter . Next comes some new syntax: Listing - defines a struct named Screen that holds a vector named components. This vector is of type Box<dyn Draw>, which is a trait object; it‚Äôs a stand-in for any type inside a Box that implements the Draw trait.  Filename: src/lib.rs  Listing -: Definition of the Screen struct with a components field holding a vector of trait objects that implement the Draw trait  On the Screen struct, we‚Äôll define a method named run that will call the draw method on each of its components, as shown in Listing -:  Filename: src/lib.rs  Listing -: A run method on Screen that calls the draw method on each component  This works differently from defining a struct that uses a generic type parameter with trait bounds. A generic type parameter can only be substituted with one concrete type at a time, whereas trait objects allow for multiple concrete types to fill in for the trait object at runtime. For example, we could have defined the Screen struct using a generic type and a trait bound as in Listing -:  Filename: src/lib.rs  Listing -: An alternate implementation of the Screen struct and its run method using generics and trait bounds  This restricts us to a Screen instance that has a list of components all of type Button or all of type TextField. If you‚Äôll only ever have homogeneous collections, using generics and trait bounds is preferable because the definitions will be monomorphized at compile time to use the concrete types.  On the other hand, with the method using trait objects, one Screen instance can hold a Vec<T> that contains a Box<Button> as well as a Box<TextField>. Let‚Äôs look at how this works, and then we‚Äôll talk about the runtime performance implications.  Implementing the Trait Now we‚Äôll add some types that implement the Draw trait. We‚Äôll provide the Button type. Again, actually implementing a GUI library is beyond the scope of this book, so the draw method won‚Äôt have any useful implementation in its body. To imagine what the implementation might look like, a Button struct might have fields for width, height, and label, as shown in Listing -:  Filename: src/lib.rs  Listing -: A Button struct that implements the Draw trait  The width, height, and label fields on Button will differ from the fields on other components; for example, a TextField type might have those same fields plus a placeholder field. Each of the types we want to draw on the screen will implement the Draw trait but will use different code in the draw method to define how to draw that particular type, as Button has here (without the actual GUI code, as mentioned). The Button type, for instance, might have an additional impl block containing methods related to what happens when a user clicks the button. These kinds of methods won‚Äôt apply to types like TextField.  If someone using our library decides to implement a SelectBox struct that has width, height, and options fields, they implement the Draw trait on the SelectBox type as well, as shown in Listing -:  Filename: src/main.rs  Listing -: Another crate using gui and implementing the Draw trait on a SelectBox struct  Our library‚Äôs user can now write their main function to create a Screen instance. To the Screen instance, they can add a SelectBox and a Button by putting each in a Box<T> to become a trait object. They can then call the run method on the Screen instance, which will call draw on each of the components. Listing - shows this implementation:  Filename: src/main.rs  Listing -: Using trait objects to store values of different types that implement the same trait  When we wrote the library, we didn‚Äôt know that someone might add the SelectBox type, but our Screen implementation was able to operate on the new type and draw it because SelectBox implements the Draw trait, which means it implements the draw method.  This concept‚Äîof being concerned only with the messages a value responds to rather than the value‚Äôs concrete type‚Äîis similar to the concept of duck typing in dynamically typed languages: if it walks like a duck and quacks like a duck, then it must be a duck! In the implementation of run on Screen in Listing -, run doesn‚Äôt need to know what the concrete type of each component is. It doesn‚Äôt check whether a component is an instance of a Button or a SelectBox, it just calls the draw method on the component. By specifying Box<dyn Draw> as the type of the values in the components vector, we‚Äôve defined Screen to need values that we can call the draw method on.  The advantage of using trait objects and Rust‚Äôs type system to write code similar to code using duck typing is that we never have to check whether a value implements a particular method at runtime or worry about getting errors if a value doesn‚Äôt implement a method but we call it anyway. Rust won‚Äôt compile our code if the values don‚Äôt implement the traits that the trait objects need.  For example, Listing - shows what happens if we try to create a Screen with a String as a component:  Filename: src/main.rs  Listing -: Attempting to use a type that doesn‚Äôt implement the trait object‚Äôs trait  We‚Äôll get this error because String doesn‚Äôt implement the Draw trait:  This error lets us know that either we‚Äôre passing something to Screen we didn‚Äôt mean to pass and so should pass a different type or we should implement Draw on String so that Screen is able to call draw on it.  Trait Objects Perform Dynamic Dispatch Recall in the ‚ÄúPerformance of Code Using Generics‚Äù section in Chapter  our discussion on the monomorphization process performed by the compiler when we use trait bounds on generics: the compiler generates nongeneric implementations of functions and methods for each concrete type that we use in place of a generic type parameter. The code that results from monomorphization is doing static dispatch, which is when the compiler knows what method you‚Äôre calling at compile time. This is opposed to dynamic dispatch, which is when the compiler can‚Äôt tell at compile time which method you‚Äôre calling. In dynamic dispatch cases, the compiler emits code that at runtime will figure out which method to call.  When we use trait objects, Rust must use dynamic dispatch. The compiler doesn‚Äôt know all the types that might be used with the code that‚Äôs using trait objects, so it doesn‚Äôt know which method implemented on which type to call. Instead, at runtime, Rust uses the pointers inside the trait object to know which method to call. This lookup incurs a runtime cost that doesn‚Äôt occur with static dispatch. Dynamic dispatch also prevents the compiler from choosing to inline a method‚Äôs code, which in turn prevents some optimizations. However, we did get extra flexibility in the code that we wrote in Listing - and were able to support in Listing -, so it‚Äôs a trade-off to consider.  Implementing an Object-Oriented Design Pattern The state pattern is an object-oriented design pattern. The crux of the pattern is that we define a set of states a value can have internally. The states are represented by a set of state objects, and the value‚Äôs behavior changes based on its state. We‚Äôre going to work through an example of a blog post struct that has a field to hold its state, which will be a state object from the set "draft", "review", or "published".  The state objects share functionality: in Rust, of course, we use structs and traits rather than objects and inheritance. Each state object is responsible for its own behavior and for governing when it should change into another state. The value that holds a state object knows nothing about the different behavior of the states or when to transition between states.  The advantage of using the state pattern is that, when the business requirements of the program change, we won‚Äôt need to change the code of the value holding the state or the code that uses the value. We‚Äôll only need to update the code inside one of the state objects to change its rules or perhaps add more state objects.  First, we‚Äôre going to implement the state pattern in a more traditional object-oriented way, then we‚Äôll use an approach that‚Äôs a bit more natural in Rust. Let‚Äôs dig in to incrementally implementing a blog post workflow using the state pattern.  The final functionality will look like this:  A blog post starts as an empty draft. When the draft is done, a review of the post is requested. When the post is approved, it gets published. Only published blog posts return content to print, so unapproved posts can‚Äôt accidentally be published. Any other changes attempted on a post should have no effect. For example, if we try to approve a draft blog post before we‚Äôve requested a review, the post should remain an unpublished draft.  Listing - shows this workflow in code form: this is an example usage of the API we‚Äôll implement in a library crate named blog. This won‚Äôt compile yet because we haven‚Äôt implemented the blog crate.  Filename: src/main.rs  Listing -: Code that demonstrates the desired behavior we want our blog crate to have  We want to allow the user to create a new draft blog post with Post::new. We want to allow text to be added to the blog post. If we try to get the post‚Äôs content immediately, before approval, we shouldn‚Äôt get any text because the post is still a draft. We‚Äôve added assert_eq! in the code for demonstration purposes. An excellent unit test for this would be to assert that a draft blog post returns an empty string from the content method, but we‚Äôre not going to write tests for this example.  Next, we want to enable a request for a review of the post, and we want content to return an empty string while waiting for the review. When the post receives approval, it should get published, meaning the text of the post will be returned when content is called.  Notice that the only type we‚Äôre interacting with from the crate is the Post type. This type will use the state pattern and will hold a value that will be one of three state objects representing the various states a post can be in‚Äîdraft, waiting for review, or published. Changing from one state to another will be managed internally within the Post type. The states change in response to the methods called by our library‚Äôs users on the Post instance, but they don‚Äôt have to manage the state changes directly. Also, users can‚Äôt make a mistake with the states, like publishing a post before it‚Äôs reviewed.  Defining Post and Creating a New Instance in the Draft State Let‚Äôs get started on the implementation of the library! We know we need a public Post struct that holds some content, so we‚Äôll start with the definition of the struct and an associated public new function to create an instance of Post, as shown in Listing -. We‚Äôll also make a private State trait that will define the behavior that all state objects for a Post must have.  Then Post will hold a trait object of Box<dyn State> inside an Option<T> in a private field named state to hold the state object. You‚Äôll see why the Option<T> is necessary in a bit.  Filename: src/lib.rs  Listing -: Definition of a Post struct and a new function that creates a new Post instance, a State trait, and a Draft struct  The State trait defines the behavior shared by different post states. The state objects are Draft, PendingReview, and Published, and they will all implement the State trait. For now, the trait doesn‚Äôt have any methods, and we‚Äôll start by defining just the Draft state because that is the state we want a post to start in.  When we create a new Post, we set its state field to a Some value that holds a Box. This Box points to a new instance of the Draft struct. This ensures whenever we create a new instance of Post, it will start out as a draft. Because the state field of Post is private, there is no way to create a Post in any other state! In the Post::new function, we set the content field to a new, empty String.  Storing the Text of the Post Content We saw in Listing - that we want to be able to call a method named add_text and pass it a &str that is then added as the text content of the blog post. We implement this as a method, rather than exposing the content field as pub, so that later we can implement a method that will control how the content field‚Äôs data is read. The add_text method is pretty straightforward, so let‚Äôs add the implementation in Listing - to the impl Post block:  Filename: src/lib.rs  Listing -: Implementing the add_text method to add text to a post‚Äôs content  The add_text method takes a mutable reference to self, because we‚Äôre changing the Post instance that we‚Äôre calling add_text on. We then call push_str on the String in content and pass the text argument to add to the saved content. This behavior doesn‚Äôt depend on the state the post is in, so it‚Äôs not part of the state pattern. The add_text method doesn‚Äôt interact with the state field at all, but it is part of the behavior we want to support.  Ensuring the Content of a Draft Post Is Empty Even after we‚Äôve called add_text and added some content to our post, we still want the content method to return an empty string slice because the post is still in the draft state, as shown on line  of Listing -. For now, let‚Äôs implement the content method with the simplest thing that will fulfill this requirement: always returning an empty string slice. We‚Äôll change this later once we implement the ability to change a post‚Äôs state so it can be published. So far, posts can only be in the draft state, so the post content should always be empty. Listing - shows this placeholder implementation:  Filename: src/lib.rs  Listing -: Adding a placeholder implementation for the content method on Post that always returns an empty string slice  With this added content method, everything in Listing - up to line  works as intended.  Requesting a Review of the Post Changes Its State Next, we need to add functionality to request a review of a post, which should change its state from Draft to PendingReview. Listing - shows this code:  Filename: src/lib.rs  Listing -: Implementing request_review methods on Post and the State trait  We give Post a public method named request_review that will take a mutable reference to self. Then we call an internal request_review method on the current state of Post, and this second request_review method consumes the current state and returns a new state.  We add the request_review method to the State trait; all types that implement the trait will now need to implement the request_review method. Note that rather than having self, &self, or &mut self as the first parameter of the method, we have self: Box<Self>. This syntax means the method is only valid when called on a Box holding the type. This syntax takes ownership of Box<Self>, invalidating the old state so the state value of the Post can transform into a new state.  To consume the old state, the request_review method needs to take ownership of the state value. This is where the Option in the state field of Post comes in: we call the take method to take the Some value out of the state field and leave a None in its place, because Rust doesn‚Äôt let us have unpopulated fields in structs. This lets us move the state value out of Post rather than borrowing it. Then we‚Äôll set the post‚Äôs state value to the result of this operation.  We need to set state to None temporarily rather than setting it directly with code like self.state = self.state.request_review(); to get ownership of the state value. This ensures Post can‚Äôt use the old state value after we‚Äôve transformed it into a new state.  The request_review method on Draft returns a new, boxed instance of a new PendingReview struct, which represents the state when a post is waiting for a review. The PendingReview struct also implements the request_review method but doesn‚Äôt do any transformations. Rather, it returns itself, because when we request a review on a post already in the PendingReview state, it should stay in the PendingReview state.  Now we can start seeing the advantages of the state pattern: the request_review method on Post is the same no matter its state value. Each state is responsible for its own rules.  We‚Äôll leave the content method on Post as is, returning an empty string slice. We can now have a Post in the PendingReview state as well as in the Draft state, but we want the same behavior in the PendingReview state. Listing - now works up to line !   Adding approve to Change the Behavior of content The approve method will be similar to the request_review method: it will set state to the value that the current state says it should have when that state is approved, as shown in Listing -:  Filename: src/lib.rs  Listing -: Implementing the approve method on Post and the State trait  We add the approve method to the State trait and add a new struct that implements State, the Published state.  Similar to the way request_review on PendingReview works, if we call the approve method on a Draft, it will have no effect because approve will return self. When we call approve on PendingReview, it returns a new, boxed instance of the Published struct. The Published struct implements the State trait, and for both the request_review method and the approve method, it returns itself, because the post should stay in the Published state in those cases.  Now we need to update the content method on Post. We want the value returned from content to depend on the current state of the Post, so we‚Äôre going to have the Post delegate to a content method defined on its state, as shown in Listing -:  Filename: src/lib.rs  Listing -: Updating the content method on Post to delegate to a content method on State  Because the goal is to keep all these rules inside the structs that implement State, we call a content method on the value in state and pass the post instance (that is, self) as an argument. Then we return the value that‚Äôs returned from using the content method on the state value.  We call the as_ref method on the Option because we want a reference to the value inside the Option rather than ownership of the value. Because state is an Option<Box<dyn State>>, when we call as_ref, an Option<&Box<dyn State>> is returned. If we didn‚Äôt call as_ref, we would get an error because we can‚Äôt move state out of the borrowed &self of the function parameter.  We then call the unwrap method, which we know will never panic, because we know the methods on Post ensure that state will always contain a Some value when those methods are done. This is one of the cases we talked about in the ‚ÄúCases In Which You Have More Information Than the Compiler‚Äù section of Chapter  when we know that a None value is never possible, even though the compiler isn‚Äôt able to understand that.  At this point, when we call content on the &Box<dyn State>, deref coercion will take effect on the & and the Box so the content method will ultimately be called on the type that implements the State trait. That means we need to add content to the State trait definition, and that is where we‚Äôll put the logic for what content to return depending on which state we have, as shown in Listing -:  Filename: src/lib.rs  Listing -: Adding the content method to the State trait  We add a default implementation for the content method that returns an empty string slice. That means we don‚Äôt need to implement content on the Draft and PendingReview structs. The Published struct will override the content method and return the value in post.content.  Note that we need lifetime annotations on this method, as we discussed in Chapter . We‚Äôre taking a reference to a post as an argument and returning a reference to part of that post, so the lifetime of the returned reference is related to the lifetime of the post argument.  And we‚Äôre done‚Äîall of Listing - now works! We‚Äôve implemented the state pattern with the rules of the blog post workflow. The logic related to the rules lives in the state objects rather than being scattered throughout Post.  Why Not An Enum? You may have been wondering why we didn‚Äôt use an enum with the different possible post states as variants. That‚Äôs certainly a possible solution, try it and compare the end results to see which you prefer! One disadvantage of using an enum is every place that checks the value of the enum will need a match expression or similar to handle every possible variant. This could get more repetitive than this trait object solution.  Trade-offs of the State Pattern We‚Äôve shown that Rust is capable of implementing the object-oriented state pattern to encapsulate the different kinds of behavior a post should have in each state. The methods on Post know nothing about the various behaviors. The way we organized the code, we have to look in only one place to know the different ways a published post can behave: the implementation of the State trait on the Published struct.  If we were to create an alternative implementation that didn‚Äôt use the state pattern, we might instead use match expressions in the methods on Post or even in the main code that checks the state of the post and changes behavior in those places. That would mean we would have to look in several places to understand all the implications of a post being in the published state! This would only increase the more states we added: each of those match expressions would need another arm.  With the state pattern, the Post methods and the places we use Post don‚Äôt need match expressions, and to add a new state, we would only need to add a new struct and implement the trait methods on that one struct.  The implementation using the state pattern is easy to extend to add more functionality. To see the simplicity of maintaining code that uses the state pattern, try a few of these suggestions:  Add a reject method that changes the post‚Äôs state from PendingReview back to Draft. Require two calls to approve before the state can be changed to Published. Allow users to add text content only when a post is in the Draft state. Hint: have the state object responsible for what might change about the content but not responsible for modifying the Post. One downside of the state pattern is that, because the states implement the transitions between states, some of the states are coupled to each other. If we add another state between PendingReview and Published, such as Scheduled, we would have to change the code in PendingReview to transition to Scheduled instead. It would be less work if PendingReview didn‚Äôt need to change with the addition of a new state, but that would mean switching to another design pattern.  Another downside is that we‚Äôve duplicated some logic. To eliminate some of the duplication, we might try to make default implementations for the request_review and approve methods on the State trait that return self; however, this would violate object safety, because the trait doesn‚Äôt know what the concrete self will be exactly. We want to be able to use State as a trait object, so we need its methods to be object safe.  Other duplication includes the similar implementations of the request_review and approve methods on Post. Both methods delegate to the implementation of the same method on the value in the state field of Option and set the new value of the state field to the result. If we had a lot of methods on Post that followed this pattern, we might consider defining a macro to eliminate the repetition (see the ‚ÄúMacros‚Äù section in Chapter ).  By implementing the state pattern exactly as it‚Äôs defined for object-oriented languages, we‚Äôre not taking as full advantage of Rust‚Äôs strengths as we could. Let‚Äôs look at some changes we can make to the blog crate that can make invalid states and transitions into compile time errors.  Encoding States and Behavior as Types We‚Äôll show you how to rethink the state pattern to get a different set of trade-offs. Rather than encapsulating the states and transitions completely so outside code has no knowledge of them, we‚Äôll encode the states into different types. Consequently, Rust‚Äôs type checking system will prevent attempts to use draft posts where only published posts are allowed by issuing a compiler error.  Let‚Äôs consider the first part of main in Listing -:  Filename: src/main.rs  We still enable the creation of new posts in the draft state using Post::new and the ability to add text to the post‚Äôs content. But instead of having a content method on a draft post that returns an empty string, we‚Äôll make it so draft posts don‚Äôt have the content method at all. That way, if we try to get a draft post‚Äôs content, we‚Äôll get a compiler error telling us the method doesn‚Äôt exist. As a result, it will be impossible for us to accidentally display draft post content in production, because that code won‚Äôt even compile. Listing - shows the definition of a Post struct and a DraftPost struct, as well as methods on each:  Filename: src/lib.rs  Listing -: A Post with a content method and a DraftPost without a content method  Both the Post and DraftPost structs have a private content field that stores the blog post text. The structs no longer have the state field because we‚Äôre moving the encoding of the state to the types of the structs. The Post struct will represent a published post, and it has a content method that returns the content.  We still have a Post::new function, but instead of returning an instance of Post, it returns an instance of DraftPost. Because content is private and there aren‚Äôt any functions that return Post, it‚Äôs not possible to create an instance of Post right now.  The DraftPost struct has an add_text method, so we can add text to content as before, but note that DraftPost does not have a content method defined! So now the program ensures all posts start as draft posts, and draft posts don‚Äôt have their content available for display. Any attempt to get around these constraints will result in a compiler error.  Implementing Transitions as Transformations into Different Types So how do we get a published post? We want to enforce the rule that a draft post has to be reviewed and approved before it can be published. A post in the pending review state should still not display any content. Let‚Äôs implement these constraints by adding another struct, PendingReviewPost, defining the request_review method on DraftPost to return a PendingReviewPost, and defining an approve method on PendingReviewPost to return a Post, as shown in Listing -:  Filename: src/lib.rs  Listing -: A PendingReviewPost that gets created by calling request_review on DraftPost and an approve method that turns a PendingReviewPost into a published Post  The request_review and approve methods take ownership of self, thus consuming the DraftPost and PendingReviewPost instances and transforming them into a PendingReviewPost and a published Post, respectively. This way, we won‚Äôt have any lingering DraftPost instances after we‚Äôve called request_review on them, and so forth. The PendingReviewPost struct doesn‚Äôt have a content method defined on it, so attempting to read its content results in a compiler error, as with DraftPost. Because the only way to get a published Post instance that does have a content method defined is to call the approve method on a PendingReviewPost, and the only way to get a PendingReviewPost is to call the request_review method on a DraftPost, we‚Äôve now encoded the blog post workflow into the type system.  But we also have to make some small changes to main. The request_review and approve methods return new instances rather than modifying the struct they‚Äôre called on, so we need to add more let post = shadowing assignments to save the returned instances. We also can‚Äôt have the assertions about the draft and pending review posts‚Äô contents be empty strings, nor do we need them: we can‚Äôt compile code that tries to use the content of posts in those states any longer. The updated code in main is shown in Listing -:  Filename: src/main.rs  Listing -: Modifications to main to use the new implementation of the blog post workflow  The changes we needed to make to main to reassign post mean that this implementation doesn‚Äôt quite follow the object-oriented state pattern anymore: the transformations between the states are no longer encapsulated entirely within the Post implementation. However, our gain is that invalid states are now impossible because of the type system and the type checking that happens at compile time! This ensures that certain bugs, such as display of the content of an unpublished post, will be discovered before they make it to production.  Try the tasks suggested at the start of this section on the blog crate as it is after Listing - to see what you think about the design of this version of the code. Note that some of the tasks might be completed already in this design.  We‚Äôve seen that even though Rust is capable of implementing object-oriented design patterns, other patterns, such as encoding state into the type system, are also available in Rust. These patterns have different trade-offs. Although you might be very familiar with object-oriented patterns, rethinking the problem to take advantage of Rust‚Äôs features can provide benefits, such as preventing some bugs at compile time. Object-oriented patterns won‚Äôt always be the best solution in Rust due to certain features, like ownership, that object-oriented languages don‚Äôt have.  Summary No matter whether or not you think Rust is an object-oriented language after reading this chapter, you now know that you can use trait objects to get some object-oriented features in Rust. Dynamic dispatch can give your code some flexibility in exchange for a bit of runtime performance. You can use this flexibility to implement object-oriented patterns that can help your code‚Äôs maintainability. Rust also has other features, like ownership, that object-oriented languages don‚Äôt have. An object-oriented pattern won‚Äôt always be the best way to take advantage of Rust‚Äôs strengths, but is an available option.  Next, we‚Äôll look at patterns, which are another of Rust‚Äôs features that enable lots of flexibility. We‚Äôve looked at them briefly throughout the book but haven‚Äôt seen their full capability yet. Let‚Äôs go!  Patterns and Matching Patterns are a special syntax in Rust for matching against the structure of types, both complex and simple. Using patterns in conjunction with match expressions and other constructs gives you more control over a program‚Äôs control flow. A pattern consists of some combination of the following:  Literals Destructured arrays, enums, structs, or tuples Variables Wildcards Placeholders Some example patterns include x, (a, ), and Some(Color::Red). In the contexts in which patterns are valid, these components describe the shape of data. Our program then matches values against the patterns to determine whether it has the correct shape of data to continue running a particular piece of code.  To use a pattern, we compare it to some value. If the pattern matches the value, we use the value parts in our code. Recall the match expressions in Chapter  that used patterns, such as the coin-sorting machine example. If the value fits the shape of the pattern, we can use the named pieces. If it doesn‚Äôt, the code associated with the pattern won‚Äôt run.  This chapter is a reference on all things related to patterns. We‚Äôll cover the valid places to use patterns, the difference between refutable and irrefutable patterns, and the different kinds of pattern syntax that you might see. By the end of the chapter, you‚Äôll know how to use patterns to express many concepts in a clear way.  All the Places Patterns Can Be Used Patterns pop up in a number of places in Rust, and you‚Äôve been using them a lot without realizing it! This section discusses all the places where patterns are valid.  match Arms As discussed in Chapter , we use patterns in the arms of match expressions. Formally, match expressions are defined as the keyword match, a value to match on, and one or more match arms that consist of a pattern and an expression to run if the value matches that arm‚Äôs pattern, like this:  For example, here's the match expression from Listing - that matches on an Option<i> value in the variable x:  The patterns in this match expression are the None and Some(i) on the left of each arrow.  One requirement for match expressions is that they need to be exhaustive in the sense that all possibilities for the value in the match expression must be accounted for. One way to ensure you‚Äôve covered every possibility is to have a catchall pattern for the last arm: for example, a variable name matching any value can never fail and thus covers every remaining case.  The particular pattern _ will match anything, but it never binds to a variable, so it‚Äôs often used in the last match arm. The _ pattern can be useful when you want to ignore any value not specified, for example. We‚Äôll cover the _ pattern in more detail in the ‚ÄúIgnoring Values in a Pattern‚Äù section later in this chapter.  Conditional if let Expressions In Chapter  we discussed how to use if let expressions mainly as a shorter way to write the equivalent of a match that only matches one case. Optionally, if let can have a corresponding else containing code to run if the pattern in the if let doesn‚Äôt match.  Listing - shows that it‚Äôs also possible to mix and match if let, else if, and else if let expressions. Doing so gives us more flexibility than a match expression in which we can express only one value to compare with the patterns. Also, Rust doesn't require that the conditions in a series of if let, else if, else if let arms relate to each other.  The code in Listing - determines what color to make your background based on a series of checks for several conditions. For this example, we‚Äôve created variables with hardcoded values that a real program might receive from user input.  Filename: src/main.rs  Listing -: Mixing if let, else if, else if let, and else  If the user specifies a favorite color, that color is used as the background. If no favorite color is specified and today is Tuesday, the background color is green. Otherwise, if the user specifies their age as a string and we can parse it as a number successfully, the color is either purple or orange depending on the value of the number. If none of these conditions apply, the background color is blue.  This conditional structure lets us support complex requirements. With the hardcoded values we have here, this example will print Using purple as the background color.  You can see that if let can also introduce shadowed variables in the same way that match arms can: the line if let Ok(age) = age introduces a new shadowed age variable that contains the value inside the Ok variant. This means we need to place the if age >  condition within that block: we can‚Äôt combine these two conditions into if let Ok(age) = age && age > . The shadowed age we want to compare to  isn‚Äôt valid until the new scope starts with the curly bracket.  The downside of using if let expressions is that the compiler doesn‚Äôt check for exhaustiveness, whereas with match expressions it does. If we omitted the last else block and therefore missed handling some cases, the compiler would not alert us to the possible logic bug.  while let Conditional Loops Similar in construction to if let, the while let conditional loop allows a while loop to run for as long as a pattern continues to match. In Listing - we code a while let loop that uses a vector as a stack and prints the values in the vector in the opposite order in which they were pushed.  Listing -: Using a while let loop to print values for as long as stack.pop() returns Some  This example prints , , and then . The pop method takes the last element out of the vector and returns Some(value). If the vector is empty, pop returns None. The while loop continues running the code in its block as long as pop returns Some. When pop returns None, the loop stops. We can use while let to pop every element off our stack.  for Loops In a for loop, the value that directly follows the keyword for is a pattern. For example, in for x in y the x is the pattern. Listing - demonstrates how to use a pattern in a for loop to destructure, or break apart, a tuple as part of the for loop.  Listing -: Using a pattern in a for loop to destructure a tuple  The code in Listing - will print the following:  We adapt an iterator using the enumerate method so it produces a value and the index for that value, placed into a tuple. The first value produced is the tuple (, 'a'). When this value is matched to the pattern (index, value), index will be  and value will be 'a', printing the first line of the output.  let Statements Prior to this chapter, we had only explicitly discussed using patterns with match and if let, but in fact, we‚Äôve used patterns in other places as well, including in let statements. For example, consider this straightforward variable assignment with let:  Every time you've used a let statement like this you've been using patterns, although you might not have realized it! More formally, a let statement looks like this:  In statements like let x = ; with a variable name in the PATTERN slot, the variable name is just a particularly simple form of a pattern. Rust compares the expression against the pattern and assigns any names it finds. So in the let x = ; example, x is a pattern that means ‚Äúbind what matches here to the variable x.‚Äù Because the name x is the whole pattern, this pattern effectively means ‚Äúbind everything to the variable x, whatever the value is.‚Äù  To see the pattern matching aspect of let more clearly, consider Listing -, which uses a pattern with let to destructure a tuple.  Listing -: Using a pattern to destructure a tuple and create three variables at once  Here, we match a tuple against a pattern. Rust compares the value (, , ) to the pattern (x, y, z) and sees that the value matches the pattern, so Rust binds  to x,  to y, and  to z. You can think of this tuple pattern as nesting three individual variable patterns inside it.  If the number of elements in the pattern doesn‚Äôt match the number of elements in the tuple, the overall type won‚Äôt match and we‚Äôll get a compiler error. For example, Listing - shows an attempt to destructure a tuple with three elements into two variables, which won‚Äôt work.  Listing -: Incorrectly constructing a pattern whose variables don‚Äôt match the number of elements in the tuple  Attempting to compile this code results in this type error:  To fix the error, we could ignore one or more of the values in the tuple using _ or .., as you‚Äôll see in the ‚ÄúIgnoring Values in a Pattern‚Äù section. If the problem is that we have too many variables in the pattern, the solution is to make the types match by removing variables so the number of variables equals the number of elements in the tuple.  Function Parameters Function parameters can also be patterns. The code in Listing -, which declares a function named foo that takes one parameter named x of type i, should by now look familiar.  Listing -: A function signature uses patterns in the parameters  The x part is a pattern! As we did with let, we could match a tuple in a function‚Äôs arguments to the pattern. Listing - splits the values in a tuple as we pass it to a function.  Filename: src/main.rs  Listing -: A function with parameters that destructure a tuple  This code prints Current location: (, ). The values &(, ) match the pattern &(x, y), so x is the value  and y is the value .  We can also use patterns in closure parameter lists in the same way as in function parameter lists, because closures are similar to functions, as discussed in Chapter .  At this point, you‚Äôve seen several ways of using patterns, but patterns don‚Äôt work the same in every place we can use them. In some places, the patterns must be irrefutable; in other circumstances, they can be refutable. We‚Äôll discuss these two concepts next.  Refutability: Whether a Pattern Might Fail to Match Patterns come in two forms: refutable and irrefutable. Patterns that will match for any possible value passed are irrefutable. An example would be x in the statement let x = ; because x matches anything and therefore cannot fail to match. Patterns that can fail to match for some possible value are refutable. An example would be Some(x) in the expression if let Some(x) = a_value because if the value in the a_value variable is None rather than Some, the Some(x) pattern will not match.  Function parameters, let statements, and for loops can only accept irrefutable patterns, because the program cannot do anything meaningful when values don‚Äôt match. The if let and while let expressions accept refutable and irrefutable patterns, but the compiler warns against irrefutable patterns because by definition they‚Äôre intended to handle possible failure: the functionality of a conditional is in its ability to perform differently depending on success or failure.  In general, you shouldn‚Äôt have to worry about the distinction between refutable and irrefutable patterns; however, you do need to be familiar with the concept of refutability so you can respond when you see it in an error message. In those cases, you‚Äôll need to change either the pattern or the construct you‚Äôre using the pattern with, depending on the intended behavior of the code.  Let‚Äôs look at an example of what happens when we try to use a refutable pattern where Rust requires an irrefutable pattern and vice versa. Listing - shows a let statement, but for the pattern we‚Äôve specified Some(x), a refutable pattern. As you might expect, this code will not compile.  Listing -: Attempting to use a refutable pattern with let  If some_option_value was a None value, it would fail to match the pattern Some(x), meaning the pattern is refutable. However, the let statement can only accept an irrefutable pattern because there is nothing valid the code can do with a None value. At compile time, Rust will complain that we‚Äôve tried to use a refutable pattern where an irrefutable pattern is required:  Because we didn‚Äôt cover (and couldn‚Äôt cover!) every valid value with the pattern Some(x), Rust rightfully produces a compiler error.  If we have a refutable pattern where an irrefutable pattern is needed, we can fix it by changing the code that uses the pattern: instead of using let, we can use if let. Then if the pattern doesn‚Äôt match, the code will just skip the code in the curly brackets, giving it a way to continue validly. Listing - shows how to fix the code in Listing -.  Listing -: Using if let and a block with refutable patterns instead of let  We‚Äôve given the code an out! This code is perfectly valid now. However, if we give if let an irrefutable pattern (a pattern that will always match), such as x, as shown in Listing -, the compiler will give a warning.  Listing -: Attempting to use an irrefutable pattern with if let  Rust complains that it doesn‚Äôt make sense to use if let with an irrefutable pattern:  For this reason, match arms must use refutable patterns, except for the last arm, which should match any remaining values with an irrefutable pattern. Rust allows us to use an irrefutable pattern in a match with only one arm, but this syntax isn‚Äôt particularly useful and could be replaced with a simpler let statement.  Now that you know where to use patterns and the difference between refutable and irrefutable patterns, let‚Äôs cover all the syntax we can use to create patterns.  Pattern Syntax In this section, we gather all the syntax valid in patterns and discuss why and when you might want to use each one.  Matching Literals As you saw in Chapter , you can match patterns against literals directly. The following code gives some examples:  This code prints one because the value in x is . This syntax is useful when you want your code to take an action if it gets a particular concrete value.  Matching Named Variables Named variables are irrefutable patterns that match any value, and we‚Äôve used them many times in the book. However, there is a complication when you use named variables in match expressions. Because match starts a new scope, variables declared as part of a pattern inside the match expression will shadow those with the same name outside the match construct, as is the case with all variables. In Listing -, we declare a variable named x with the value Some() and a variable y with the value . We then create a match expression on the value x. Look at the patterns in the match arms and println! at the end, and try to figure out what the code will print before running this code or reading further.  Filename: src/main.rs  Listing -: A match expression with an arm that introduces a shadowed variable y  Let‚Äôs walk through what happens when the match expression runs. The pattern in the first match arm doesn‚Äôt match the defined value of x, so the code continues.  The pattern in the second match arm introduces a new variable named y that will match any value inside a Some value. Because we‚Äôre in a new scope inside the match expression, this is a new y variable, not the y we declared at the beginning with the value . This new y binding will match any value inside a Some, which is what we have in x. Therefore, this new y binds to the inner value of the Some in x. That value is , so the expression for that arm executes and prints Matched, y = .  If x had been a None value instead of Some(), the patterns in the first two arms wouldn‚Äôt have matched, so the value would have matched to the underscore. We didn‚Äôt introduce the x variable in the pattern of the underscore arm, so the x in the expression is still the outer x that hasn‚Äôt been shadowed. In this hypothetical case, the match would print Default case, x = None.  When the match expression is done, its scope ends, and so does the scope of the inner y. The last println! produces at the end: x = Some(), y = .  To create a match expression that compares the values of the outer x and y, rather than introducing a shadowed variable, we would need to use a match guard conditional instead. We‚Äôll talk about match guards later in the ‚ÄúExtra Conditionals with Match Guards‚Äù section.  Multiple Patterns In match expressions, you can match multiple patterns using the | syntax, which is the pattern or operator. For example, in the following code we match the value of x against the match arms, the first of which has an or option, meaning if the value of x matches either of the values in that arm, that arm‚Äôs code will run:  This code prints one or two.  Matching Ranges of Values with ..= The ..= syntax allows us to match to an inclusive range of values. In the following code, when a pattern matches any of the values within the given range, that arm will execute:  If x is , , , , or , the first arm will match. This syntax is more convenient for multiple match values than using the | operator to express the same idea; if we were to use | we would have to specify  |  |  |  | . Specifying a range is much shorter, especially if we want to match, say, any number between  and ,!  The compiler checks that the range isn‚Äôt empty at compile time, and because the only types for which Rust can tell if a range is empty or not are char and numeric values, ranges are only allowed with numeric or char values.  Here is an example using ranges of char values:  Rust can tell that 'c' is within the first pattern‚Äôs range and prints early ASCII letter.  Destructuring to Break Apart Values We can also use patterns to destructure structs, enums, and tuples to use different parts of these values. Let‚Äôs walk through each value.  Destructuring Structs Listing - shows a Point struct with two fields, x and y, that we can break apart using a pattern with a let statement.  Filename: src/main.rs  Listing -: Destructuring a struct‚Äôs fields into separate variables  This code creates the variables a and b that match the values of the x and y fields of the p struct. This example shows that the names of the variables in the pattern don‚Äôt have to match the field names of the struct. However, it‚Äôs common to match the variable names to the field names to make it easier to remember which variables came from which fields. Because of this common usage, and because writing let Point { x: x, y: y } = p; contains a lot of duplication, Rust has a shorthand for patterns that match struct fields: you only need to list the name of the struct field, and the variables created from the pattern will have the same names. Listing - behaves in the same way as the code in Listing -, but the variables created in the let pattern are x and y instead of a and b.  Filename: src/main.rs  Listing -: Destructuring struct fields using struct field shorthand  This code creates the variables x and y that match the x and y fields of the p variable. The outcome is that the variables x and y contain the values from the p struct.  We can also destructure with literal values as part of the struct pattern rather than creating variables for all the fields. Doing so allows us to test some of the fields for particular values while creating variables to destructure the other fields.  In Listing -, we have a match expression that separates Point values into three cases: points that lie directly on the x axis (which is true when y = ), on the y axis (x = ), or neither.  Filename: src/main.rs  Listing -: Destructuring and matching literal values in one pattern  The first arm will match any point that lies on the x axis by specifying that the y field matches if its value matches the literal . The pattern still creates an x variable that we can use in the code for this arm.  Similarly, the second arm matches any point on the y axis by specifying that the x field matches if its value is  and creates a variable y for the value of the y field. The third arm doesn‚Äôt specify any literals, so it matches any other Point and creates variables for both the x and y fields.  In this example, the value p matches the second arm by virtue of x containing a , so this code will print On the y axis at .  Remember that a match expression stops checking arms once it has found the first matching pattern, so even though Point { x: , y: } is on the x axis and the y axis, this code would only print On the x axis at .  Destructuring Enums We've destructured enums in this book (for example, Listing - in Chapter ), but haven‚Äôt yet explicitly discussed that the pattern to destructure an enum corresponds to the way the data stored within the enum is defined. As an example, in Listing - we use the Message enum from Listing - and write a match with patterns that will destructure each inner value.  Filename: src/main.rs  Listing -: Destructuring enum variants that hold different kinds of values  This code will print Change the color to red , green , and blue . Try changing the value of msg to see the code from the other arms run.  For enum variants without any data, like Message::Quit, we can‚Äôt destructure the value any further. We can only match on the literal Message::Quit value, and no variables are in that pattern.  For struct-like enum variants, such as Message::Move, we can use a pattern similar to the pattern we specify to match structs. After the variant name, we place curly brackets and then list the fields with variables so we break apart the pieces to use in the code for this arm. Here we use the shorthand form as we did in Listing -.  For tuple-like enum variants, like Message::Write that holds a tuple with one element and Message::ChangeColor that holds a tuple with three elements, the pattern is similar to the pattern we specify to match tuples. The number of variables in the pattern must match the number of elements in the variant we‚Äôre matching.  Destructuring Nested Structs and Enums So far, our examples have all been matching structs or enums one level deep, but matching can work on nested items too! For example, we can refactor the code in Listing - to support RGB and HSV colors in the ChangeColor message, as shown in Listing -.  Listing -: Matching on nested enums  The pattern of the first arm in the match expression matches a Message::ChangeColor enum variant that contains a Color::Rgb variant; then the pattern binds to the three inner i values. The pattern of the second arm also matches a Message::ChangeColor enum variant, but the inner enum matches Color::Hsv instead. We can specify these complex conditions in one match expression, even though two enums are involved.  Destructuring Structs and Tuples We can mix, match, and nest destructuring patterns in even more complex ways. The following example shows a complicated destructure where we nest structs and tuples inside a tuple and destructure all the primitive values out:  This code lets us break complex types into their component parts so we can use the values we‚Äôre interested in separately.  Destructuring with patterns is a convenient way to use pieces of values, such as the value from each field in a struct, separately from each other.  Ignoring Values in a Pattern You‚Äôve seen that it‚Äôs sometimes useful to ignore values in a pattern, such as in the last arm of a match, to get a catchall that doesn‚Äôt actually do anything but does account for all remaining possible values. There are a few ways to ignore entire values or parts of values in a pattern: using the _ pattern (which you‚Äôve seen), using the _ pattern within another pattern, using a name that starts with an underscore, or using .. to ignore remaining parts of a value. Let‚Äôs explore how and why to use each of these patterns.  Ignoring an Entire Value with _ We‚Äôve used the underscore as a wildcard pattern that will match any value but not bind to the value. This is especially useful as the last arm in a match expression, but we can also use it in any pattern, including function parameters, as shown in Listing -.  Filename: src/main.rs  Listing -: Using _ in a function signature  This code will completely ignore the value  passed as the first argument, and will print This code only uses the y parameter: .  In most cases when you no longer need a particular function parameter, you would change the signature so it doesn‚Äôt include the unused parameter. Ignoring a function parameter can be especially useful in cases when, for example, you're implementing a trait when you need a certain type signature but the function body in your implementation doesn‚Äôt need one of the parameters. You then avoid getting a compiler warning about unused function parameters, as you would if you used a name instead.  Ignoring Parts of a Value with a Nested _ We can also use _ inside another pattern to ignore just part of a value, for example, when we want to test for only part of a value but have no use for the other parts in the corresponding code we want to run. Listing - shows code responsible for managing a setting‚Äôs value. The business requirements are that the user should not be allowed to overwrite an existing customization of a setting but can unset the setting and give it a value if it is currently unset.  Listing -: Using an underscore within patterns that match Some variants when we don‚Äôt need to use the value inside the Some  This code will print Can't overwrite an existing customized value and then setting is Some(). In the first match arm, we don‚Äôt need to match on or use the values inside either Some variant, but we do need to test for the case when setting_value and new_setting_value are the Some variant. In that case, we print the reason for not changing setting_value, and it doesn‚Äôt get changed.  In all other cases (if either setting_value or new_setting_value are None) expressed by the _ pattern in the second arm, we want to allow new_setting_value to become setting_value.  We can also use underscores in multiple places within one pattern to ignore particular values. Listing - shows an example of ignoring the second and fourth values in a tuple of five items.  Listing -: Ignoring multiple parts of a tuple  This code will print Some numbers: , , , and the values  and  will be ignored.  Ignoring an Unused Variable by Starting Its Name with _ If you create a variable but don‚Äôt use it anywhere, Rust will usually issue a warning because an unused variable could be a bug. However, sometimes it‚Äôs useful to be able to create a variable you won‚Äôt use yet, such as when you‚Äôre prototyping or just starting a project. In this situation, you can tell Rust not to warn you about the unused variable by starting the name of the variable with an underscore. In Listing -, we create two unused variables, but when we compile this code, we should only get a warning about one of them.  Filename: src/main.rs  Listing -: Starting a variable name with an underscore to avoid getting unused variable warnings  Here we get a warning about not using the variable y, but we don‚Äôt get a warning about not using _x.  Note that there is a subtle difference between using only _ and using a name that starts with an underscore. The syntax _x still binds the value to the variable, whereas _ doesn‚Äôt bind at all. To show a case where this distinction matters, Listing - will provide us with an error.  Listing -: An unused variable starting with an underscore still binds the value, which might take ownership of the value  We‚Äôll receive an error because the s value will still be moved into _s, which prevents us from using s again. However, using the underscore by itself doesn‚Äôt ever bind to the value. Listing - will compile without any errors because s doesn‚Äôt get moved into _.  Listing -: Using an underscore does not bind the value  This code works just fine because we never bind s to anything; it isn‚Äôt moved.  Ignoring Remaining Parts of a Value with .. With values that have many parts, we can use the .. syntax to use specific parts and ignore the rest, avoiding the need to list underscores for each ignored value. The .. pattern ignores any parts of a value that we haven‚Äôt explicitly matched in the rest of the pattern. In Listing -, we have a Point struct that holds a coordinate in three-dimensional space. In the match expression, we want to operate only on the x coordinate and ignore the values in the y and z fields.  Listing -: Ignoring all fields of a Point except for x by using ..  We list the x value and then just include the .. pattern. This is quicker than having to list y: _ and z: _, particularly when we‚Äôre working with structs that have lots of fields in situations where only one or two fields are relevant.  The syntax .. will expand to as many values as it needs to be. Listing - shows how to use .. with a tuple.  Filename: src/main.rs  Listing -: Matching only the first and last values in a tuple and ignoring all other values  In this code, the first and last value are matched with first and last. The .. will match and ignore everything in the middle.  However, using .. must be unambiguous. If it is unclear which values are intended for matching and which should be ignored, Rust will give us an error. Listing - shows an example of using .. ambiguously, so it will not compile.  Filename: src/main.rs  Listing -: An attempt to use .. in an ambiguous way  When we compile this example, we get this error:  It‚Äôs impossible for Rust to determine how many values in the tuple to ignore before matching a value with second and then how many further values to ignore thereafter. This code could mean that we want to ignore , bind second to , and then ignore , , and ; or that we want to ignore  and , bind second to , and then ignore  and ; and so forth. The variable name second doesn‚Äôt mean anything special to Rust, so we get a compiler error because using .. in two places like this is ambiguous.  Extra Conditionals with Match Guards A match guard is an additional if condition, specified after the pattern in a match arm, that must also match for that arm to be chosen. Match guards are useful for expressing more complex ideas than a pattern alone allows.  The condition can use variables created in the pattern. Listing - shows a match where the first arm has the pattern Some(x) and also has a match guard of if x %  ==  (which will be true if the number is even).  Listing -: Adding a match guard to a pattern  This example will print The number  is even. When num is compared to the pattern in the first arm, it matches, because Some() matches Some(x). Then the match guard checks whether the remainder of dividing x by  is equal to , and because it is, the first arm is selected.  If num had been Some() instead, the match guard in the first arm would have been false because the remainder of  divided by  is , which is not equal to . Rust would then go to the second arm, which would match because the second arm doesn‚Äôt have a match guard and therefore matches any Some variant.  There is no way to express the if x %  ==  condition within a pattern, so the match guard gives us the ability to express this logic. The downside of this additional expressiveness is that the compiler doesn't try to check for exhaustiveness when match guard expressions are involved.  In Listing -, we mentioned that we could use match guards to solve our pattern-shadowing problem. Recall that we created a new variable inside the pattern in the match expression instead of using the variable outside the match. That new variable meant we couldn‚Äôt test against the value of the outer variable. Listing - shows how we can use a match guard to fix this problem.  Filename: src/main.rs  Listing -: Using a match guard to test for equality with an outer variable  This code will now print Default case, x = Some(). The pattern in the second match arm doesn‚Äôt introduce a new variable y that would shadow the outer y, meaning we can use the outer y in the match guard. Instead of specifying the pattern as Some(y), which would have shadowed the outer y, we specify Some(n). This creates a new variable n that doesn‚Äôt shadow anything because there is no n variable outside the match.  The match guard if n == y is not a pattern and therefore doesn‚Äôt introduce new variables. This y is the outer y rather than a new shadowed y, and we can look for a value that has the same value as the outer y by comparing n to y.  You can also use the or operator | in a match guard to specify multiple patterns; the match guard condition will apply to all the patterns. Listing - shows the precedence when combining a pattern that uses | with a match guard. The important part of this example is that the if y match guard applies to , , and , even though it might look like if y only applies to .  Listing -: Combining multiple patterns with a match guard  The match condition states that the arm only matches if the value of x is equal to , , or  and if y is true. When this code runs, the pattern of the first arm matches because x is , but the match guard if y is false, so the first arm is not chosen. The code moves on to the second arm, which does match, and this program prints no. The reason is that the if condition applies to the whole pattern  |  | , not only to the last value . In other words, the precedence of a match guard in relation to a pattern behaves like this:  rather than this:  After running the code, the precedence behavior is evident: if the match guard were applied only to the final value in the list of values specified using the | operator, the arm would have matched and the program would have printed yes.  @ Bindings The at operator @ lets us create a variable that holds a value at the same time as we‚Äôre testing that value for a pattern match. In Listing -, we want to test that a Message::Hello id field is within the range ..=. We also want to bind the value to the variable id_variable so we can use it in the code associated with the arm. We could name this variable id, the same as the field, but for this example we‚Äôll use a different name.  Listing -: Using @ to bind to a value in a pattern while also testing it  This example will print Found an id in range: . By specifying id_variable @ before the range ..=, we‚Äôre capturing whatever value matched the range while also testing that the value matched the range pattern.  In the second arm, where we only have a range specified in the pattern, the code associated with the arm doesn‚Äôt have a variable that contains the actual value of the id field. The id field‚Äôs value could have been , , or , but the code that goes with that pattern doesn‚Äôt know which it is. The pattern code isn‚Äôt able to use the value from the id field, because we haven‚Äôt saved the id value in a variable.  In the last arm, where we‚Äôve specified a variable without a range, we do have the value available to use in the arm‚Äôs code in a variable named id. The reason is that we‚Äôve used the struct field shorthand syntax. But we haven‚Äôt applied any test to the value in the id field in this arm, as we did with the first two arms: any value would match this pattern.  Using @ lets us test a value and save it in a variable within one pattern.  Summary Rust‚Äôs patterns are very useful in distinguishing between different kinds of data. When used in match expressions, Rust ensures your patterns cover every possible value, or your program won‚Äôt compile. Patterns in let statements and function parameters make those constructs more useful, enabling the destructuring of values into smaller parts at the same time as assigning to variables. We can create simple or complex patterns to suit our needs.  Next, for the penultimate chapter of the book, we‚Äôll look at some advanced aspects of a variety of Rust‚Äôs features.  Advanced Features By now, you‚Äôve learned the most commonly used parts of the Rust programming language. Before we do one more project in Chapter , we‚Äôll look at a few aspects of the language you might run into every once in a while, but may not use every day. You can use this chapter as a reference for when you encounter any unknowns. The features covered here are useful in very specific situations. Although you might not reach for them often, we want to make sure you have a grasp of all the features Rust has to offer.  In this chapter, we‚Äôll cover:  Unsafe Rust: how to opt out of some of Rust‚Äôs guarantees and take responsibility for manually upholding those guarantees Advanced traits: associated types, default type parameters, fully qualified syntax, supertraits, and the newtype pattern in relation to traits Advanced types: more about the newtype pattern, type aliases, the never type, and dynamically sized types Advanced functions and closures: function pointers and returning closures Macros: ways to define code that defines more code at compile time It‚Äôs a panoply of Rust features with something for everyone! Let‚Äôs dive in!  Unsafe Rust All the code we‚Äôve discussed so far has had Rust‚Äôs memory safety guarantees enforced at compile time. However, Rust has a second language hidden inside it that doesn‚Äôt enforce these memory safety guarantees: it‚Äôs called unsafe Rust and works just like regular Rust, but gives us extra superpowers.  Unsafe Rust exists because, by nature, static analysis is conservative. When the compiler tries to determine whether or not code upholds the guarantees, it‚Äôs better for it to reject some valid programs than to accept some invalid programs. Although the code might be okay, if the Rust compiler doesn‚Äôt have enough information to be confident, it will reject the code. In these cases, you can use unsafe code to tell the compiler, ‚ÄúTrust me, I know what I‚Äôm doing.‚Äù Be warned, however, that you use unsafe Rust at your own risk: if you use unsafe code incorrectly, problems can occur due to memory unsafety, such as null pointer dereferencing.  Another reason Rust has an unsafe alter ego is that the underlying computer hardware is inherently unsafe. If Rust didn‚Äôt let you do unsafe operations, you couldn‚Äôt do certain tasks. Rust needs to allow you to do low-level systems programming, such as directly interacting with the operating system or even writing your own operating system. Working with low-level systems programming is one of the goals of the language. Let‚Äôs explore what we can do with unsafe Rust and how to do it.  Unsafe Superpowers To switch to unsafe Rust, use the unsafe keyword and then start a new block that holds the unsafe code. You can take five actions in unsafe Rust that you can‚Äôt in safe Rust, which we call unsafe superpowers. Those superpowers include the ability to:  Dereference a raw pointer Call an unsafe function or method Access or modify a mutable static variable Implement an unsafe trait Access fields of a union It‚Äôs important to understand that unsafe doesn‚Äôt turn off the borrow checker or disable any other of Rust‚Äôs safety checks: if you use a reference in unsafe code, it will still be checked. The unsafe keyword only gives you access to these five features that are then not checked by the compiler for memory safety. You‚Äôll still get some degree of safety inside of an unsafe block.  In addition, unsafe does not mean the code inside the block is necessarily dangerous or that it will definitely have memory safety problems: the intent is that as the programmer, you‚Äôll ensure the code inside an unsafe block will access memory in a valid way.  People are fallible, and mistakes will happen, but by requiring these five unsafe operations to be inside blocks annotated with unsafe you‚Äôll know that any errors related to memory safety must be within an unsafe block. Keep unsafe blocks small; you‚Äôll be thankful later when you investigate memory bugs.  To isolate unsafe code as much as possible, it‚Äôs best to enclose unsafe code within a safe abstraction and provide a safe API, which we‚Äôll discuss later in the chapter when we examine unsafe functions and methods. Parts of the standard library are implemented as safe abstractions over unsafe code that has been audited. Wrapping unsafe code in a safe abstraction prevents uses of unsafe from leaking out into all the places that you or your users might want to use the functionality implemented with unsafe code, because using a safe abstraction is safe.  Let‚Äôs look at each of the five unsafe superpowers in turn. We‚Äôll also look at some abstractions that provide a safe interface to unsafe code.  Dereferencing a Raw Pointer In Chapter , in the ‚ÄúDangling References‚Äù section, we mentioned that the compiler ensures references are always valid. Unsafe Rust has two new types called raw pointers that are similar to references. As with references, raw pointers can be immutable or mutable and are written as *const T and *mut T, respectively. The asterisk isn‚Äôt the dereference operator; it‚Äôs part of the type name. In the context of raw pointers, immutable means that the pointer can‚Äôt be directly assigned to after being dereferenced.  Different from references and smart pointers, raw pointers:  Are allowed to ignore the borrowing rules by having both immutable and mutable pointers or multiple mutable pointers to the same location Aren‚Äôt guaranteed to point to valid memory Are allowed to be null Don‚Äôt implement any automatic cleanup By opting out of having Rust enforce these guarantees, you can give up guaranteed safety in exchange for greater performance or the ability to interface with another language or hardware where Rust‚Äôs guarantees don‚Äôt apply.  Listing - shows how to create an immutable and a mutable raw pointer from references.  Listing -: Creating raw pointers from references  Notice that we don‚Äôt include the unsafe keyword in this code. We can create raw pointers in safe code; we just can‚Äôt dereference raw pointers outside an unsafe block, as you‚Äôll see in a bit.  We‚Äôve created raw pointers by using as to cast an immutable and a mutable reference into their corresponding raw pointer types. Because we created them directly from references guaranteed to be valid, we know these particular raw pointers are valid, but we can‚Äôt make that assumption about just any raw pointer.  To demonstrate this, next we‚Äôll create a raw pointer whose validity we can‚Äôt be so certain of. Listing - shows how to create a raw pointer to an arbitrary location in memory. Trying to use arbitrary memory is undefined: there might be data at that address or there might not, the compiler might optimize the code so there is no memory access, or the program might error with a segmentation fault. Usually, there is no good reason to write code like this, but it is possible.  Listing -: Creating a raw pointer to an arbitrary memory address  Recall that we can create raw pointers in safe code, but we can‚Äôt dereference raw pointers and read the data being pointed to. In Listing -, we use the dereference operator * on a raw pointer that requires an unsafe block.  Listing -: Dereferencing raw pointers within an unsafe block  Creating a pointer does no harm; it‚Äôs only when we try to access the value that it points at that we might end up dealing with an invalid value.  Note also that in Listing - and -, we created *const i and *mut i raw pointers that both pointed to the same memory location, where num is stored. If we instead tried to create an immutable and a mutable reference to num, the code would not have compiled because Rust‚Äôs ownership rules don‚Äôt allow a mutable reference at the same time as any immutable references. With raw pointers, we can create a mutable pointer and an immutable pointer to the same location and change data through the mutable pointer, potentially creating a data race. Be careful!  With all of these dangers, why would you ever use raw pointers? One major use case is when interfacing with C code, as you‚Äôll see in the next section, ‚ÄúCalling an Unsafe Function or Method.‚Äù Another case is when building up safe abstractions that the borrow checker doesn‚Äôt understand. We‚Äôll introduce unsafe functions and then look at an example of a safe abstraction that uses unsafe code.  Calling an Unsafe Function or Method The second type of operation you can perform in an unsafe block is calling unsafe functions. Unsafe functions and methods look exactly like regular functions and methods, but they have an extra unsafe before the rest of the definition. The unsafe keyword in this context indicates the function has requirements we need to uphold when we call this function, because Rust can‚Äôt guarantee we‚Äôve met these requirements. By calling an unsafe function within an unsafe block, we‚Äôre saying that we‚Äôve read this function‚Äôs documentation and take responsibility for upholding the function‚Äôs contracts.  Here is an unsafe function named dangerous that doesn‚Äôt do anything in its body:  We must call the dangerous function within a separate unsafe block. If we try to call dangerous without the unsafe block, we‚Äôll get an error:  With the unsafe block, we‚Äôre asserting to Rust that we‚Äôve read the function‚Äôs documentation, we understand how to use it properly, and we‚Äôve verified that we‚Äôre fulfilling the contract of the function.  Bodies of unsafe functions are effectively unsafe blocks, so to perform other unsafe operations within an unsafe function, we don‚Äôt need to add another unsafe block.  Creating a Safe Abstraction over Unsafe Code Just because a function contains unsafe code doesn‚Äôt mean we need to mark the entire function as unsafe. In fact, wrapping unsafe code in a safe function is a common abstraction. As an example, let‚Äôs study the split_at_mut function from the standard library, which requires some unsafe code. We‚Äôll explore how we might implement it. This safe method is defined on mutable slices: it takes one slice and makes it two by splitting the slice at the index given as an argument. Listing - shows how to use split_at_mut.  Listing -: Using the safe split_at_mut function  We can‚Äôt implement this function using only safe Rust. An attempt might look something like Listing -, which won‚Äôt compile. For simplicity, we‚Äôll implement split_at_mut as a function rather than a method and only for slices of i values rather than for a generic type T.  Listing -: An attempted implementation of split_at_mut using only safe Rust  This function first gets the total length of the slice. Then it asserts that the index given as a parameter is within the slice by checking whether it‚Äôs less than or equal to the length. The assertion means that if we pass an index that is greater than the length to split the slice at, the function will panic before it attempts to use that index.  Then we return two mutable slices in a tuple: one from the start of the original slice to the mid index and another from mid to the end of the slice.  When we try to compile the code in Listing -, we‚Äôll get an error.  Rust‚Äôs borrow checker can‚Äôt understand that we‚Äôre borrowing different parts of the slice; it only knows that we‚Äôre borrowing from the same slice twice. Borrowing different parts of a slice is fundamentally okay because the two slices aren‚Äôt overlapping, but Rust isn‚Äôt smart enough to know this. When we know code is okay, but Rust doesn‚Äôt, it‚Äôs time to reach for unsafe code.  Listing - shows how to use an unsafe block, a raw pointer, and some calls to unsafe functions to make the implementation of split_at_mut work.  Listing -: Using unsafe code in the implementation of the split_at_mut function  Recall from ‚ÄúThe Slice Type‚Äù section in Chapter  that slices are a pointer to some data and the length of the slice. We use the len method to get the length of a slice and the as_mut_ptr method to access the raw pointer of a slice. In this case, because we have a mutable slice to i values, as_mut_ptr returns a raw pointer with the type *mut i, which we‚Äôve stored in the variable ptr.  We keep the assertion that the mid index is within the slice. Then we get to the unsafe code: the slice::from_raw_parts_mut function takes a raw pointer and a length, and it creates a slice. We use this function to create a slice that starts from ptr and is mid items long. Then we call the add method on ptr with mid as an argument to get a raw pointer that starts at mid, and we create a slice using that pointer and the remaining number of items after mid as the length.  The function slice::from_raw_parts_mut is unsafe because it takes a raw pointer and must trust that this pointer is valid. The add method on raw pointers is also unsafe, because it must trust that the offset location is also a valid pointer. Therefore, we had to put an unsafe block around our calls to slice::from_raw_parts_mut and add so we could call them. By looking at the code and by adding the assertion that mid must be less than or equal to len, we can tell that all the raw pointers used within the unsafe block will be valid pointers to data within the slice. This is an acceptable and appropriate use of unsafe.  Note that we don‚Äôt need to mark the resulting split_at_mut function as unsafe, and we can call this function from safe Rust. We‚Äôve created a safe abstraction to the unsafe code with an implementation of the function that uses unsafe code in a safe way, because it creates only valid pointers from the data this function has access to.  In contrast, the use of slice::from_raw_parts_mut in Listing - would likely crash when the slice is used. This code takes an arbitrary memory location and creates a slice , items long.  Listing -: Creating a slice from an arbitrary memory location  We don‚Äôt own the memory at this arbitrary location, and there is no guarantee that the slice this code creates contains valid i values. Attempting to use values as though it‚Äôs a valid slice results in undefined behavior.  Using extern Functions to Call External Code Sometimes, your Rust code might need to interact with code written in another language. For this, Rust has the keyword extern that facilitates the creation and use of a Foreign Function Interface (FFI). An FFI is a way for a programming language to define functions and enable a different (foreign) programming language to call those functions.  Listing - demonstrates how to set up an integration with the abs function from the C standard library. Functions declared within extern blocks are always unsafe to call from Rust code. The reason is that other languages don‚Äôt enforce Rust‚Äôs rules and guarantees, and Rust can‚Äôt check them, so responsibility falls on the programmer to ensure safety.  Filename: src/main.rs  Listing -: Declaring and calling an extern function defined in another language  Within the extern "C" block, we list the names and signatures of external functions from another language we want to call. The "C" part defines which application binary interface (ABI) the external function uses: the ABI defines how to call the function at the assembly level. The "C" ABI is the most common and follows the C programming language‚Äôs ABI.  Calling Rust Functions from Other Languages We can also use extern to create an interface that allows other languages to call Rust functions. Instead of creating a whole extern block, we add the extern keyword and specify the ABI to use just before the fn keyword for the relevant function. We also need to add a #[no_mangle] annotation to tell the Rust compiler not to mangle the name of this function. Mangling is when a compiler changes the name we‚Äôve given a function to a different name that contains more information for other parts of the compilation process to consume but is less human readable. Every programming language compiler mangles names slightly differently, so for a Rust function to be nameable by other languages, we must disable the Rust compiler‚Äôs name mangling.  In the following example, we make the call_from_c function accessible from C code, after it‚Äôs compiled to a shared library and linked from C:  This usage of extern does not require unsafe.  Accessing or Modifying a Mutable Static Variable In this book, we‚Äôve not yet talked about global variables, which Rust does support but can be problematic with Rust‚Äôs ownership rules. If two threads are accessing the same mutable global variable, it can cause a data race.  In Rust, global variables are called static variables. Listing - shows an example declaration and use of a static variable with a string slice as a value.  Filename: src/main.rs  Listing -: Defining and using an immutable static variable  Static variables are similar to constants, which we discussed in the ‚ÄúDifferences Between Variables and Constants‚Äù section in Chapter . The names of static variables are in SCREAMING_SNAKE_CASE by convention. Static variables can only store references with the 'static lifetime, which means the Rust compiler can figure out the lifetime and we aren‚Äôt required to annotate it explicitly. Accessing an immutable static variable is safe.  A subtle difference between constants and immutable static variables is that values in a static variable have a fixed address in memory. Using the value will always access the same data. Constants, on the other hand, are allowed to duplicate their data whenever they‚Äôre used. Another difference is that static variables can be mutable. Accessing and modifying mutable static variables is unsafe. Listing - shows how to declare, access, and modify a mutable static variable named COUNTER.  Filename: src/main.rs  Listing -: Reading from or writing to a mutable static variable is unsafe  As with regular variables, we specify mutability using the mut keyword. Any code that reads or writes from COUNTER must be within an unsafe block. This code compiles and prints COUNTER:  as we would expect because it‚Äôs single threaded. Having multiple threads access COUNTER would likely result in data races.  With mutable data that is globally accessible, it‚Äôs difficult to ensure there are no data races, which is why Rust considers mutable static variables to be unsafe. Where possible, it‚Äôs preferable to use the concurrency techniques and thread-safe smart pointers we discussed in Chapter  so the compiler checks that data accessed from different threads is done safely.  Implementing an Unsafe Trait We can use unsafe to implement an unsafe trait. A trait is unsafe when at least one of its methods has some invariant that the compiler can‚Äôt verify. We declare that a trait is unsafe by adding the unsafe keyword before trait and marking the implementation of the trait as unsafe too, as shown in Listing -.  Listing -: Defining and implementing an unsafe trait  By using unsafe impl, we‚Äôre promising that we‚Äôll uphold the invariants that the compiler can‚Äôt verify.  As an example, recall the Sync and Send marker traits we discussed in the ‚ÄúExtensible Concurrency with the Sync and Send Traits‚Äù section in Chapter : the compiler implements these traits automatically if our types are composed entirely of Send and Sync types. If we implement a type that contains a type that is not Send or Sync, such as raw pointers, and we want to mark that type as Send or Sync, we must use unsafe. Rust can‚Äôt verify that our type upholds the guarantees that it can be safely sent across threads or accessed from multiple threads; therefore, we need to do those checks manually and indicate as such with unsafe.  Accessing Fields of a Union The final action that works only with unsafe is accessing fields of a union. A union is similar to a struct, but only one declared field is used in a particular instance at one time. Unions are primarily used to interface with unions in C code. Accessing union fields is unsafe because Rust can‚Äôt guarantee the type of the data currently being stored in the union instance. You can learn more about unions in the Rust Reference.  When to Use Unsafe Code Using unsafe to take one of the five actions (superpowers) just discussed isn‚Äôt wrong or even frowned upon. But it is trickier to get unsafe code correct because the compiler can‚Äôt help uphold memory safety. When you have a reason to use unsafe code, you can do so, and having the explicit unsafe annotation makes it easier to track down the source of problems when they occur.  Advanced Traits We first covered traits in the ‚ÄúTraits: Defining Shared Behavior‚Äù section of Chapter , but we didn‚Äôt discuss the more advanced details. Now that you know more about Rust, we can get into the nitty-gritty.  Specifying Placeholder Types in Trait Definitions with Associated Types Associated types connect a type placeholder with a trait such that the trait method definitions can use these placeholder types in their signatures. The implementor of a trait will specify the concrete type to be used instead of the placeholder type for the particular implementation. That way, we can define a trait that uses some types without needing to know exactly what those types are until the trait is implemented.  We‚Äôve described most of the advanced features in this chapter as being rarely needed. Associated types are somewhere in the middle: they‚Äôre used more rarely than features explained in the rest of the book but more commonly than many of the other features discussed in this chapter.  One example of a trait with an associated type is the Iterator trait that the standard library provides. The associated type is named Item and stands in for the type of the values the type implementing the Iterator trait is iterating over. The definition of the Iterator trait is as shown in Listing -.  Listing -: The definition of the Iterator trait that has an associated type Item  The type Item is a placeholder, and the next method‚Äôs definition shows that it will return values of type Option<Self::Item>. Implementors of the Iterator trait will specify the concrete type for Item, and the next method will return an Option containing a value of that concrete type.  Associated types might seem like a similar concept to generics, in that the latter allow us to define a function without specifying what types it can handle. To examine the difference between the two concepts, we‚Äôll look at an implementation of the Iterator trait on a type named Counter that specifies the Item type is u:  Filename: src/lib.rs  This syntax seems comparable to that of generics. So why not just define the Iterator trait with generics, as shown in Listing -?  Listing -: A hypothetical definition of the Iterator trait using generics  The difference is that when using generics, as in Listing -, we must annotate the types in each implementation; because we can also implement Iterator<String> for Counter or any other type, we could have multiple implementations of Iterator for Counter. In other words, when a trait has a generic parameter, it can be implemented for a type multiple times, changing the concrete types of the generic type parameters each time. When we use the next method on Counter, we would have to provide type annotations to indicate which implementation of Iterator we want to use.  With associated types, we don‚Äôt need to annotate types because we can‚Äôt implement a trait on a type multiple times. In Listing - with the definition that uses associated types, we can only choose what the type of Item will be once, because there can only be one impl Iterator for Counter. We don‚Äôt have to specify that we want an iterator of u values everywhere that we call next on Counter.  Associated types also become part of the trait‚Äôs contract: implementors of the trait must provide a type to stand in for the associated type placeholder. Associated types often have a name that describes how the type will be used, and documenting the associated type in the API documentation is good practice.  Default Generic Type Parameters and Operator Overloading When we use generic type parameters, we can specify a default concrete type for the generic type. This eliminates the need for implementors of the trait to specify a concrete type if the default type works. You specify a default type when declaring a generic type with the <PlaceholderType=ConcreteType> syntax.  A great example of a situation where this technique is useful is with operator overloading, in which you customize the behavior of an operator (such as +) in particular situations.  Rust doesn‚Äôt allow you to create your own operators or overload arbitrary operators. But you can overload the operations and corresponding traits listed in std::ops by implementing the traits associated with the operator. For example, in Listing - we overload the + operator to add two Point instances together. We do this by implementing the Add trait on a Point struct:  Filename: src/main.rs  Listing -: Implementing the Add trait to overload the + operator for Point instances  The add method adds the x values of two Point instances and the y values of two Point instances to create a new Point. The Add trait has an associated type named Output that determines the type returned from the add method.  The default generic type in this code is within the Add trait. Here is its definition:  This code should look generally familiar: a trait with one method and an associated type. The new part is Rhs=Self: this syntax is called default type parameters. The Rhs generic type parameter (short for ‚Äúright hand side‚Äù) defines the type of the rhs parameter in the add method. If we don‚Äôt specify a concrete type for Rhs when we implement the Add trait, the type of Rhs will default to Self, which will be the type we‚Äôre implementing Add on.  When we implemented Add for Point, we used the default for Rhs because we wanted to add two Point instances. Let‚Äôs look at an example of implementing the Add trait where we want to customize the Rhs type rather than using the default.  We have two structs, Millimeters and Meters, holding values in different units. This thin wrapping of an existing type in another struct is known as the newtype pattern, which we describe in more detail in the ‚ÄúUsing the Newtype Pattern to Implement External Traits on External Types‚Äù section. We want to add values in millimeters to values in meters and have the implementation of Add do the conversion correctly. We can implement Add for Millimeters with Meters as the Rhs, as shown in Listing -.  Filename: src/lib.rs  Listing -: Implementing the Add trait on Millimeters to add Millimeters to Meters  To add Millimeters and Meters, we specify impl Add<Meters> to set the value of the Rhs type parameter instead of using the default of Self.  You‚Äôll use default type parameters in two main ways:  To extend a type without breaking existing code To allow customization in specific cases most users won‚Äôt need The standard library‚Äôs Add trait is an example of the second purpose: usually, you‚Äôll add two like types, but the Add trait provides the ability to customize beyond that. Using a default type parameter in the Add trait definition means you don‚Äôt have to specify the extra parameter most of the time. In other words, a bit of implementation boilerplate isn‚Äôt needed, making it easier to use the trait.  The first purpose is similar to the second but in reverse: if you want to add a type parameter to an existing trait, you can give it a default to allow extension of the functionality of the trait without breaking the existing implementation code.  Fully Qualified Syntax for Disambiguation: Calling Methods with the Same Name Nothing in Rust prevents a trait from having a method with the same name as another trait‚Äôs method, nor does Rust prevent you from implementing both traits on one type. It‚Äôs also possible to implement a method directly on the type with the same name as methods from traits.  When calling methods with the same name, you‚Äôll need to tell Rust which one you want to use. Consider the code in Listing - where we‚Äôve defined two traits, Pilot and Wizard, that both have a method called fly. We then implement both traits on a type Human that already has a method named fly implemented on it. Each fly method does something different.  Filename: src/main.rs  Listing -: Two traits are defined to have a fly method and are implemented on the Human type, and a fly method is implemented on Human directly  When we call fly on an instance of Human, the compiler defaults to calling the method that is directly implemented on the type, as shown in Listing -.  Filename: src/main.rs  Listing -: Calling fly on an instance of Human  Running this code will print *waving arms furiously*, showing that Rust called the fly method implemented on Human directly.  To call the fly methods from either the Pilot trait or the Wizard trait, we need to use more explicit syntax to specify which fly method we mean. Listing - demonstrates this syntax.  Filename: src/main.rs  Listing -: Specifying which trait‚Äôs fly method we want to call  Specifying the trait name before the method name clarifies to Rust which implementation of fly we want to call. We could also write Human::fly(&person), which is equivalent to the person.fly() that we used in Listing -, but this is a bit longer to write if we don‚Äôt need to disambiguate.  Running this code prints the following:  Because the fly method takes a self parameter, if we had two types that both implement one trait, Rust could figure out which implementation of a trait to use based on the type of self.  However, associated functions that are not methods don‚Äôt have a self parameter. When there are multiple types or traits that define non-method functions with the same function name, Rust doesn't always know which type you mean unless you use fully qualified syntax. For example, in Listing - we create a trait for an animal shelter that wants to name all baby dogs Spot. We make an Animal trait with an associated non-method function baby_name. The Animal trait is implemented for the struct Dog, on which we also provide an associated non-method function baby_name directly.  Filename: src/main.rs  Listing -: A trait with an associated function and a type with an associated function of the same name that also implements the trait  We implement the code for naming all puppies Spot in the baby_name associated function that is defined on Dog. The Dog type also implements the trait Animal, which describes characteristics that all animals have. Baby dogs are called puppies, and that is expressed in the implementation of the Animal trait on Dog in the baby_name function associated with the Animal trait.  In main, we call the Dog::baby_name function, which calls the associated function defined on Dog directly. This code prints the following:  This output isn‚Äôt what we wanted. We want to call the baby_name function that is part of the Animal trait that we implemented on Dog so the code prints A baby dog is called a puppy. The technique of specifying the trait name that we used in Listing - doesn‚Äôt help here; if we change main to the code in Listing -, we‚Äôll get a compilation error.  Filename: src/main.rs  Listing -: Attempting to call the baby_name function from the Animal trait, but Rust doesn‚Äôt know which implementation to use  Because Animal::baby_name doesn‚Äôt have a self parameter, and there could be other types that implement the Animal trait, Rust can‚Äôt figure out which implementation of Animal::baby_name we want. We‚Äôll get this compiler error:  To disambiguate and tell Rust that we want to use the implementation of Animal for Dog as opposed to the implementation of Animal for some other type, we need to use fully qualified syntax. Listing - demonstrates how to use fully qualified syntax.  Filename: src/main.rs  Listing -: Using fully qualified syntax to specify that we want to call the baby_name function from the Animal trait as implemented on Dog  We‚Äôre providing Rust with a type annotation within the angle brackets, which indicates we want to call the baby_name method from the Animal trait as implemented on Dog by saying that we want to treat the Dog type as an Animal for this function call. This code will now print what we want:  In general, fully qualified syntax is defined as follows:  For associated functions that aren‚Äôt methods, there would not be a receiver: there would only be the list of other arguments. You could use fully qualified syntax everywhere that you call functions or methods. However, you‚Äôre allowed to omit any part of this syntax that Rust can figure out from other information in the program. You only need to use this more verbose syntax in cases where there are multiple implementations that use the same name and Rust needs help to identify which implementation you want to call.  Using Supertraits to Require One Trait‚Äôs Functionality Within Another Trait Sometimes, you might write a trait definition that depends on another trait: for a type to implement the first trait, you want to require that type to also implement the second trait. You would do this so that your trait definition can make use of the associated items of the second trait. The trait your trait definition is relying on is called a supertrait of your trait.  For example, let‚Äôs say we want to make an OutlinePrint trait with an outline_print method that will print a given value formatted so that it's framed in asterisks. That is, given a Point struct that implements the standard library trait Display to result in (x, y), when we call outline_print on a Point instance that has  for x and  for y, it should print the following:  In the implementation of the outline_print method, we want to use the Display trait‚Äôs functionality. Therefore, we need to specify that the OutlinePrint trait will work only for types that also implement Display and provide the functionality that OutlinePrint needs. We can do that in the trait definition by specifying OutlinePrint: Display. This technique is similar to adding a trait bound to the trait. Listing - shows an implementation of the OutlinePrint trait.  Filename: src/main.rs  Listing -: Implementing the OutlinePrint trait that requires the functionality from Display  Because we‚Äôve specified that OutlinePrint requires the Display trait, we can use the to_string function that is automatically implemented for any type that implements Display. If we tried to use to_string without adding a colon and specifying the Display trait after the trait name, we‚Äôd get an error saying that no method named to_string was found for the type &Self in the current scope.  Let‚Äôs see what happens when we try to implement OutlinePrint on a type that doesn‚Äôt implement Display, such as the Point struct:  Filename: src/main.rs  We get an error saying that Display is required but not implemented:  To fix this, we implement Display on Point and satisfy the constraint that OutlinePrint requires, like so:  Filename: src/main.rs  Then implementing the OutlinePrint trait on Point will compile successfully, and we can call outline_print on a Point instance to display it within an outline of asterisks.  Using the Newtype Pattern to Implement External Traits on External Types In Chapter  in the ‚ÄúImplementing a Trait on a Type‚Äù section, we mentioned the orphan rule that states we‚Äôre only allowed to implement a trait on a type if either the trait or the type are local to our crate. It‚Äôs possible to get around this restriction using the newtype pattern, which involves creating a new type in a tuple struct. (We covered tuple structs in the ‚ÄúUsing Tuple Structs without Named Fields to Create Different Types‚Äù section of Chapter .) The tuple struct will have one field and be a thin wrapper around the type we want to implement a trait for. Then the wrapper type is local to our crate, and we can implement the trait on the wrapper. Newtype is a term that originates from the Haskell programming language. There is no runtime performance penalty for using this pattern, and the wrapper type is elided at compile time.  As an example, let‚Äôs say we want to implement Display on Vec<T>, which the orphan rule prevents us from doing directly because the Display trait and the Vec<T> type are defined outside our crate. We can make a Wrapper struct that holds an instance of Vec<T>; then we can implement Display on Wrapper and use the Vec<T> value, as shown in Listing -.  Filename: src/main.rs  Listing -: Creating a Wrapper type around Vec<String> to implement Display  The implementation of Display uses self. to access the inner Vec<T>, because Wrapper is a tuple struct and Vec<T> is the item at index  in the tuple. Then we can use the functionality of the Display trait on Wrapper.  The downside of using this technique is that Wrapper is a new type, so it doesn‚Äôt have the methods of the value it‚Äôs holding. We would have to implement all the methods of Vec<T> directly on Wrapper such that the methods delegate to self., which would allow us to treat Wrapper exactly like a Vec<T>. If we wanted the new type to have every method the inner type has, implementing the Deref trait (discussed in Chapter  in the ‚ÄúTreating Smart Pointers Like Regular References with the Deref Trait‚Äù section) on the Wrapper to return the inner type would be a solution. If we don‚Äôt want the Wrapper type to have all the methods of the inner type‚Äîfor example, to restrict the Wrapper type‚Äôs behavior‚Äîwe would have to implement just the methods we do want manually.  This newtype pattern is also useful even when traits are not involved. Let‚Äôs switch focus and look at some advanced ways to interact with Rust‚Äôs type system.  Advanced Types The Rust type system has some features that we‚Äôve so far mentioned but haven‚Äôt yet discussed. We‚Äôll start by discussing newtypes in general as we examine why newtypes are useful as types. Then we‚Äôll move on to type aliases, a feature similar to newtypes but with slightly different semantics. We‚Äôll also discuss the ! type and dynamically sized types.  Using the Newtype Pattern for Type Safety and Abstraction Note: This section assumes you‚Äôve read the earlier section ‚ÄúUsing the Newtype Pattern to Implement External Traits on External Types.‚Äù The newtype pattern is also useful for tasks beyond those we‚Äôve discussed so far, including statically enforcing that values are never confused and indicating the units of a value. You saw an example of using newtypes to indicate units in Listing -: recall that the Millimeters and Meters structs wrapped u values in a newtype. If we wrote a function with a parameter of type Millimeters, we couldn‚Äôt compile a program that accidentally tried to call that function with a value of type Meters or a plain u.  We can also use the newtype pattern to abstract away some implementation details of a type: the new type can expose a public API that is different from the API of the private inner type.  Newtypes can also hide internal implementation. For example, we could provide a People type to wrap a HashMap<i, String> that stores a person‚Äôs ID associated with their name. Code using People would only interact with the public API we provide, such as a method to add a name string to the People collection; that code wouldn‚Äôt need to know that we assign an i ID to names internally. The newtype pattern is a lightweight way to achieve encapsulation to hide implementation details, which we discussed in the ‚ÄúEncapsulation that Hides Implementation Details‚Äù section of Chapter .  Creating Type Synonyms with Type Aliases Rust provides the ability to declare a type alias to give an existing type another name. For this we use the type keyword. For example, we can create the alias Kilometers to i like so:  Now, the alias Kilometers is a synonym for i; unlike the Millimeters and Meters types we created in Listing -, Kilometers is not a separate, new type. Values that have the type Kilometers will be treated the same as values of type i:  Because Kilometers and i are the same type, we can add values of both types and we can pass Kilometers values to functions that take i parameters. However, using this method, we don‚Äôt get the type checking benefits that we get from the newtype pattern discussed earlier. In other words, if we mix up Kilometers and i values somewhere, the compiler will not give us an error.  The main use case for type synonyms is to reduce repetition. For example, we might have a lengthy type like this:  Writing this lengthy type in function signatures and as type annotations all over the code can be tiresome and error prone. Imagine having a project full of code like that in Listing -.  Listing -: Using a long type in many places  A type alias makes this code more manageable by reducing the repetition. In Listing -, we‚Äôve introduced an alias named Thunk for the verbose type and can replace all uses of the type with the shorter alias Thunk.  Listing -: Introducing a type alias Thunk to reduce repetition  This code is much easier to read and write! Choosing a meaningful name for a type alias can help communicate your intent as well (thunk is a word for code to be evaluated at a later time, so it‚Äôs an appropriate name for a closure that gets stored).  Type aliases are also commonly used with the Result<T, E> type for reducing repetition. Consider the std::io module in the standard library. I/O operations often return a Result<T, E> to handle situations when operations fail to work. This library has a std::io::Error struct that represents all possible I/O errors. Many of the functions in std::io will be returning Result<T, E> where the E is std::io::Error, such as these functions in the Write trait:  The Result<..., Error> is repeated a lot. As such, std::io has this type alias declaration:  Because this declaration is in the std::io module, we can use the fully qualified alias std::io::Result<T>; that is, a Result<T, E> with the E filled in as std::io::Error. The Write trait function signatures end up looking like this:  The type alias helps in two ways: it makes code easier to write and it gives us a consistent interface across all of std::io. Because it‚Äôs an alias, it‚Äôs just another Result<T, E>, which means we can use any methods that work on Result<T, E> with it, as well as special syntax like the ? operator.  The Never Type that Never Returns Rust has a special type named ! that‚Äôs known in type theory lingo as the empty type because it has no values. We prefer to call it the never type because it stands in the place of the return type when a function will never return. Here is an example:  This code is read as ‚Äúthe function bar returns never.‚Äù Functions that return never are called diverging functions. We can‚Äôt create values of the type ! so bar can never possibly return.  But what use is a type you can never create values for? Recall the code from Listing -, part of the number guessing game; we‚Äôve reproduced a bit of it here in Listing -.  Listing -: A match with an arm that ends in continue  At the time, we skipped over some details in this code. In Chapter  in ‚ÄúThe match Control Flow Operator‚Äù section, we discussed that match arms must all return the same type. So, for example, the following code doesn‚Äôt work:  The type of guess in this code would have to be an integer and a string, and Rust requires that guess have only one type. So what does continue return? How were we allowed to return a u from one arm and have another arm that ends with continue in Listing -?  As you might have guessed, continue has a ! value. That is, when Rust computes the type of guess, it looks at both match arms, the former with a value of u and the latter with a ! value. Because ! can never have a value, Rust decides that the type of guess is u.  The formal way of describing this behavior is that expressions of type ! can be coerced into any other type. We‚Äôre allowed to end this match arm with continue because continue doesn‚Äôt return a value; instead, it moves control back to the top of the loop, so in the Err case, we never assign a value to guess.  The never type is useful with the panic! macro as well. Recall the unwrap function that we call on Option<T> values to produce a value or panic with this definition:  In this code, the same thing happens as in the match in Listing -: Rust sees that val has the type T and panic! has the type !, so the result of the overall match expression is T. This code works because panic! doesn‚Äôt produce a value; it ends the program. In the None case, we won‚Äôt be returning a value from unwrap, so this code is valid.  One final expression that has the type ! is a loop:  Here, the loop never ends, so ! is the value of the expression. However, this wouldn‚Äôt be true if we included a break, because the loop would terminate when it got to the break.  Dynamically Sized Types and the Sized Trait Rust needs to know certain details about its types, such as how much space to allocate for a value of a particular type. This leaves one corner of its type system a little confusing at first: the concept of dynamically sized types. Sometimes referred to as DSTs or unsized types, these types let us write code using values whose size we can know only at runtime.  Let‚Äôs dig into the details of a dynamically sized type called str, which we‚Äôve been using throughout the book. That‚Äôs right, not &str, but str on its own, is a DST. We can‚Äôt know how long the string is until runtime, meaning we can‚Äôt create a variable of type str, nor can we take an argument of type str. Consider the following code, which does not work:  Rust needs to know how much memory to allocate for any value of a particular type, and all values of a type must use the same amount of memory. If Rust allowed us to write this code, these two str values would need to take up the same amount of space. But they have different lengths: s needs  bytes of storage and s needs . This is why it‚Äôs not possible to create a variable holding a dynamically sized type.  So what do we do? In this case, you already know the answer: we make the types of s and s a &str rather than a str. Recall from the ‚ÄúString Slices‚Äù section of Chapter  that the slice data structure just stores the starting position and the length of the slice. So although a &T is a single value that stores the memory address of where the T is located, a &str is two values: the address of the str and its length. As such, we can know the size of a &str value at compile time: it‚Äôs twice the length of a usize. That is, we always know the size of a &str, no matter how long the string it refers to is. In general, this is the way in which dynamically sized types are used in Rust: they have an extra bit of metadata that stores the size of the dynamic information. The golden rule of dynamically sized types is that we must always put values of dynamically sized types behind a pointer of some kind.  We can combine str with all kinds of pointers: for example, Box<str> or Rc<str>. In fact, you‚Äôve seen this before but with a different dynamically sized type: traits. Every trait is a dynamically sized type we can refer to by using the name of the trait. In Chapter  in the ‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù section, we mentioned that to use traits as trait objects, we must put them behind a pointer, such as &dyn Trait or Box<dyn Trait> (Rc<dyn Trait> would work too).  To work with DSTs, Rust provides the Sized trait to determine whether or not a type‚Äôs size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on Sized to every generic function. That is, a generic function definition like this:  is actually treated as though we had written this:  By default, generic functions will work only on types that have a known size at compile time. However, you can use the following special syntax to relax this restriction:  A trait bound on ?Sized means ‚ÄúT may or may not be Sized‚Äù and this notation overrides the default that generic types must have a known size at compile time. The ?Trait syntax with this meaning is only available for Sized, not any other traits.  Also note that we switched the type of the t parameter from T to &T. Because the type might not be Sized, we need to use it behind some kind of pointer. In this case, we‚Äôve chosen a reference.  Next, we‚Äôll talk about functions and closures!  Advanced Functions and Closures This section explores some advanced features related to functions and closures, including function pointers and returning closures.  Function Pointers We‚Äôve talked about how to pass closures to functions; you can also pass regular functions to functions! This technique is useful when you want to pass a function you‚Äôve already defined rather than defining a new closure. Functions coerce to the type fn (with a lowercase f), not to be confused with the Fn closure trait. The fn type is called a function pointer. Passing functions with function pointers will allow you to use functions as arguments to other functions.  The syntax for specifying that a parameter is a function pointer is similar to that of closures, as shown in Listing -, where we‚Äôve defined a function add_one that adds one to its parameter. The function do_twice takes two parameters: a function pointer to any function that takes an i parameter and returns an i, and one i value. The do_twice function calls the function f twice, passing it the arg value, then adds the two function call results together. The main function calls do_twice with the arguments add_one and .  Filename: src/main.rs  Listing -: Using the fn type to accept a function pointer as an argument  This code prints The answer is: . We specify that the parameter f in do_twice is an fn that takes one parameter of type i and returns an i. We can then call f in the body of do_twice. In main, we can pass the function name add_one as the first argument to do_twice.  Unlike closures, fn is a type rather than a trait, so we specify fn as the parameter type directly rather than declaring a generic type parameter with one of the Fn traits as a trait bound.  Function pointers implement all three of the closure traits (Fn, FnMut, and FnOnce), meaning you can always pass a function pointer as an argument for a function that expects a closure. It‚Äôs best to write functions using a generic type and one of the closure traits so your functions can accept either functions or closures.  That said, one example of where you would want to only accept fn and not closures is when interfacing with external code that doesn‚Äôt have closures: C functions can accept functions as arguments, but C doesn‚Äôt have closures.  As an example of where you could use either a closure defined inline or a named function, let‚Äôs look at a use of the map method provided by the Iterator trait in the standard library. To use the map function to turn a vector of numbers into a vector of strings, we could use a closure, like this:  Or we could name a function as the argument to map instead of the closure, like this:  Note that we must use the fully qualified syntax that we talked about earlier in the ‚ÄúAdvanced Traits‚Äù section because there are multiple functions available named to_string. Here, we‚Äôre using the to_string function defined in the ToString trait, which the standard library has implemented for any type that implements Display.  Recall from the ‚ÄúEnum values‚Äù section of Chapter  that the name of each enum variant that we define also becomes an initializer function. We can use these initializer functions as function pointers that implement the closure traits, which means we can specify the initializer functions as arguments for methods that take closures, like so:  Here we create Status::Value instances using each u value in the range that map is called on by using the initializer function of Status::Value. Some people prefer this style, and some people prefer to use closures. They compile to the same code, so use whichever style is clearer to you.  Returning Closures Closures are represented by traits, which means you can‚Äôt return closures directly. In most cases where you might want to return a trait, you can instead use the concrete type that implements the trait as the return value of the function. However, you can‚Äôt do that with closures because they don‚Äôt have a concrete type that is returnable; you‚Äôre not allowed to use the function pointer fn as a return type, for example.  The following code tries to return a closure directly, but it won‚Äôt compile:  The compiler error is as follows:  The error references the Sized trait again! Rust doesn‚Äôt know how much space it will need to store the closure. We saw a solution to this problem earlier. We can use a trait object:  This code will compile just fine. For more about trait objects, refer to the section ‚ÄúUsing Trait Objects That Allow for Values of Different Types‚Äù in Chapter .  Next, let‚Äôs look at macros!  Macros We‚Äôve used macros like println! throughout this book, but we haven‚Äôt fully explored what a macro is and how it works. The term macro refers to a family of features in Rust: declarative macros with macro_rules! and three kinds of procedural macros:  Custom #[derive] macros that specify code added with the derive attribute used on structs and enums Attribute-like macros that define custom attributes usable on any item Function-like macros that look like function calls but operate on the tokens specified as their argument We‚Äôll talk about each of these in turn, but first, let‚Äôs look at why we even need macros when we already have functions.  The Difference Between Macros and Functions Fundamentally, macros are a way of writing code that writes other code, which is known as metaprogramming. In Appendix C, we discuss the derive attribute, which generates an implementation of various traits for you. We‚Äôve also used the println! and vec! macros throughout the book. All of these macros expand to produce more code than the code you‚Äôve written manually.  Metaprogramming is useful for reducing the amount of code you have to write and maintain, which is also one of the roles of functions. However, macros have some additional powers that functions don‚Äôt.  A function signature must declare the number and type of parameters the function has. Macros, on the other hand, can take a variable number of parameters: we can call println!("hello") with one argument or println!("hello {}", name) with two arguments. Also, macros are expanded before the compiler interprets the meaning of the code, so a macro can, for example, implement a trait on a given type. A function can‚Äôt, because it gets called at runtime and a trait needs to be implemented at compile time.  The downside to implementing a macro instead of a function is that macro definitions are more complex than function definitions because you‚Äôre writing Rust code that writes Rust code. Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.  Another important difference between macros and functions is that you must define macros or bring them into scope before you call them in a file, as opposed to functions you can define anywhere and call anywhere.  Declarative Macros with macro_rules! for General Metaprogramming The most widely used form of macros in Rust is the declarative macro. These are also sometimes referred to as ‚Äúmacros by example,‚Äù ‚Äúmacro_rules! macros,‚Äù or just plain ‚Äúmacros.‚Äù At their core, declarative macros allow you to write something similar to a Rust match expression. As discussed in Chapter , match expressions are control structures that take an expression, compare the resulting value of the expression to patterns, and then run the code associated with the matching pattern. Macros also compare a value to patterns that are associated with particular code: in this situation, the value is the literal Rust source code passed to the macro; the patterns are compared with the structure of that source code; and the code associated with each pattern, when matched, replaces the code passed to the macro. This all happens during compilation.  To define a macro, you use the macro_rules! construct. Let‚Äôs explore how to use macro_rules! by looking at how the vec! macro is defined. Chapter  covered how we can use the vec! macro to create a new vector with particular values. For example, the following macro creates a new vector containing three integers:  We could also use the vec! macro to make a vector of two integers or a vector of five string slices. We wouldn‚Äôt be able to use a function to do the same because we wouldn‚Äôt know the number or type of values up front.  Listing - shows a slightly simplified definition of the vec! macro.  Filename: src/lib.rs  Listing -: A simplified version of the vec! macro definition  Note: The actual definition of the vec! macro in the standard library includes code to preallocate the correct amount of memory up front. That code is an optimization that we don‚Äôt include here to make the example simpler.  The #[macro_export] annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can‚Äôt be brought into scope.  We then start the macro definition with macro_rules! and the name of the macro we‚Äôre defining without the exclamation mark. The name, in this case vec, is followed by curly brackets denoting the body of the macro definition.  The structure in the vec! body is similar to the structure of a match expression. Here we have one arm with the pattern ( $( $x:expr ),* ), followed by => and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.  Valid pattern syntax in macro definitions is different than the pattern syntax covered in Chapter  because macro patterns are matched against Rust code structure rather than values. Let‚Äôs walk through what the pattern pieces in Listing - mean; for the full macro pattern syntax, see the Rust Reference.  First, we use a set of parentheses to encompass the whole pattern. We use a dollar sign ($) to declare a variable in the macro system that will contain the Rust code matching the pattern. The dollar sign makes it clear this is a macro variable as opposed to a regular Rust variable. Next comes a set of parentheses that captures values that match the pattern within the parentheses for use in the replacement code. Within $() is $x:expr, which matches any Rust expression and gives the expression the name $x.  The comma following $() indicates that a literal comma separator character could optionally appear after the code that matches the code in $(). The * specifies that the pattern matches zero or more of whatever precedes the *.  When we call this macro with vec![, , ];, the $x pattern matches three times with the three expressions , , and .  Now let‚Äôs look at the pattern in the body of the code associated with this arm: temp_vec.push() within $()* is generated for each part that matches $() in the pattern zero or more times depending on how many times the pattern matches. The $x is replaced with each expression matched. When we call this macro with vec![, , ];, the code generated that replaces this macro call will be the following:  We‚Äôve defined a macro that can take any number of arguments of any type and can generate code to create a vector containing the specified elements.  To learn more about how to write macros, consult the online documentation or other resources, such as ‚ÄúThe Little Book of Rust Macros‚Äù started by Daniel Keep and continued by Lukas Wirth.  Procedural Macros for Generating Code from Attributes The second form of macros is the procedural macro, which acts more like a function (and is a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do. The three kinds of procedural macros are custom derive, attribute-like, and function-like, and all work in a similar fashion.  When creating procedural macros, the definitions must reside in their own crate with a special crate type. This is for complex technical reasons that we hope to eliminate in the future. In Listing -, we show how to define a procedural macro, where some_attribute is a placeholder for using a specific macro variety.  Filename: src/lib.rs  Listing -: An example of defining a procedural macro  The function that defines a procedural macro takes a TokenStream as an input and produces a TokenStream as an output. The TokenStream type is defined by the proc_macro crate that is included with Rust and represents a sequence of tokens. This is the core of the macro: the source code that the macro is operating on makes up the input TokenStream, and the code the macro produces is the output TokenStream. The function also has an attribute attached to it that specifies which kind of procedural macro we‚Äôre creating. We can have multiple kinds of procedural macros in the same crate.  Let‚Äôs look at the different kinds of procedural macros. We‚Äôll start with a custom derive macro and then explain the small dissimilarities that make the other forms different.  How to Write a Custom derive Macro Let‚Äôs create a crate named hello_macro that defines a trait named HelloMacro with one associated function named hello_macro. Rather than making our users implement the HelloMacro trait for each of their types, we‚Äôll provide a procedural macro so users can annotate their type with #[derive(HelloMacro)] to get a default implementation of the hello_macro function. The default implementation will print Hello, Macro! My name is TypeName! where TypeName is the name of the type on which this trait has been defined. In other words, we‚Äôll write a crate that enables another programmer to write code like Listing - using our crate.  Filename: src/main.rs  Listing -: The code a user of our crate will be able to write when using our procedural macro  This code will print Hello, Macro! My name is Pancakes! when we‚Äôre done. The first step is to make a new library crate, like this:  Next, we‚Äôll define the HelloMacro trait and its associated function:  Filename: src/lib.rs  We have a trait and its function. At this point, our crate user could implement the trait to achieve the desired functionality, like so:  However, they would need to write the implementation block for each type they wanted to use with hello_macro; we want to spare them from having to do this work.  Additionally, we can‚Äôt yet provide the hello_macro function with default implementation that will print the name of the type the trait is implemented on: Rust doesn‚Äôt have reflection capabilities, so it can‚Äôt look up the type‚Äôs name at runtime. We need a macro to generate code at compile time.  The next step is to define the procedural macro. At the time of this writing, procedural macros need to be in their own crate. Eventually, this restriction might be lifted. The convention for structuring crates and macro crates is as follows: for a crate named foo, a custom derive procedural macro crate is called foo_derive. Let‚Äôs start a new crate called hello_macro_derive inside our hello_macro project:  Our two crates are tightly related, so we create the procedural macro crate within the directory of our hello_macro crate. If we change the trait definition in hello_macro, we‚Äôll have to change the implementation of the procedural macro in hello_macro_derive as well. The two crates will need to be published separately, and programmers using these crates will need to add both as dependencies and bring them both into scope. We could instead have the hello_macro crate use hello_macro_derive as a dependency and re-export the procedural macro code. However, the way we‚Äôve structured the project makes it possible for programmers to use hello_macro even if they don‚Äôt want the derive functionality.  We need to declare the hello_macro_derive crate as a procedural macro crate. We‚Äôll also need functionality from the syn and quote crates, as you‚Äôll see in a moment, so we need to add them as dependencies. Add the following to the Cargo.toml file for hello_macro_derive:  Filename: hello_macro_derive/Cargo.toml  To start defining the procedural macro, place the code in Listing - into your src/lib.rs file for the hello_macro_derive crate. Note that this code won‚Äôt compile until we add a definition for the impl_hello_macro function.  Filename: hello_macro_derive/src/lib.rs  Listing -: Code that most procedural macro crates will require in order to process Rust code  Notice that we‚Äôve split the code into the hello_macro_derive function, which is responsible for parsing the TokenStream, and the impl_hello_macro function, which is responsible for transforming the syntax tree: this makes writing a procedural macro more convenient. The code in the outer function (hello_macro_derive in this case) will be the same for almost every procedural macro crate you see or create. The code you specify in the body of the inner function (impl_hello_macro in this case) will be different depending on your procedural macro‚Äôs purpose.  We‚Äôve introduced three new crates: proc_macro, syn, and quote. The proc_macro crate comes with Rust, so we didn‚Äôt need to add that to the dependencies in Cargo.toml. The proc_macro crate is the compiler‚Äôs API that allows us to read and manipulate Rust code from our code.  The syn crate parses Rust code from a string into a data structure that we can perform operations on. The quote crate turns syn data structures back into Rust code. These crates make it much simpler to parse any sort of Rust code we might want to handle: writing a full parser for Rust code is no simple task.  The hello_macro_derive function will be called when a user of our library specifies #[derive(HelloMacro)] on a type. This is possible because we‚Äôve annotated the hello_macro_derive function here with proc_macro_derive and specified the name HelloMacro, which matches our trait name; this is the convention most procedural macros follow.  The hello_macro_derive function first converts the input from a TokenStream to a data structure that we can then interpret and perform operations on. This is where syn comes into play. The parse function in syn takes a TokenStream and returns a DeriveInput struct representing the parsed Rust code. Listing - shows the relevant parts of the DeriveInput struct we get from parsing the struct Pancakes; string:  Listing -: The DeriveInput instance we get when parsing the code that has the macro‚Äôs attribute in Listing -  The fields of this struct show that the Rust code we‚Äôve parsed is a unit struct with the ident (identifier, meaning the name) of Pancakes. There are more fields on this struct for describing all sorts of Rust code; check the syn documentation for DeriveInput for more information.  Soon we‚Äôll define the impl_hello_macro function, which is where we‚Äôll build the new Rust code we want to include. But before we do, note that the output for our derive macro is also a TokenStream. The returned TokenStream is added to the code that our crate users write, so when they compile their crate, they‚Äôll get the extra functionality that we provide in the modified TokenStream.  You might have noticed that we‚Äôre calling unwrap to cause the hello_macro_derive function to panic if the call to the syn::parse function fails here. It‚Äôs necessary for our procedural macro to panic on errors because proc_macro_derive functions must return TokenStream rather than Result to conform to the procedural macro API. We‚Äôve simplified this example by using unwrap; in production code, you should provide more specific error messages about what went wrong by using panic! or expect.  Now that we have the code to turn the annotated Rust code from a TokenStream into a DeriveInput instance, let‚Äôs generate the code that implements the HelloMacro trait on the annotated type, as shown in Listing -.  Filename: hello_macro_derive/src/lib.rs  Listing -: Implementing the HelloMacro trait using the parsed Rust code  We get an Ident struct instance containing the name (identifier) of the annotated type using ast.ident. The struct in Listing - shows that when we run the impl_hello_macro function on the code in Listing -, the ident we get will have the ident field with a value of "Pancakes". Thus, the name variable in Listing - will contain an Ident struct instance that, when printed, will be the string "Pancakes", the name of the struct in Listing -.  The quote! macro lets us define the Rust code that we want to return. The compiler expects something different to the direct result of the quote! macro‚Äôs execution, so we need to convert it to a TokenStream. We do this by calling the into method, which consumes this intermediate representation and returns a value of the required TokenStream type.  The quote! macro also provides some very cool templating mechanics: we can enter #name, and quote! will replace it with the value in the variable name. You can even do some repetition similar to the way regular macros work. Check out the quote crate‚Äôs docs for a thorough introduction.  We want our procedural macro to generate an implementation of our HelloMacro trait for the type the user annotated, which we can get by using #name. The trait implementation has the one function hello_macro, whose body contains the functionality we want to provide: printing Hello, Macro! My name is and then the name of the annotated type.  The stringify! macro used here is built into Rust. It takes a Rust expression, such as  + , and at compile time turns the expression into a string literal, such as " + ". This is different than format! or println!, macros which evaluate the expression and then turn the result into a String. There is a possibility that the #name input might be an expression to print literally, so we use stringify!. Using stringify! also saves an allocation by converting #name to a string literal at compile time.  At this point, cargo build should complete successfully in both hello_macro and hello_macro_derive. Let‚Äôs hook up these crates to the code in Listing - to see the procedural macro in action! Create a new binary project in your projects directory using cargo new pancakes. We need to add hello_macro and hello_macro_derive as dependencies in the pancakes crate‚Äôs Cargo.toml. If you‚Äôre publishing your versions of hello_macro and hello_macro_derive to crates.io, they would be regular dependencies; if not, you can specify them as path dependencies as follows:  Put the code in Listing - into src/main.rs, and run cargo run: it should print Hello, Macro! My name is Pancakes! The implementation of the HelloMacro trait from the procedural macro was included without the pancakes crate needing to implement it; the #[derive(HelloMacro)] added the trait implementation.  Next, let‚Äôs explore how the other kinds of procedural macros differ from custom derive macros.  Attribute-like macros Attribute-like macros are similar to custom derive macros, but instead of generating code for the derive attribute, they allow you to create new attributes. They‚Äôre also more flexible: derive only works for structs and enums; attributes can be applied to other items as well, such as functions. Here‚Äôs an example of using an attribute-like macro: say you have an attribute named route that annotates functions when using a web application framework:  This #[route] attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:  Here, we have two parameters of type TokenStream. The first is for the contents of the attribute: the GET, "/" part. The second is the body of the item the attribute is attached to: in this case, fn index() {} and the rest of the function‚Äôs body.  Other than that, attribute-like macros work the same way as custom derive macros: you create a crate with the proc-macro crate type and implement a function that generates the code you want!  Function-like macros Function-like macros define macros that look like function calls. Similarly to macro_rules! macros, they‚Äôre more flexible than functions; for example, they can take an unknown number of arguments. However, macro_rules! macros can be defined only using the match-like syntax we discussed in the section ‚ÄúDeclarative Macros with macro_rules! for General Metaprogramming‚Äù earlier. Function-like macros take a TokenStream parameter and their definition manipulates that TokenStream using Rust code as the other two types of procedural macros do. An example of a function-like macro is an sql! macro that might be called like so:  This macro would parse the SQL statement inside it and check that it‚Äôs syntactically correct, which is much more complex processing than a macro_rules! macro can do. The sql! macro would be defined like this:  This definition is similar to the custom derive macro‚Äôs signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.  Summary Whew! Now you have some Rust features in your toolbox that you likely won‚Äôt use often, but you‚Äôll know they‚Äôre available in very particular circumstances. We‚Äôve introduced several complex topics so that when you encounter them in error message suggestions or in other peoples‚Äô code, you‚Äôll be able to recognize these concepts and syntax. Use this chapter as a reference to guide you to solutions.  Next, we‚Äôll put everything we‚Äôve discussed throughout the book into practice and do one more project!  Final Project: Building a Multithreaded Web Server It‚Äôs been a long journey, but we‚Äôve reached the end of the book. In this chapter, we‚Äôll build one more project together to demonstrate some of the concepts we covered in the final chapters, as well as recap some earlier lessons.  For our final project, we‚Äôll make a web server that says ‚Äúhello‚Äù and looks like Figure - in a web browser.  hello from rust  Figure -: Our final shared project  Here is our plan for building the web server:  Learn a bit about TCP and HTTP. Listen for TCP connections on a socket. Parse a small number of HTTP requests. Create a proper HTTP response. Improve the throughput of our server with a thread pool. Before we get started, we should mention one detail: the method we‚Äôll use won‚Äôt be the best way to build a web server with Rust. Community members have published a number of production-ready crates available on crates.io that provide more complete web server and thread pool implementations than we‚Äôll build. However, our intention in this chapter is to help you learn, not to take the easy route. Because Rust is a systems programming language, we can choose the level of abstraction we want to work with and can go to a lower level than is possible or practical in other languages. We‚Äôll therefore write the basic HTTP server and thread pool manually so you can learn the general ideas and techniques behind the crates you might use in the future.  Building a Single-Threaded Web Server We‚Äôll start by getting a single-threaded web server working. Before we begin, let‚Äôs look at a quick overview of the protocols involved in building web servers. The details of these protocols are beyond the scope of this book, but a brief overview will give you the information you need.  The two main protocols involved in web servers are Hypertext Transfer Protocol (HTTP) and Transmission Control Protocol (TCP). Both protocols are request-response protocols, meaning a client initiates requests and a server listens to the requests and provides a response to the client. The contents of those requests and responses are defined by the protocols.  TCP is the lower-level protocol that describes the details of how information gets from one server to another but doesn‚Äôt specify what that information is. HTTP builds on top of TCP by defining the contents of the requests and responses. It‚Äôs technically possible to use HTTP with other protocols, but in the vast majority of cases, HTTP sends its data over TCP. We‚Äôll work with the raw bytes of TCP and HTTP requests and responses.  Listening to the TCP Connection Our web server needs to listen to a TCP connection, so that‚Äôs the first part we‚Äôll work on. The standard library offers a std::net module that lets us do this. Let‚Äôs make a new project in the usual fashion:  Now enter the code in Listing - in src/main.rs to start. This code will listen at the local address ...: for incoming TCP streams. When it gets an incoming stream, it will print Connection established!.  Filename: src/main.rs  Listing -: Listening for incoming streams and printing a message when we receive a stream  Using TcpListener, we can listen for TCP connections at the address ...:. In the address, the section before the colon is an IP address representing your computer (this is the same on every computer and doesn‚Äôt represent the authors‚Äô computer specifically), and  is the port. We‚Äôve chosen this port for two reasons: HTTP isn‚Äôt normally accepted on this port so our server is unlikely to conflict with any other web server you might have running on your machine, and  is rust typed on a telephone.  The bind function in this scenario works like the new function in that it will return a new TcpListener instance. The function is called bind because, in networking, connecting to a port to listen to is known as ‚Äúbinding to a port.‚Äù  The bind function returns a Result<T, E>, which indicates that it‚Äôs possible for binding to fail. For example, connecting to port  requires administrator privileges (nonadministrators can listen only on ports higher than ), so if we tried to connect to port  without being an administrator, binding wouldn‚Äôt work. Binding also wouldn‚Äôt work, for example, if we ran two instances of our program and so had two programs listening to the same port. Because we‚Äôre writing a basic server just for learning purposes, we won‚Äôt worry about handling these kinds of errors; instead, we use unwrap to stop the program if errors happen.  The incoming method on TcpListener returns an iterator that gives us a sequence of streams (more specifically, streams of type TcpStream). A single stream represents an open connection between the client and the server. A connection is the name for the full request and response process in which a client connects to the server, the server generates a response, and the server closes the connection. As such, we will read from the TcpStream to see what the client sent and then write our response to the stream to send data back to the client. Overall, this for loop will process each connection in turn and produce a series of streams for us to handle.  For now, our handling of the stream consists of calling unwrap to terminate our program if the stream has any errors; if there aren‚Äôt any errors, the program prints a message. We‚Äôll add more functionality for the success case in the next listing. The reason we might receive errors from the incoming method when a client connects to the server is that we‚Äôre not actually iterating over connections. Instead, we‚Äôre iterating over connection attempts. The connection might not be successful for a number of reasons, many of them operating system specific. For example, many operating systems have a limit to the number of simultaneous open connections they can support; new connection attempts beyond that number will produce an error until some of the open connections are closed.  Let‚Äôs try running this code! Invoke cargo run in the terminal and then load ...: in a web browser. The browser should show an error message like ‚ÄúConnection reset,‚Äù because the server isn‚Äôt currently sending back any data. But when you look at your terminal, you should see several messages that were printed when the browser connected to the server!  Sometimes, you‚Äôll see multiple messages printed for one browser request; the reason might be that the browser is making a request for the page as well as a request for other resources, like the favicon.ico icon that appears in the browser tab.  It could also be that the browser is trying to connect to the server multiple times because the server isn‚Äôt responding with any data. When stream goes out of scope and is dropped at the end of the loop, the connection is closed as part of the drop implementation. Browsers sometimes deal with closed connections by retrying, because the problem might be temporary. The important factor is that we‚Äôve successfully gotten a handle to a TCP connection!  Remember to stop the program by pressing ctrl-c when you‚Äôre done running a particular version of the code. Then restart the program by invoking the cargo run command after you‚Äôve made each set of code changes to make sure you‚Äôre running the newest code.  Reading the Request Let‚Äôs implement the functionality to read the request from the browser! To separate the concerns of first getting a connection and then taking some action with the connection, we‚Äôll start a new function for processing connections. In this new handle_connection function, we‚Äôll read data from the TCP stream and print it so we can see the data being sent from the browser. Change the code to look like Listing -.  Filename: src/main.rs  Listing -: Reading from the TcpStream and printing the data  We bring std::io::prelude and std::io::BufReader into scope to get access to traits and types that let us read from and write to the stream. In the for loop in the main function, instead of printing a message that says we made a connection, we now call the new handle_connection function and pass the stream to it.  In the handle_connection function, we create a new BufReader instance that wraps a mutable reference to the stream. BufReader adds buffering by managing calls to the std::io::Read trait methods for us.  We create a variable named http_request to collect the lines of the request the browser sends to our server. We indicate that we want to collect these lines in a vector by adding the Vec<_> type annotation.  BufReader implements the std::io::BufRead trait, which provides the lines method. The lines method returns an iterator of Result<String, std::io::Error> by splitting the stream of data whenever it sees a newline byte. To get each String, we map and unwrap each Result. The Result might be an error if the data isn‚Äôt valid UTF- or if there was a problem reading from the stream. Again, a production program should handle these errors more gracefully, but we‚Äôre choosing to stop the program in the error case for simplicity.  The browser signals the end of an HTTP request by sending two newline characters in a row, so to get one request from the stream, we take lines until we get a line that is the empty string. Once we‚Äôve collected the lines into the vector, we‚Äôre printing them out using pretty debug formatting so we can take a look at the instructions the web browser is sending to our server.  Let‚Äôs try this code! Start the program and make a request in a web browser again. Note that we‚Äôll still get an error page in the browser, but our program‚Äôs output in the terminal will now look similar to this:  Depending on your browser, you might get slightly different output. Now that we‚Äôre printing the request data, we can see why we get multiple connections from one browser request by looking at the path after GET in the first line of the request. If the repeated connections are all requesting /, we know the browser is trying to fetch / repeatedly because it‚Äôs not getting a response from our program.  Let‚Äôs break down this request data to understand what the browser is asking of our program.  A Closer Look at an HTTP Request HTTP is a text-based protocol, and a request takes this format:  The first line is the request line that holds information about what the client is requesting. The first part of the request line indicates the method being used, such as GET or POST, which describes how the client is making this request. Our client used a GET request, which means it is asking for information.  The next part of the request line is /, which indicates the Uniform Resource Identifier (URI) the client is requesting: a URI is almost, but not quite, the same as a Uniform Resource Locator (URL). The difference between URIs and URLs isn‚Äôt important for our purposes in this chapter, but the HTTP spec uses the term URI, so we can just mentally substitute URL for URI here.  The last part is the HTTP version the client uses, and then the request line ends in a CRLF sequence. (CRLF stands for carriage return and line feed, which are terms from the typewriter days!) The CRLF sequence can also be written as \r\n, where \r is a carriage return and \n is a line feed. The CRLF sequence separates the request line from the rest of the request data. Note that when the CRLF is printed, we see a new line start rather than \r\n.  Looking at the request line data we received from running our program so far, we see that GET is the method, / is the request URI, and HTTP/. is the version.  After the request line, the remaining lines starting from Host: onward are headers. GET requests have no body.  Try making a request from a different browser or asking for a different address, such as ...:/test, to see how the request data changes.  Now that we know what the browser is asking for, let‚Äôs send back some data!  Writing a Response We‚Äôre going to implement sending data in response to a client request. Responses have the following format:  The first line is a status line that contains the HTTP version used in the response, a numeric status code that summarizes the result of the request, and a reason phrase that provides a text description of the status code. After the CRLF sequence are any headers, another CRLF sequence, and the body of the response.  Here is an example response that uses HTTP version ., has a status code of , an OK reason phrase, no headers, and no body:  The status code  is the standard success response. The text is a tiny successful HTTP response. Let‚Äôs write this to the stream as our response to a successful request! From the handle_connection function, remove the println! that was printing the request data and replace it with the code in Listing -.  Filename: src/main.rs  Listing -: Writing a tiny successful HTTP response to the stream  The first new line defines the response variable that holds the success message‚Äôs data. Then we call as_bytes on our response to convert the string data to bytes. The write_all method on stream takes a &[u] and sends those bytes directly down the connection. Because the write_all operation could fail, we use unwrap on any error result as before. Again, in a real application you would add error handling here.  With these changes, let‚Äôs run our code and make a request. We‚Äôre no longer printing any data to the terminal, so we won‚Äôt see any output other than the output from Cargo. When you load ...: in a web browser, you should get a blank page instead of an error. You‚Äôve just hand-coded receiving an HTTP request and sending a response!  Returning Real HTML Let‚Äôs implement the functionality for returning more than a blank page. Create the new file hello.html in the root of your project directory, not in the src directory. You can input any HTML you want; Listing - shows one possibility.  Filename: hello.html  Listing -: A sample HTML file to return in a response  This is a minimal HTML document with a heading and some text. To return this from the server when a request is received, we‚Äôll modify handle_connection as shown in Listing - to read the HTML file, add it to the response as a body, and send it.  Filename: src/main.rs  Listing -: Sending the contents of hello.html as the body of the response  We‚Äôve added fs to the use statement to bring the standard library‚Äôs filesystem module into scope. The code for reading the contents of a file to a string should look familiar; we used it in Chapter  when we read the contents of a file for our I/O project in Listing -.  Next, we use format! to add the file‚Äôs contents as the body of the success response. To ensure a valid HTTP response, we add the Content-Length header which is set to the size of our response body, in this case the size of hello.html.  Run this code with cargo run and load ...: in your browser; you should see your HTML rendered!  Currently, we‚Äôre ignoring the request data in http_request and just sending back the contents of the HTML file unconditionally. That means if you try requesting ...:/something-else in your browser, you‚Äôll still get back this same HTML response. At the moment, our server is very limited and does not do what most web servers do. We want to customize our responses depending on the request and only send back the HTML file for a well-formed request to /.  Validating the Request and Selectively Responding Right now, our web server will return the HTML in the file no matter what the client requested. Let‚Äôs add functionality to check that the browser is requesting / before returning the HTML file and return an error if the browser requests anything else. For this we need to modify handle_connection, as shown in Listing -. This new code checks the content of the request received against what we know a request for / looks like and adds if and else blocks to treat requests differently.  Filename: src/main.rs  Listing -: Handling requests to / differently from other requests  We‚Äôre only going to be looking at the first line of the HTTP request, so rather than reading the entire request into a vector, we‚Äôre calling next to get the first item from the iterator. The first unwrap takes care of the Option and stops the program if the iterator has no items. The second unwrap handles the Result and has the same effect as the unwrap that was in the map added in Listing -.  Next, we check the request_line to see if it equals the request line of a GET request to the / path. If it does, the if block returns the contents of our HTML file.  If the request_line does not equal the GET request to the / path, it means we‚Äôve received some other request. We‚Äôll add code to the else block in a moment to respond to all other requests.  Run this code now and request ...:; you should get the HTML in hello.html. If you make any other request, such as ...:/something-else, you‚Äôll get a connection error like those you saw when running the code in Listing - and Listing -.  Now let‚Äôs add the code in Listing - to the else block to return a response with the status code , which signals that the content for the request was not found. We‚Äôll also return some HTML for a page to render in the browser indicating the response to the end user.  Filename: src/main.rs  Listing -: Responding with status code  and an error page if anything other than / was requested  Here, our response has a status line with status code  and the reason phrase NOT FOUND. The body of the response will be the HTML in the file .html. You‚Äôll need to create a .html file next to hello.html for the error page; again feel free to use any HTML you want or use the example HTML in Listing -.  Filename: .html  Listing -: Sample content for the page to send back with any  response  With these changes, run your server again. Requesting ...: should return the contents of hello.html, and any other request, like ...:/foo, should return the error HTML from .html.  A Touch of Refactoring At the moment the if and else blocks have a lot of repetition: they‚Äôre both reading files and writing the contents of the files to the stream. The only differences are the status line and the filename. Let‚Äôs make the code more concise by pulling out those differences into separate if and else lines that will assign the values of the status line and the filename to variables; we can then use those variables unconditionally in the code to read the file and write the response. Listing - shows the resulting code after replacing the large if and else blocks.  Filename: src/main.rs  Listing -: Refactoring the if and else blocks to contain only the code that differs between the two cases  Now the if and else blocks only return the appropriate values for the status line and filename in a tuple; we then use destructuring to assign these two values to status_line and filename using a pattern in the let statement, as discussed in Chapter .  The previously duplicated code is now outside the if and else blocks and uses the status_line and filename variables. This makes it easier to see the difference between the two cases, and it means we have only one place to update the code if we want to change how the file reading and response writing work. The behavior of the code in Listing - will be the same as that in Listing -.  Awesome! We now have a simple web server in approximately  lines of Rust code that responds to one request with a page of content and responds to all other requests with a  response.  Currently, our server runs in a single thread, meaning it can only serve one request at a time. Let‚Äôs examine how that can be a problem by simulating some slow requests. Then we‚Äôll fix it so our server can handle multiple requests at once.  Turning Our Single-Threaded Server into a Multithreaded Server Right now, the server will process each request in turn, meaning it won‚Äôt process a second connection until the first is finished processing. If the server received more and more requests, this serial execution would be less and less optimal. If the server receives a request that takes a long time to process, subsequent requests will have to wait until the long request is finished, even if the new requests can be processed quickly. We‚Äôll need to fix this, but first, we‚Äôll look at the problem in action.  Simulating a Slow Request in the Current Server Implementation We‚Äôll look at how a slow-processing request can affect other requests made to our current server implementation. Listing - implements handling a request to /sleep with a simulated slow response that will cause the server to sleep for  seconds before responding.  Filename: src/main.rs  Listing -: Simulating a slow request by sleeping for  seconds  We switched from if to match now that we have three cases. We need to explicitly match on a slice of request_line to pattern match against the string literal values; match doesn‚Äôt do automatic referencing and dereferencing like the equality method does.  The first arm is the same as the if block from Listing -. The second arm matches a request to /sleep. When that request is received, the server will sleep for  seconds before rendering the successful HTML page. The third arm is the same as the else block from Listing -.  You can see how primitive our server is: real libraries would handle the recognition of multiple requests in a much less verbose way!  Start the server using cargo run. Then open two browser windows: one for http://...:/ and the other for http://...:/sleep. If you enter the / URI a few times, as before, you‚Äôll see it respond quickly. But if you enter /sleep and then load /, you‚Äôll see that / waits until sleep has slept for its full  seconds before loading.  There are multiple techniques we could use to avoid requests backing up behind a slow request; the one we‚Äôll implement is a thread pool.  Improving Throughput with a Thread Pool A thread pool is a group of spawned threads that are waiting and ready to handle a task. When the program receives a new task, it assigns one of the threads in the pool to the task, and that thread will process the task. The remaining threads in the pool are available to handle any other tasks that come in while the first thread is processing. When the first thread is done processing its task, it‚Äôs returned to the pool of idle threads, ready to handle a new task. A thread pool allows you to process connections concurrently, increasing the throughput of your server.  We‚Äôll limit the number of threads in the pool to a small number to protect us from Denial of Service (DoS) attacks; if we had our program create a new thread for each request as it came in, someone making  million requests to our server could create havoc by using up all our server‚Äôs resources and grinding the processing of requests to a halt.  Rather than spawning unlimited threads, then, we‚Äôll have a fixed number of threads waiting in the pool. Requests that come in are sent to the pool for processing. The pool will maintain a queue of incoming requests. Each of the threads in the pool will pop off a request from this queue, handle the request, and then ask the queue for another request. With this design, we can process up to N requests concurrently, where N is the number of threads. If each thread is responding to a long-running request, subsequent requests can still back up in the queue, but we‚Äôve increased the number of long-running requests we can handle before reaching that point.  This technique is just one of many ways to improve the throughput of a web server. Other options you might explore are the fork/join model, the single-threaded async I/O model, or the multi-threaded async I/O model. If you‚Äôre interested in this topic, you can read more about other solutions and try to implement them; with a low-level language like Rust, all of these options are possible.  Before we begin implementing a thread pool, let‚Äôs talk about what using the pool should look like. When you‚Äôre trying to design code, writing the client interface first can help guide your design. Write the API of the code so it‚Äôs structured in the way you want to call it; then implement the functionality within that structure rather than implementing the functionality and then designing the public API.  Similar to how we used test-driven development in the project in Chapter , we‚Äôll use compiler-driven development here. We‚Äôll write the code that calls the functions we want, and then we‚Äôll look at errors from the compiler to determine what we should change next to get the code to work. Before we do that, however, we‚Äôll explore the technique we‚Äôre not going to use as a starting point.   Spawning a Thread for Each Request First, let‚Äôs explore how our code might look if it did create a new thread for every connection. As mentioned earlier, this isn‚Äôt our final plan due to the problems with potentially spawning an unlimited number of threads, but it is a starting point to get a working multithreaded server first. Then we‚Äôll add the thread pool as an improvement, and contrasting the two solutions will be easier. Listing - shows the changes to make to main to spawn a new thread to handle each stream within the for loop.  Filename: src/main.rs  Listing -: Spawning a new thread for each stream  As you learned in Chapter , thread::spawn will create a new thread and then run the code in the closure in the new thread. If you run this code and load /sleep in your browser, then / in two more browser tabs, you‚Äôll indeed see that the requests to / don‚Äôt have to wait for /sleep to finish. However, as we mentioned, this will eventually overwhelm the system because you‚Äôd be making new threads without any limit.   Creating a Finite Number of Threads We want our thread pool to work in a similar, familiar way so switching from threads to a thread pool doesn‚Äôt require large changes to the code that uses our API. Listing - shows the hypothetical interface for a ThreadPool struct we want to use instead of thread::spawn.  Filename: src/main.rs  Listing -: Our ideal ThreadPool interface  We use ThreadPool::new to create a new thread pool with a configurable number of threads, in this case four. Then, in the for loop, pool.execute has a similar interface as thread::spawn in that it takes a closure the pool should run for each stream. We need to implement pool.execute so it takes the closure and gives it to a thread in the pool to run. This code won‚Äôt yet compile, but we‚Äôll try so the compiler can guide us in how to fix it.   Building ThreadPool Using Compiler Driven Development Make the changes in Listing - to src/main.rs, and then let‚Äôs use the compiler errors from cargo check to drive our development. Here is the first error we get:  Great! This error tells us we need a ThreadPool type or module, so we‚Äôll build one now. Our ThreadPool implementation will be independent of the kind of work our web server is doing. So, let‚Äôs switch the hello crate from a binary crate to a library crate to hold our ThreadPool implementation. After we change to a library crate, we could also use the separate thread pool library for any work we want to do using a thread pool, not just for serving web requests.  Create a src/lib.rs that contains the following, which is the simplest definition of a ThreadPool struct that we can have for now:  Filename: src/lib.rs  Then edit main.rs file to bring ThreadPool into scope from the library crate by adding the following code to the top of src/main.rs:  Filename: src/main.rs  This code still won‚Äôt work, but let‚Äôs check it again to get the next error that we need to address:  This error indicates that next we need to create an associated function named new for ThreadPool. We also know that new needs to have one parameter that can accept  as an argument and should return a ThreadPool instance. Let‚Äôs implement the simplest new function that will have those characteristics:  Filename: src/lib.rs  We chose usize as the type of the size parameter, because we know that a negative number of threads doesn‚Äôt make any sense. We also know we‚Äôll use this  as the number of elements in a collection of threads, which is what the usize type is for, as discussed in the ‚ÄúInteger Types‚Äù section of Chapter .  Let‚Äôs check the code again:  Now the error occurs because we don‚Äôt have an execute method on ThreadPool. Recall from the ‚ÄúCreating a Finite Number of Threads‚Äù section that we decided our thread pool should have an interface similar to thread::spawn. In addition, we‚Äôll implement the execute function so it takes the closure it‚Äôs given and gives it to an idle thread in the pool to run.  We‚Äôll define the execute method on ThreadPool to take a closure as a parameter. Recall from the ‚ÄúMoving Captured Values Out of the Closure and the Fn Traits‚Äù section in Chapter  that we can take closures as parameters with three different traits: Fn, FnMut, and FnOnce. We need to decide which kind of closure to use here. We know we‚Äôll end up doing something similar to the standard library thread::spawn implementation, so we can look at what bounds the signature of thread::spawn has on its parameter. The documentation shows us the following:  The F type parameter is the one we‚Äôre concerned with here; the T type parameter is related to the return value, and we‚Äôre not concerned with that. We can see that spawn uses FnOnce as the trait bound on F. This is probably what we want as well, because we‚Äôll eventually pass the argument we get in execute to spawn. We can be further confident that FnOnce is the trait we want to use because the thread for running a request will only execute that request‚Äôs closure one time, which matches the Once in FnOnce.  The F type parameter also has the trait bound Send and the lifetime bound 'static, which are useful in our situation: we need Send to transfer the closure from one thread to another and 'static because we don‚Äôt know how long the thread will take to execute. Let‚Äôs create an execute method on ThreadPool that will take a generic parameter of type F with these bounds:  Filename: src/lib.rs  We still use the () after FnOnce because this FnOnce represents a closure that takes no parameters and returns the unit type (). Just like function definitions, the return type can be omitted from the signature, but even if we have no parameters, we still need the parentheses.  Again, this is the simplest implementation of the execute method: it does nothing, but we‚Äôre trying only to make our code compile. Let‚Äôs check it again:  It compiles! But note that if you try cargo run and make a request in the browser, you‚Äôll see the errors in the browser that we saw at the beginning of the chapter. Our library isn‚Äôt actually calling the closure passed to execute yet!  Note: A saying you might hear about languages with strict compilers, such as Haskell and Rust, is ‚Äúif the code compiles, it works.‚Äù But this saying is not universally true. Our project compiles, but it does absolutely nothing! If we were building a real, complete project, this would be a good time to start writing unit tests to check that the code compiles and has the behavior we want.  Validating the Number of Threads in new We aren‚Äôt doing anything with the parameters to new and execute. Let‚Äôs implement the bodies of these functions with the behavior we want. To start, let‚Äôs think about new. Earlier we chose an unsigned type for the size parameter, because a pool with a negative number of threads makes no sense. However, a pool with zero threads also makes no sense, yet zero is a perfectly valid usize. We‚Äôll add code to check that size is greater than zero before we return a ThreadPool instance and have the program panic if it receives a zero by using the assert! macro, as shown in Listing -.  Filename: src/lib.rs  Listing -: Implementing ThreadPool::new to panic if size is zero  We‚Äôve also added some documentation for our ThreadPool with doc comments. Note that we followed good documentation practices by adding a section that calls out the situations in which our function can panic, as discussed in Chapter . Try running cargo doc --open and clicking the ThreadPool struct to see what the generated docs for new look like!  Instead of adding the assert! macro as we‚Äôve done here, we could change new into build and return a Result like we did with Config::build in the I/O project in Listing -. But we‚Äôve decided in this case that trying to create a thread pool without any threads should be an unrecoverable error. If you‚Äôre feeling ambitious, try to write a function named build with the following signature to compare with the new function:  Creating Space to Store the Threads Now that we have a way to know we have a valid number of threads to store in the pool, we can create those threads and store them in the ThreadPool struct before returning the struct. But how do we ‚Äústore‚Äù a thread? Let‚Äôs take another look at the thread::spawn signature:  The spawn function returns a JoinHandle<T>, where T is the type that the closure returns. Let‚Äôs try using JoinHandle too and see what happens. In our case, the closures we‚Äôre passing to the thread pool will handle the connection and not return anything, so T will be the unit type ().  The code in Listing - will compile but doesn‚Äôt create any threads yet. We‚Äôve changed the definition of ThreadPool to hold a vector of thread::JoinHandle<()> instances, initialized the vector with a capacity of size, set up a for loop that will run some code to create the threads, and returned a ThreadPool instance containing them.  Filename: src/lib.rs  Listing -: Creating a vector for ThreadPool to hold the threads  We‚Äôve brought std::thread into scope in the library crate, because we‚Äôre using thread::JoinHandle as the type of the items in the vector in ThreadPool.  Once a valid size is received, our ThreadPool creates a new vector that can hold size items. The with_capacity function performs the same task as Vec::new but with an important difference: it preallocates space in the vector. Because we know we need to store size elements in the vector, doing this allocation up front is slightly more efficient than using Vec::new, which resizes itself as elements are inserted.  When you run cargo check again, it should succeed.  A Worker Struct Responsible for Sending Code from the ThreadPool to a Thread We left a comment in the for loop in Listing - regarding the creation of threads. Here, we‚Äôll look at how we actually create threads. The standard library provides thread::spawn as a way to create threads, and thread::spawn expects to get some code the thread should run as soon as the thread is created. However, in our case, we want to create the threads and have them wait for code that we‚Äôll send later. The standard library‚Äôs implementation of threads doesn‚Äôt include any way to do that; we have to implement it manually.  We‚Äôll implement this behavior by introducing a new data structure between the ThreadPool and the threads that will manage this new behavior. We‚Äôll call this data structure Worker, which is a common term in pooling implementations. The Worker picks up code that needs to be run and runs the code in the Worker‚Äôs thread. Think of people working in the kitchen at a restaurant: the workers wait until orders come in from customers, and then they‚Äôre responsible for taking those orders and fulfilling them.  Instead of storing a vector of JoinHandle<()> instances in the thread pool, we‚Äôll store instances of the Worker struct. Each Worker will store a single JoinHandle<()> instance. Then we‚Äôll implement a method on Worker that will take a closure of code to run and send it to the already running thread for execution. We‚Äôll also give each worker an id so we can distinguish between the different workers in the pool when logging or debugging.  Here is the new process that will happen when we create a ThreadPool. We‚Äôll implement the code that sends the closure to the thread after we have Worker set up in this way:  Define a Worker struct that holds an id and a JoinHandle<()>. Change ThreadPool to hold a vector of Worker instances. Define a Worker::new function that takes an id number and returns a Worker instance that holds the id and a thread spawned with an empty closure. In ThreadPool::new, use the for loop counter to generate an id, create a new Worker with that id, and store the worker in the vector. If you‚Äôre up for a challenge, try implementing these changes on your own before looking at the code in Listing -.  Ready? Here is Listing - with one way to make the preceding modifications.  Filename: src/lib.rs  Listing -: Modifying ThreadPool to hold Worker instances instead of holding threads directly  We‚Äôve changed the name of the field on ThreadPool from threads to workers because it‚Äôs now holding Worker instances instead of JoinHandle<()> instances. We use the counter in the for loop as an argument to Worker::new, and we store each new Worker in the vector named workers.  External code (like our server in src/main.rs) doesn‚Äôt need to know the implementation details regarding using a Worker struct within ThreadPool, so we make the Worker struct and its new function private. The Worker::new function uses the id we give it and stores a JoinHandle<()> instance that is created by spawning a new thread using an empty closure.  Note: If the operating system can‚Äôt create a thread because there aren‚Äôt enough system resources, thread::spawn will panic. That will cause our whole server to panic, even though the creation of some threads might succeed. For simplicity‚Äôs sake, this behavior is fine, but in a production thread pool implementation, you‚Äôd likely want to use std::thread::Builder and its spawn method that returns Result instead.  This code will compile and will store the number of Worker instances we specified as an argument to ThreadPool::new. But we‚Äôre still not processing the closure that we get in execute. Let‚Äôs look at how to do that next.  Sending Requests to Threads via Channels The next problem we‚Äôll tackle is that the closures given to thread::spawn do absolutely nothing. Currently, we get the closure we want to execute in the execute method. But we need to give thread::spawn a closure to run when we create each Worker during the creation of the ThreadPool.  We want the Worker structs that we just created to fetch the code to run from a queue held in the ThreadPool and send that code to its thread to run.  The channels we learned about in Chapter ‚Äîa simple way to communicate between two threads‚Äîwould be perfect for this use case. We‚Äôll use a channel to function as the queue of jobs, and execute will send a job from the ThreadPool to the Worker instances, which will send the job to its thread. Here is the plan:  The ThreadPool will create a channel and hold on to the sender. Each Worker will hold on to the receiver. We‚Äôll create a new Job struct that will hold the closures we want to send down the channel. The execute method will send the job it wants to execute through the sender. In its thread, the Worker will loop over its receiver and execute the closures of any jobs it receives. Let‚Äôs start by creating a channel in ThreadPool::new and holding the sender in the ThreadPool instance, as shown in Listing -. The Job struct doesn‚Äôt hold anything for now but will be the type of item we‚Äôre sending down the channel.  Filename: src/lib.rs  Listing -: Modifying ThreadPool to store the sender of a channel that transmits Job instances  In ThreadPool::new, we create our new channel and have the pool hold the sender. This will successfully compile.  Let‚Äôs try passing a receiver of the channel into each worker as the thread pool creates the channel. We know we want to use the receiver in the thread that the workers spawn, so we‚Äôll reference the receiver parameter in the closure. The code in Listing - won‚Äôt quite compile yet.  Filename: src/lib.rs  Listing -: Passing the receiver to the workers  We‚Äôve made some small and straightforward changes: we pass the receiver into Worker::new, and then we use it inside the closure.  When we try to check this code, we get this error:  The code is trying to pass receiver to multiple Worker instances. This won‚Äôt work, as you‚Äôll recall from Chapter : the channel implementation that Rust provides is multiple producer, single consumer. This means we can‚Äôt just clone the consuming end of the channel to fix this code. We also don‚Äôt want to send a message multiple times to multiple consumers; we want one list of messages with multiple workers such that each message gets processed once.  Additionally, taking a job off the channel queue involves mutating the receiver, so the threads need a safe way to share and modify receiver; otherwise, we might get race conditions (as covered in Chapter ).  Recall the thread-safe smart pointers discussed in Chapter : to share ownership across multiple threads and allow the threads to mutate the value, we need to use Arc<Mutex<T>>. The Arc type will let multiple workers own the receiver, and Mutex will ensure that only one worker gets a job from the receiver at a time. Listing - shows the changes we need to make.  Filename: src/lib.rs  Listing -: Sharing the receiver among the workers using Arc and Mutex  In ThreadPool::new, we put the receiver in an Arc and a Mutex. For each new worker, we clone the Arc to bump the reference count so the workers can share ownership of the receiver.  With these changes, the code compiles! We‚Äôre getting there!  Implementing the execute Method Let‚Äôs finally implement the execute method on ThreadPool. We‚Äôll also change Job from a struct to a type alias for a trait object that holds the type of closure that execute receives. As discussed in the ‚ÄúCreating Type Synonyms with Type Aliases‚Äù section of Chapter , type aliases allow us to make long types shorter for ease of use. Look at Listing -.  Filename: src/lib.rs  Listing -: Creating a Job type alias for a Box that holds each closure and then sending the job down the channel  After creating a new Job instance using the closure we get in execute, we send that job down the sending end of the channel. We‚Äôre calling unwrap on send for the case that sending fails. This might happen if, for example, we stop all our threads from executing, meaning the receiving end has stopped receiving new messages. At the moment, we can‚Äôt stop our threads from executing: our threads continue executing as long as the pool exists. The reason we use unwrap is that we know the failure case won‚Äôt happen, but the compiler doesn‚Äôt know that.  But we‚Äôre not quite done yet! In the worker, our closure being passed to thread::spawn still only references the receiving end of the channel. Instead, we need the closure to loop forever, asking the receiving end of the channel for a job and running the job when it gets one. Let‚Äôs make the change shown in Listing - to Worker::new.  Filename: src/lib.rs  Listing -: Receiving and executing the jobs in the worker‚Äôs thread  Here, we first call lock on the receiver to acquire the mutex, and then we call unwrap to panic on any errors. Acquiring a lock might fail if the mutex is in a poisoned state, which can happen if some other thread panicked while holding the lock rather than releasing the lock. In this situation, calling unwrap to have this thread panic is the correct action to take. Feel free to change this unwrap to an expect with an error message that is meaningful to you.  If we get the lock on the mutex, we call recv to receive a Job from the channel. A final unwrap moves past any errors here as well, which might occur if the thread holding the sender has shut down, similar to how the send method returns Err if the receiver shuts down.  The call to recv blocks, so if there is no job yet, the current thread will wait until a job becomes available. The Mutex<T> ensures that only one Worker thread at a time is trying to request a job.  Our thread pool is now in a working state! Give it a cargo run and make some requests:  Success! We now have a thread pool that executes connections asynchronously. There are never more than four threads created, so our system won‚Äôt get overloaded if the server receives a lot of requests. If we make a request to /sleep, the server will be able to serve other requests by having another thread run them.  Note: If you open /sleep in multiple browser windows simultaneously, they might load one at a time in  second intervals. Some web browsers execute multiple instances of the same request sequentially for caching reasons. This limitation is not caused by our web server.  After learning about the while let loop in Chapter , you might be wondering why we didn‚Äôt write the worker thread code as shown in Listing -.  Filename: src/lib.rs  Listing -: An alternative implementation of Worker::new using while let  This code compiles and runs but doesn‚Äôt result in the desired threading behavior: a slow request will still cause other requests to wait to be processed. The reason is somewhat subtle: the Mutex struct has no public unlock method because the ownership of the lock is based on the lifetime of the MutexGuard<T> within the LockResult<MutexGuard<T>> that the lock method returns. At compile time, the borrow checker can then enforce the rule that a resource guarded by a Mutex cannot be accessed unless we hold the lock. However, this implementation can also result in the lock being held longer than intended if we aren‚Äôt mindful of the lifetime of the MutexGuard<T>.  The code in Listing - that uses let job = receiver.lock().unwrap().recv().unwrap(); works because with let, any temporary values used in the expression on the right hand side of the equals sign are immediately dropped when the let statement ends. However, while let (and if let and match) does not drop temporary values until the end of the associated block. In Listing -, the lock remains held for the duration of the call to job(), meaning other workers cannot receive jobs.  Graceful Shutdown and Cleanup The code in Listing - is responding to requests asynchronously through the use of a thread pool, as we intended. We get some warnings about the workers, id, and thread fields that we‚Äôre not using in a direct way that reminds us we‚Äôre not cleaning up anything. When we use the less elegant ctrl-c method to halt the main thread, all other threads are stopped immediately as well, even if they‚Äôre in the middle of serving a request.  Next, then, we‚Äôll implement the Drop trait to call join on each of the threads in the pool so they can finish the requests they‚Äôre working on before closing. Then we‚Äôll implement a way to tell the threads they should stop accepting new requests and shut down. To see this code in action, we‚Äôll modify our server to accept only two requests before gracefully shutting down its thread pool.  Implementing the Drop Trait on ThreadPool Let‚Äôs start with implementing Drop on our thread pool. When the pool is dropped, our threads should all join to make sure they finish their work. Listing - shows a first attempt at a Drop implementation; this code won‚Äôt quite work yet.  Filename: src/lib.rs  Listing -: Joining each thread when the thread pool goes out of scope  First, we loop through each of the thread pool workers. We use &mut for this because self is a mutable reference, and we also need to be able to mutate worker. For each worker, we print a message saying that this particular worker is shutting down, and then we call join on that worker‚Äôs thread. If the call to join fails, we use unwrap to make Rust panic and go into an ungraceful shutdown.  Here is the error we get when we compile this code:  The error tells us we can‚Äôt call join because we only have a mutable borrow of each worker and join takes ownership of its argument. To solve this issue, we need to move the thread out of the Worker instance that owns thread so join can consume the thread. We did this in Listing -: if Worker holds an Option<thread::JoinHandle<()>> instead, we can call the take method on the Option to move the value out of the Some variant and leave a None variant in its place. In other words, a Worker that is running will have a Some variant in thread, and when we want to clean up a Worker, we‚Äôll replace Some with None so the Worker doesn‚Äôt have a thread to run.  So we know we want to update the definition of Worker like this:  Filename: src/lib.rs  Now let‚Äôs lean on the compiler to find the other places that need to change. Checking this code, we get two errors:  Let‚Äôs address the second error, which points to the code at the end of Worker::new; we need to wrap the thread value in Some when we create a new Worker. Make the following changes to fix this error:  Filename: src/lib.rs  The first error is in our Drop implementation. We mentioned earlier that we intended to call take on the Option value to move thread out of worker. The following changes will do so:  Filename: src/lib.rs  As discussed in Chapter , the take method on Option takes the Some variant out and leaves None in its place. We‚Äôre using if let to destructure the Some and get the thread; then we call join on the thread. If a worker‚Äôs thread is already None, we know that worker has already had its thread cleaned up, so nothing happens in that case.  Signaling to the Threads to Stop Listening for Jobs With all the changes we‚Äôve made, our code compiles without any warnings. However, the bad news is this code doesn‚Äôt function the way we want it to yet. The key is the logic in the closures run by the threads of the Worker instances: at the moment, we call join, but that won‚Äôt shut down the threads because they loop forever looking for jobs. If we try to drop our ThreadPool with our current implementation of drop, the main thread will block forever waiting for the first thread to finish.  To fix this problem, we‚Äôll need a change in the ThreadPool drop implementation and then a change in the Worker loop.  First, we‚Äôll change the ThreadPool drop implementation to explicitly drop the sender before waiting for the threads to finish. Listing - shows the changes to ThreadPool to explicitly drop sender. We use the same Option and take technique as we did with the thread to be able to move sender out of ThreadPool:  Filename: src/lib.rs  Listing -: Explicitly drop sender before joining the worker threads  Dropping sender closes the channel, which indicates no more messages will be sent. When that happens, all the calls to recv that the workers do in the infinite loop will return an error. In Listing -, we change the Worker loop to gracefully exit the loop in that case, which means the threads will finish when the ThreadPool drop implementation calls join on them.  Filename: src/lib.rs  Listing -: Explicitly break out of the loop when recv returns an error  To see this code in action, let‚Äôs modify main to accept only two requests before gracefully shutting down the server, as shown in Listing -.  Filename: src/main.rs  Listing -: Shut down the server after serving two requests by exiting the loop  You wouldn‚Äôt want a real-world web server to shut down after serving only two requests. This code just demonstrates that the graceful shutdown and cleanup is in working order.  The take method is defined in the Iterator trait and limits the iteration to the first two items at most. The ThreadPool will go out of scope at the end of main, and the drop implementation will run.  Start the server with cargo run, and make three requests. The third request should error, and in your terminal you should see output similar to this:  You might see a different ordering of workers and messages printed. We can see how this code works from the messages: workers  and  got the first two requests. The server stopped accepting connections after the second connection, and the Drop implementation on ThreadPool starts executing before worker  even starts its job. Dropping the sender disconnects all the workers and tells them to shut down. The workers each print a message when they disconnect, and then the thread pool calls join to wait for each worker thread to finish.  Notice one interesting aspect of this particular execution: the ThreadPool dropped the sender, and before any worker received an error, we tried to join worker . Worker  had not yet gotten an error from recv, so the main thread blocked waiting for worker  to finish. In the meantime, worker  received a job and then all threads received an error. When worker  finished, the main thread waited for the rest of the workers to finish. At that point, they had all exited their loops and stopped.  Congrats! We‚Äôve now completed our project; we have a basic web server that uses a thread pool to respond asynchronously. We‚Äôre able to perform a graceful shutdown of the server, which cleans up all the threads in the pool.  Here‚Äôs the full code for reference:  Filename: src/main.rs  Filename: src/lib.rs  We could do more here! If you want to continue enhancing this project, here are some ideas:  Add more documentation to ThreadPool and its public methods. Add tests of the library‚Äôs functionality. Change calls to unwrap to more robust error handling. Use ThreadPool to perform some task other than serving web requests. Find a thread pool crate on crates.io and implement a similar web server using the crate instead. Then compare its API and robustness to the thread pool we implemented. Summary Well done! You‚Äôve made it to the end of the book! We want to thank you for joining us on this tour of Rust. You‚Äôre now ready to implement your own Rust projects and help with other peoples‚Äô projects. Keep in mind that there is a welcoming community of other Rustaceans who would love to help you with any challenges you encounter on your Rust journey.  Appendix The following sections contain reference material you may find useful in your Rust journey.  Appendix A: Keywords The following list contains keywords that are reserved for current or future use by the Rust language. As such, they cannot be used as identifiers (except as raw identifiers as we‚Äôll discuss in the ‚ÄúRaw Identifiers‚Äù section). Identifiers are names of functions, variables, parameters, struct fields, modules, crates, constants, macros, static values, attributes, types, traits, or lifetimes.  Keywords Currently in Use The following is a list of keywords currently in use, with their functionality described.  as - perform primitive casting, disambiguate the specific trait containing an item, or rename items in use statements async - return a Future instead of blocking the current thread await - suspend execution until the result of a Future is ready break - exit a loop immediately const - define constant items or constant raw pointers continue - continue to the next loop iteration crate - in a module path, refers to the crate root dyn - dynamic dispatch to a trait object else - fallback for if and if let control flow constructs enum - define an enumeration extern - link an external function or variable false - Boolean false literal fn - define a function or the function pointer type for - loop over items from an iterator, implement a trait, or specify a higher-ranked lifetime if - branch based on the result of a conditional expression impl - implement inherent or trait functionality in - part of for loop syntax let - bind a variable loop - loop unconditionally match - match a value to patterns mod - define a module move - make a closure take ownership of all its captures mut - denote mutability in references, raw pointers, or pattern bindings pub - denote public visibility in struct fields, impl blocks, or modules ref - bind by reference return - return from function Self - a type alias for the type we are defining or implementing self - method subject or current module static - global variable or lifetime lasting the entire program execution struct - define a structure super - parent module of the current module trait - define a trait true - Boolean true literal type - define a type alias or associated type union - define a union; is only a keyword when used in a union declaration unsafe - denote unsafe code, functions, traits, or implementations use - bring symbols into scope where - denote clauses that constrain a type while - loop conditionally based on the result of an expression Keywords Reserved for Future Use The following keywords do not yet have any functionality but are reserved by Rust for potential future use.  abstract become box do final macro override priv try typeof unsized virtual yield Raw Identifiers Raw identifiers are the syntax that lets you use keywords where they wouldn‚Äôt normally be allowed. You use a raw identifier by prefixing a keyword with r#.  For example, match is a keyword. If you try to compile the following function that uses match as its name:  Filename: src/main.rs  you‚Äôll get this error:  The error shows that you can‚Äôt use the keyword match as the function identifier. To use match as a function name, you need to use the raw identifier syntax, like this:  Filename: src/main.rs  This code will compile without any errors. Note the r# prefix on the function name in its definition as well as where the function is called in main.  Raw identifiers allow you to use any word you choose as an identifier, even if that word happens to be a reserved keyword. This gives us more freedom to choose identifier names, as well as lets us integrate with programs written in a language where these words aren‚Äôt keywords. In addition, raw identifiers allow you to use libraries written in a different Rust edition than your crate uses. For example, try isn‚Äôt a keyword in the  edition but is in the  edition. If you depend on a library that‚Äôs written using the  edition and has a try function, you‚Äôll need to use the raw identifier syntax, r#try in this case, to call that function from your  edition code. See Appendix E for more information on editions.  Appendix B: Operators and Symbols This appendix contains a glossary of Rust‚Äôs syntax, including operators and other symbols that appear by themselves or in the context of paths, generics, trait bounds, macros, attributes, comments, tuples, and brackets.  Operators Table B- contains the operators in Rust, an example of how the operator would appear in context, a short explanation, and whether that operator is overloadable. If an operator is overloadable, the relevant trait to use to overload that operator is listed.  Table B-: Operators  Operator	Example	Explanation	Overloadable? !	ident!(...), ident!{...}, ident![...]	Macro expansion	 !	!expr	Bitwise or logical complement	Not !=	expr != expr	Nonequality comparison	PartialEq %	expr % expr	Arithmetic remainder	Rem %=	var %= expr	Arithmetic remainder and assignment	RemAssign &	&expr, &mut expr	Borrow	 &	&type, &mut type, &'a type, &'a mut type	Borrowed pointer type	 &	expr & expr	Bitwise AND	BitAnd &=	var &= expr	Bitwise AND and assignment	BitAndAssign &&	expr && expr	Short-circuiting logical AND	 *	expr * expr	Arithmetic multiplication	Mul *=	var *= expr	Arithmetic multiplication and assignment	MulAssign *	*expr	Dereference	Deref *	*const type, *mut type	Raw pointer	 +	trait + trait, 'a + trait	Compound type constraint	 +	expr + expr	Arithmetic addition	Add +=	var += expr	Arithmetic addition and assignment	AddAssign ,	expr, expr	Argument and element separator	 -	- expr	Arithmetic negation	Neg -	expr - expr	Arithmetic subtraction	Sub -=	var -= expr	Arithmetic subtraction and assignment	SubAssign ->	fn(...) -> type, |...| -> type	Function and closure return type	 .	expr.ident	Member access	 ..	.., expr.., ..expr, expr..expr	Right-exclusive range literal	PartialOrd ..=	..=expr, expr..=expr	Right-inclusive range literal	PartialOrd ..	..expr	Struct literal update syntax	 ..	variant(x, ..), struct_type { x, .. }	‚ÄúAnd the rest‚Äù pattern binding	 ...	expr...expr	(Deprecated, use ..= instead) In a pattern: inclusive range pattern	 /	expr / expr	Arithmetic division	Div /=	var /= expr	Arithmetic division and assignment	DivAssign :	pat: type, ident: type	Constraints	 :	ident: expr	Struct field initializer	 :	'a: loop {...}	Loop label	 ;	expr;	Statement and item terminator	 ;	[...; len]	Part of fixed-size array syntax	 <<	expr << expr	Left-shift	Shl <<=	var <<= expr	Left-shift and assignment	ShlAssign <	expr < expr	Less than comparison	PartialOrd <=	expr <= expr	Less than or equal to comparison	PartialOrd =	var = expr, ident = type	Assignment/equivalence	 ==	expr == expr	Equality comparison	PartialEq =>	pat => expr	Part of match arm syntax	 >	expr > expr	Greater than comparison	PartialOrd >=	expr >= expr	Greater than or equal to comparison	PartialOrd >>	expr >> expr	Right-shift	Shr >>=	var >>= expr	Right-shift and assignment	ShrAssign @	ident @ pat	Pattern binding	 ^	expr ^ expr	Bitwise exclusive OR	BitXor ^=	var ^= expr	Bitwise exclusive OR and assignment	BitXorAssign |	pat | pat	Pattern alternatives	 |	expr | expr	Bitwise OR	BitOr |=	var |= expr	Bitwise OR and assignment	BitOrAssign ||	expr || expr	Short-circuiting logical OR	 ?	expr?	Error propagation	 Non-operator Symbols The following list contains all symbols that don‚Äôt function as operators; that is, they don‚Äôt behave like a function or method call.  Table B- shows symbols that appear on their own and are valid in a variety of locations.  Table B-: Stand-Alone Syntax  Symbol	Explanation 'ident	Named lifetime or loop label ...u, ...i, ...f, ...usize, etc.	Numeric literal of specific type "..."	String literal r"...", r#"..."#, r##"..."##, etc.	Raw string literal, escape characters not processed b"..."	Byte string literal; constructs an array of bytes instead of a string br"...", br#"..."#, br##"..."##, etc.	Raw byte string literal, combination of raw and byte string literal '...'	Character literal b'...'	ASCII byte literal |...| expr	Closure !	Always empty bottom type for diverging functions _	‚ÄúIgnored‚Äù pattern binding; also used to make integer literals readable Table B- shows symbols that appear in the context of a path through the module hierarchy to an item.  Table B-: Path-Related Syntax  Symbol	Explanation ident::ident	Namespace path ::path	Path relative to the crate root (i.e., an explicitly absolute path) self::path	Path relative to the current module (i.e., an explicitly relative path). super::path	Path relative to the parent of the current module type::ident, <type as trait>::ident	Associated constants, functions, and types <type>::...	Associated item for a type that cannot be directly named (e.g., <&T>::..., <[T]>::..., etc.) trait::method(...)	Disambiguating a method call by naming the trait that defines it type::method(...)	Disambiguating a method call by naming the type for which it‚Äôs defined <type as trait>::method(...)	Disambiguating a method call by naming the trait and type Table B- shows symbols that appear in the context of using generic type parameters.  Table B-: Generics  Symbol	Explanation path<...>	Specifies parameters to generic type in a type (e.g., Vec<u>) path::<...>, method::<...>	Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e.g., "".parse::<i>()) fn ident<...> ...	Define generic function struct ident<...> ...	Define generic structure enum ident<...> ...	Define generic enumeration impl<...> ...	Define generic implementation for<...> type	Higher-ranked lifetime bounds type<ident=type>	A generic type where one or more associated types have specific assignments (e.g., Iterator<Item=T>) Table B- shows symbols that appear in the context of constraining generic type parameters with trait bounds.  Table B-: Trait Bound Constraints  Symbol	Explanation T: U	Generic parameter T constrained to types that implement U T: 'a	Generic type T must outlive lifetime 'a (meaning the type cannot transitively contain any references with lifetimes shorter than 'a) T: 'static	Generic type T contains no borrowed references other than 'static ones 'b: 'a	Generic lifetime 'b must outlive lifetime 'a T: ?Sized	Allow generic type parameter to be a dynamically sized type 'a + trait, trait + trait	Compound type constraint Table B- shows symbols that appear in the context of calling or defining macros and specifying attributes on an item.  Table B-: Macros and Attributes  Symbol	Explanation #[meta]	Outer attribute #![meta]	Inner attribute $ident	Macro substitution $ident:kind	Macro capture $(‚Ä¶)‚Ä¶	Macro repetition ident!(...), ident!{...}, ident![...]	Macro invocation Table B- shows symbols that create comments.  Table B-: Comments  Symbol	Explanation //	Line comment //!	Inner line doc comment ///	Outer line doc comment /*...*/	Block comment /*!...*/	Inner block doc comment /**...*/	Outer block doc comment Table B- shows symbols that appear in the context of using tuples.  Table B-: Tuples  Symbol	Explanation ()	Empty tuple (aka unit), both literal and type (expr)	Parenthesized expression (expr,)	Single-element tuple expression (type,)	Single-element tuple type (expr, ...)	Tuple expression (type, ...)	Tuple type expr(expr, ...)	Function call expression; also used to initialize tuple structs and tuple enum variants expr., expr., etc.	Tuple indexing Table B- shows the contexts in which curly braces are used.  Table B-: Curly Brackets  Context	Explanation {...}	Block expression Type {...}	struct literal Table B- shows the contexts in which square brackets are used.  Table B-: Square Brackets  Context	Explanation [...]	Array literal [expr; len]	Array literal containing len copies of expr [type; len]	Array type containing len instances of type expr[expr]	Collection indexing. Overloadable (Index, IndexMut) expr[..], expr[a..], expr[..b], expr[a..b]	Collection indexing pretending to be collection slicing, using Range, RangeFrom, RangeTo, or RangeFull as the ‚Äúindex‚Äù Appendix C: Derivable Traits In various places in the book, we‚Äôve discussed the derive attribute, which you can apply to a struct or enum definition. The derive attribute generates code that will implement a trait with its own default implementation on the type you‚Äôve annotated with the derive syntax.  In this appendix, we provide a reference of all the traits in the standard library that you can use with derive. Each section covers:  What operators and methods deriving this trait will enable What the implementation of the trait provided by derive does What implementing the trait signifies about the type The conditions in which you‚Äôre allowed or not allowed to implement the trait Examples of operations that require the trait If you want different behavior from that provided by the derive attribute, consult the standard library documentation for each trait for details of how to manually implement them.  These traits listed here are the only ones defined by the standard library that can be implemented on your types using derive. Other traits defined in the standard library don‚Äôt have sensible default behavior, so it‚Äôs up to you to implement them in the way that makes sense for what you‚Äôre trying to accomplish.  An example of a trait that can‚Äôt be derived is Display, which handles formatting for end users. You should always consider the appropriate way to display a type to an end user. What parts of the type should an end user be allowed to see? What parts would they find relevant? What format of the data would be most relevant to them? The Rust compiler doesn‚Äôt have this insight, so it can‚Äôt provide appropriate default behavior for you.  The list of derivable traits provided in this appendix is not comprehensive: libraries can implement derive for their own traits, making the list of traits you can use derive with truly open-ended. Implementing derive involves using a procedural macro, which is covered in the ‚ÄúMacros‚Äù section of Chapter .  Debug for Programmer Output The Debug trait enables debug formatting in format strings, which you indicate by adding :? within {} placeholders.  The Debug trait allows you to print instances of a type for debugging purposes, so you and other programmers using your type can inspect an instance at a particular point in a program‚Äôs execution.  The Debug trait is required, for example, in using the assert_eq! macro. This macro prints the values of instances given as arguments if the equality assertion fails so programmers can see why the two instances weren‚Äôt equal.  PartialEq and Eq for Equality Comparisons The PartialEq trait allows you to compare instances of a type to check for equality and enables use of the == and != operators.  Deriving PartialEq implements the eq method. When PartialEq is derived on structs, two instances are equal only if all fields are equal, and the instances are not equal if any fields are not equal. When derived on enums, each variant is equal to itself and not equal to the other variants.  The PartialEq trait is required, for example, with the use of the assert_eq! macro, which needs to be able to compare two instances of a type for equality.  The Eq trait has no methods. Its purpose is to signal that for every value of the annotated type, the value is equal to itself. The Eq trait can only be applied to types that also implement PartialEq, although not all types that implement PartialEq can implement Eq. One example of this is floating point number types: the implementation of floating point numbers states that two instances of the not-a-number (NaN) value are not equal to each other.  An example of when Eq is required is for keys in a HashMap<K, V> so the HashMap<K, V> can tell whether two keys are the same.  PartialOrd and Ord for Ordering Comparisons The PartialOrd trait allows you to compare instances of a type for sorting purposes. A type that implements PartialOrd can be used with the <, >, <=, and >= operators. You can only apply the PartialOrd trait to types that also implement PartialEq.  Deriving PartialOrd implements the partial_cmp method, which returns an Option<Ordering> that will be None when the values given don‚Äôt produce an ordering. An example of a value that doesn‚Äôt produce an ordering, even though most values of that type can be compared, is the not-a-number (NaN) floating point value. Calling partial_cmp with any floating point number and the NaN floating point value will return None.  When derived on structs, PartialOrd compares two instances by comparing the value in each field in the order in which the fields appear in the struct definition. When derived on enums, variants of the enum declared earlier in the enum definition are considered less than the variants listed later.  The PartialOrd trait is required, for example, for the gen_range method from the rand crate that generates a random value in the range specified by a range expression.  The Ord trait allows you to know that for any two values of the annotated type, a valid ordering will exist. The Ord trait implements the cmp method, which returns an Ordering rather than an Option<Ordering> because a valid ordering will always be possible. You can only apply the Ord trait to types that also implement PartialOrd and Eq (and Eq requires PartialEq). When derived on structs and enums, cmp behaves the same way as the derived implementation for partial_cmp does with PartialOrd.  An example of when Ord is required is when storing values in a BTreeSet<T>, a data structure that stores data based on the sort order of the values.  Clone and Copy for Duplicating Values The Clone trait allows you to explicitly create a deep copy of a value, and the duplication process might involve running arbitrary code and copying heap data. See the ‚ÄúWays Variables and Data Interact: Clone‚Äù section in Chapter  for more information on Clone.  Deriving Clone implements the clone method, which when implemented for the whole type, calls clone on each of the parts of the type. This means all the fields or values in the type must also implement Clone to derive Clone.  An example of when Clone is required is when calling the to_vec method on a slice. The slice doesn‚Äôt own the type instances it contains, but the vector returned from to_vec will need to own its instances, so to_vec calls clone on each item. Thus, the type stored in the slice must implement Clone.  The Copy trait allows you to duplicate a value by only copying bits stored on the stack; no arbitrary code is necessary. See the ‚ÄúStack-Only Data: Copy‚Äù section in Chapter  for more information on Copy.  The Copy trait doesn‚Äôt define any methods to prevent programmers from overloading those methods and violating the assumption that no arbitrary code is being run. That way, all programmers can assume that copying a value will be very fast.  You can derive Copy on any type whose parts all implement Copy. A type that implements Copy must also implement Clone, because a type that implements Copy has a trivial implementation of Clone that performs the same task as Copy.  The Copy trait is rarely required; types that implement Copy have optimizations available, meaning you don‚Äôt have to call clone, which makes the code more concise.  Everything possible with Copy you can also accomplish with Clone, but the code might be slower or have to use clone in places.  Hash for Mapping a Value to a Value of Fixed Size The Hash trait allows you to take an instance of a type of arbitrary size and map that instance to a value of fixed size using a hash function. Deriving Hash implements the hash method. The derived implementation of the hash method combines the result of calling hash on each of the parts of the type, meaning all fields or values must also implement Hash to derive Hash.  An example of when Hash is required is in storing keys in a HashMap<K, V> to store data efficiently.  Default for Default Values The Default trait allows you to create a default value for a type. Deriving Default implements the default function. The derived implementation of the default function calls the default function on each part of the type, meaning all fields or values in the type must also implement Default to derive Default.  The Default::default function is commonly used in combination with the struct update syntax discussed in the ‚ÄúCreating Instances From Other Instances With Struct Update Syntax‚Äù section in Chapter . You can customize a few fields of a struct and then set and use a default value for the rest of the fields by using ..Default::default().  The Default trait is required when you use the method unwrap_or_default on Option<T> instances, for example. If the Option<T> is None, the method unwrap_or_default will return the result of Default::default for the type T stored in the Option<T>.  Appendix D - Useful Development Tools In this appendix, we talk about some useful development tools that the Rust project provides. We‚Äôll look at automatic formatting, quick ways to apply warning fixes, a linter, and integrating with IDEs.  Automatic Formatting with rustfmt The rustfmt tool reformats your code according to the community code style. Many collaborative projects use rustfmt to prevent arguments about which style to use when writing Rust: everyone formats their code using the tool.  To install rustfmt, enter the following:  This command gives you rustfmt and cargo-fmt, similar to how Rust gives you both rustc and cargo. To format any Cargo project, enter the following:  Running this command reformats all the Rust code in the current crate. This should only change the code style, not the code semantics. For more information on rustfmt, see its documentation.  Fix Your Code with rustfix The rustfix tool is included with Rust installations and can automatically fix compiler warnings that have a clear way to correct the problem that‚Äôs likely what you want. It‚Äôs likely you‚Äôve seen compiler warnings before. For example, consider this code:  Filename: src/main.rs  Here, we‚Äôre calling the do_something function  times, but we never use the variable i in the body of the for loop. Rust warns us about that:  The warning suggests that we use _i as a name instead: the underscore indicates that we intend for this variable to be unused. We can automatically apply that suggestion using the rustfix tool by running the command cargo fix:  When we look at src/main.rs again, we‚Äôll see that cargo fix has changed the code:  Filename: src/main.rs  The for loop variable is now named _i, and the warning no longer appears.  You can also use the cargo fix command to transition your code between different Rust editions. Editions are covered in Appendix E.  More Lints with Clippy The Clippy tool is a collection of lints to analyze your code so you can catch common mistakes and improve your Rust code.  To install Clippy, enter the following:  To run Clippy‚Äôs lints on any Cargo project, enter the following:  For example, say you write a program that uses an approximation of a mathematical constant, such as pi, as this program does:  Filename: src/main.rs  Running cargo clippy on this project results in this error:  This error lets you know that Rust already has a more precise PI constant defined, and that your program would be more correct if you used the constant instead. You would then change your code to use the PI constant. The following code doesn‚Äôt result in any errors or warnings from Clippy:  Filename: src/main.rs  For more information on Clippy, see its documentation.  IDE Integration Using rust-analyzer To help IDE integration, the Rust community recommends using rust-analyzer. This tool is a set of compiler-centric utilities that speaks the Language Server Protocol, which is a specification for IDEs and programming languages to communicate with each other. Different clients can use rust-analyzer, such as the Rust analyzer plug-in for Visual Studio Code.  Visit the rust-analyzer project‚Äôs home page for installation instructions, then install the language server support in your particular IDE. Your IDE will gain abilities such as autocompletion, jump to definition, and inline errors.  Appendix E - Editions In Chapter , you saw that cargo new adds a bit of metadata to your Cargo.toml file about an edition. This appendix talks about what that means!  The Rust language and compiler have a six-week release cycle, meaning users get a constant stream of new features. Other programming languages release larger changes less often; Rust releases smaller updates more frequently. After a while, all of these tiny changes add up. But from release to release, it can be difficult to look back and say, ‚ÄúWow, between Rust . and Rust ., Rust has changed a lot!‚Äù  Every two or three years, the Rust team produces a new Rust edition. Each edition brings together the features that have landed into a clear package with fully updated documentation and tooling. New editions ship as part of the usual six-week release process.  Editions serve different purposes for different people:  For active Rust users, a new edition brings together incremental changes into an easy-to-understand package. For non-users, a new edition signals that some major advancements have landed, which might make Rust worth another look. For those developing Rust, a new edition provides a rallying point for the project as a whole. At the time of this writing, three Rust editions are available: Rust , Rust , and Rust . This book is written using Rust  edition idioms.  The edition key in Cargo.toml indicates which edition the compiler should use for your code. If the key doesn‚Äôt exist, Rust uses  as the edition value for backward compatibility reasons.  Each project can opt in to an edition other than the default  edition. Editions can contain incompatible changes, such as including a new keyword that conflicts with identifiers in code. However, unless you opt in to those changes, your code will continue to compile even as you upgrade the Rust compiler version you use.  All Rust compiler versions support any edition that existed prior to that compiler‚Äôs release, and they can link crates of any supported editions together. Edition changes only affect the way the compiler initially parses code. Therefore, if you‚Äôre using Rust  and one of your dependencies uses Rust , your project will compile and be able to use that dependency. The opposite situation, where your project uses Rust  and a dependency uses Rust , works as well.  To be clear: most features will be available on all editions. Developers using any Rust edition will continue to see improvements as new stable releases are made. However, in some cases, mainly when new keywords are added, some new features might only be available in later editions. You will need to switch editions if you want to take advantage of such features.  For more details, the Edition Guide is a complete book about editions that enumerates the differences between editions and explains how to automatically upgrade your code to a new edition via cargo fix.  Appendix F: Translations of the Book For resources in languages other than English. Most are still in progress; see the Translations label to help or let us know about a new translation!  Portugu√™s (BR) Portugu√™s (PT) ÁÆÄ‰Ωì‰∏≠Êñá Ê≠£È´î‰∏≠Êñá –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ Espa√±ol, alternate Italiano –†—É—Å—Å–∫–∏–π ÌïúÍµ≠Ïñ¥ Êó•Êú¨Ë™û Fran√ßais Polski Cebuano Tagalog Esperanto ŒµŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ Svenska Farsi Deutsch ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡πÑ‡∏ó‡∏¢ Danske Appendix G - How Rust is Made and ‚ÄúNightly Rust‚Äù This appendix is about how Rust is made and how that affects you as a Rust developer.  Stability Without Stagnation As a language, Rust cares a lot about the stability of your code. We want Rust to be a rock-solid foundation you can build on, and if things were constantly changing, that would be impossible. At the same time, if we can‚Äôt experiment with new features, we may not find out important flaws until after their release, when we can no longer change things.  Our solution to this problem is what we call ‚Äústability without stagnation‚Äù, and our guiding principle is this: you should never have to fear upgrading to a new version of stable Rust. Each upgrade should be painless, but should also bring you new features, fewer bugs, and faster compile times.  Choo, Choo! Release Channels and Riding the Trains Rust development operates on a train schedule. That is, all development is done on the master branch of the Rust repository. Releases follow a software release train model, which has been used by Cisco IOS and other software projects. There are three release channels for Rust:  Nightly Beta Stable Most Rust developers primarily use the stable channel, but those who want to try out experimental new features may use nightly or beta.  Here‚Äôs an example of how the development and release process works: let‚Äôs assume that the Rust team is working on the release of Rust .. That release happened in December of , but it will provide us with realistic version numbers. A new feature is added to Rust: a new commit lands on the master branch. Each night, a new nightly version of Rust is produced. Every day is a release day, and these releases are created by our release infrastructure automatically. So as time passes, our releases look like this, once a night:  Every six weeks, it‚Äôs time to prepare a new release! The beta branch of the Rust repository branches off from the master branch used by nightly. Now, there are two releases:  Most Rust users do not use beta releases actively, but test against beta in their CI system to help Rust discover possible regressions. In the meantime, there‚Äôs still a nightly release every night:  Let‚Äôs say a regression is found. Good thing we had some time to test the beta release before the regression snuck into a stable release! The fix is applied to master, so that nightly is fixed, and then the fix is backported to the beta branch, and a new release of beta is produced:  Six weeks after the first beta was created, it‚Äôs time for a stable release! The stable branch is produced from the beta branch:  Hooray! Rust . is done! However, we‚Äôve forgotten one thing: because the six weeks have gone by, we also need a new beta of the next version of Rust, .. So after stable branches off of beta, the next version of beta branches off of nightly again:  This is called the ‚Äútrain model‚Äù because every six weeks, a release ‚Äúleaves the station‚Äù, but still has to take a journey through the beta channel before it arrives as a stable release.  Rust releases every six weeks, like clockwork. If you know the date of one Rust release, you can know the date of the next one: it‚Äôs six weeks later. A nice aspect of having releases scheduled every six weeks is that the next train is coming soon. If a feature happens to miss a particular release, there‚Äôs no need to worry: another one is happening in a short time! This helps reduce pressure to sneak possibly unpolished features in close to the release deadline.  Thanks to this process, you can always check out the next build of Rust and verify for yourself that it‚Äôs easy to upgrade to: if a beta release doesn‚Äôt work as expected, you can report it to the team and get it fixed before the next stable release happens! Breakage in a beta release is relatively rare, but rustc is still a piece of software, and bugs do exist.  Maintenance time The Rust project supports the most recent stable version. When a new stable version is released, the old version reaches its end of life (EOL). This means each version is supported for six weeks.  Unstable Features There‚Äôs one more catch with this release model: unstable features. Rust uses a technique called ‚Äúfeature flags‚Äù to determine what features are enabled in a given release. If a new feature is under active development, it lands on master, and therefore, in nightly, but behind a feature flag. If you, as a user, wish to try out the work-in-progress feature, you can, but you must be using a nightly release of Rust and annotate your source code with the appropriate flag to opt in.  If you‚Äôre using a beta or stable release of Rust, you can‚Äôt use any feature flags. This is the key that allows us to get practical use with new features before we declare them stable forever. Those who wish to opt into the bleeding edge can do so, and those who want a rock-solid experience can stick with stable and know that their code won‚Äôt break. Stability without stagnation.  This book only contains information about stable features, as in-progress features are still changing, and surely they‚Äôll be different between when this book was written and when they get enabled in stable builds. You can find documentation for nightly-only features online.  Rustup and the Role of Rust Nightly Rustup makes it easy to change between different release channels of Rust, on a global or per-project basis. By default, you‚Äôll have stable Rust installed. To install nightly, for example:  You can see all of the toolchains (releases of Rust and associated components) you have installed with rustup as well. Here‚Äôs an example on one of your authors‚Äô Windows computer:  As you can see, the stable toolchain is the default. Most Rust users use stable most of the time. You might want to use stable most of the time, but use nightly on a specific project, because you care about a cutting-edge feature. To do so, you can use rustup override in that project‚Äôs directory to set the nightly toolchain as the one rustup should use when you‚Äôre in that directory:  Now, every time you call rustc or cargo inside of ~/projects/needs-nightly, rustup will make sure that you are using nightly Rust, rather than your default of stable Rust. This comes in handy when you have a lot of Rust projects!  The RFC Process and Teams So how do you learn about these new features? Rust‚Äôs development model follows a Request For Comments (RFC) process. If you‚Äôd like an improvement in Rust, you can write up a proposal, called an RFC.  Anyone can write RFCs to improve Rust, and the proposals are reviewed and discussed by the Rust team, which is comprised of many topic subteams. There‚Äôs a full list of the teams on Rust‚Äôs website, which includes teams for each area of the project: language design, compiler implementation, infrastructure, documentation, and more. The appropriate team reads the proposal and the comments, writes some comments of their own, and eventually, there‚Äôs consensus to accept or reject the feature.  If the feature is accepted, an issue is opened on the Rust repository, and someone can implement it. The person who implements it very well may not be the person who proposed the feature in the first place! When the implementation is ready, it lands on the master branch behind a feature gate, as we discussed in the ‚ÄúUnstable Features‚Äù section.  After some time, once Rust developers who use nightly releases have been able to try out the new feature, team members will discuss the feature, how it‚Äôs worked out on nightly, and decide if it should make it into stable Rust or not. If the decision is to move forward, the feature gate is removed, and the feature is now considered stable! It rides the trains into a new stable release of Rust. 
